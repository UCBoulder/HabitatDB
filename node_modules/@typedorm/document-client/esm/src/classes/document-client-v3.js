import { TransactionCanceledException, } from '@aws-sdk/client-dynamodb';
import { BatchGetCommand, BatchWriteCommand, DeleteCommand, DynamoDBDocumentClient, GetCommand, PutCommand, QueryCommand, ScanCommand, TransactGetCommand, TransactWriteCommand, UpdateCommand, } from '@aws-sdk/lib-dynamodb';
import { TransactionCancelledException } from '../exceptions';
import { DocumentClient } from './base-document-client';
export class DocumentClientV3 extends DocumentClient {
    documentClient;
    version = 3;
    constructor(dynamoDBClient) {
        super();
        const marshallOptions = {
            // Whether to automatically convert empty strings, blobs, and sets to `null`.
            convertEmptyValues: false,
            // Whether to remove undefined values while marshalling.
            removeUndefinedValues: false,
            // Whether to convert typeof object to map attribute.
            convertClassInstanceToMap: false, // false, by default.
        };
        const unmarshallOptions = {
            // Whether to return numbers as a string instead of converting them to native JavaScript numbers.
            wrapNumbers: false, // false, by default.
        };
        const translateConfig = { marshallOptions, unmarshallOptions };
        this.documentClient = DynamoDBDocumentClient.from(dynamoDBClient, translateConfig);
    }
    async put(input) {
        return this.documentClient.send(new PutCommand(input));
    }
    async get(input) {
        return this.documentClient.send(new GetCommand(input));
    }
    async query(input) {
        return this.documentClient.send(new QueryCommand(input));
    }
    async update(input) {
        return this.documentClient.send(new UpdateCommand(input));
    }
    async delete(input) {
        return this.documentClient.send(new DeleteCommand(input));
    }
    async batchWrite(input) {
        return this.documentClient.send(new BatchWriteCommand(input));
    }
    async batchGet(input) {
        return this.documentClient.send(new BatchGetCommand(input));
    }
    async transactGet(input) {
        return this.documentClient.send(new TransactGetCommand(input));
    }
    async transactWrite(input) {
        try {
            const response = await this.documentClient.send(new TransactWriteCommand(input));
            return response;
        }
        catch (err) {
            if (err instanceof TransactionCanceledException) {
                // Remap TransactionCanceledException to unified TransactionCancelledException
                throw new TransactionCancelledException(err.Message || err.message, err.CancellationReasons?.map(reason => ({
                    code: reason.Code,
                    message: reason.Message,
                    item: reason.Item,
                })) || []);
            }
            throw err;
        }
    }
    async scan(input) {
        return this.documentClient.send(new ScanCommand(input));
    }
}
//# sourceMappingURL=data:application/json;base64,