import { DynamoDB } from 'aws-sdk';
import { DocumentClient } from './base-document-client';
export declare class DocumentClientV2<DocumentClientType extends DynamoDB.DocumentClient = DynamoDB.DocumentClient> extends DocumentClient {
    readonly documentClient: DocumentClientType;
    readonly version = 2;
    constructor(dynamoDBClient: DocumentClientType);
    put(input: DynamoDB.DocumentClient.PutItemInput): Promise<DynamoDB.DocumentClient.PutItemOutput>;
    get(input: DynamoDB.DocumentClient.GetItemInput): Promise<DynamoDB.DocumentClient.GetItemOutput>;
    query(input: DynamoDB.DocumentClient.QueryInput): Promise<DynamoDB.DocumentClient.QueryOutput>;
    update(input: DynamoDB.DocumentClient.UpdateItemInput): Promise<DynamoDB.DocumentClient.UpdateItemOutput>;
    delete(input: DynamoDB.DocumentClient.DeleteItemInput): Promise<DynamoDB.DocumentClient.DeleteItemOutput>;
    batchWrite(input: DynamoDB.DocumentClient.BatchWriteItemInput): Promise<DynamoDB.DocumentClient.BatchWriteItemOutput>;
    batchGet(input: DynamoDB.DocumentClient.BatchGetItemInput): Promise<DynamoDB.DocumentClient.BatchGetItemOutput>;
    transactGet(input: DynamoDB.DocumentClient.TransactGetItemsInput): Promise<DynamoDB.DocumentClient.TransactGetItemsOutput>;
    transactWrite(input: DynamoDB.DocumentClient.TransactWriteItemsInput): Promise<DynamoDB.DocumentClient.TransactWriteItemsOutput>;
    scan(input: DynamoDB.DocumentClient.ScanInput): Promise<DynamoDB.DocumentClient.ScanOutput>;
    private transactGetRaw;
    private transactWriteRaw;
    private handleTransactionResult;
}
