"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentClientV3 = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const exceptions_1 = require("../exceptions");
const base_document_client_1 = require("./base-document-client");
class DocumentClientV3 extends base_document_client_1.DocumentClient {
    constructor(dynamoDBClient) {
        super();
        this.version = 3;
        const marshallOptions = {
            // Whether to automatically convert empty strings, blobs, and sets to `null`.
            convertEmptyValues: false,
            // Whether to remove undefined values while marshalling.
            removeUndefinedValues: false,
            // Whether to convert typeof object to map attribute.
            convertClassInstanceToMap: false, // false, by default.
        };
        const unmarshallOptions = {
            // Whether to return numbers as a string instead of converting them to native JavaScript numbers.
            wrapNumbers: false, // false, by default.
        };
        const translateConfig = { marshallOptions, unmarshallOptions };
        this.documentClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoDBClient, translateConfig);
    }
    put(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.PutCommand(input));
        });
    }
    get(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.GetCommand(input));
        });
    }
    query(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.QueryCommand(input));
        });
    }
    update(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.UpdateCommand(input));
        });
    }
    delete(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.DeleteCommand(input));
        });
    }
    batchWrite(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.BatchWriteCommand(input));
        });
    }
    batchGet(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.BatchGetCommand(input));
        });
    }
    transactGet(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.TransactGetCommand(input));
        });
    }
    transactWrite(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.documentClient.send(new lib_dynamodb_1.TransactWriteCommand(input));
                return response;
            }
            catch (err) {
                if (err instanceof client_dynamodb_1.TransactionCanceledException) {
                    // Remap TransactionCanceledException to unified TransactionCancelledException
                    throw new exceptions_1.TransactionCancelledException(err.Message || err.message, ((_a = err.CancellationReasons) === null || _a === void 0 ? void 0 : _a.map(reason => ({
                        code: reason.Code,
                        message: reason.Message,
                        item: reason.Item,
                    }))) || []);
                }
                throw err;
            }
        });
    }
    scan(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.send(new lib_dynamodb_1.ScanCommand(input));
        });
    }
}
exports.DocumentClientV3 = DocumentClientV3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtY2xpZW50LXYzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvZG9jdW1lbnQtY2xpZW50L3NyYy9jbGFzc2VzL2RvY3VtZW50LWNsaWVudC12My50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw4REF1QmtDO0FBQ2xDLHdEQVkrQjtBQUMvQiw4Q0FBNEQ7QUFDNUQsaUVBQXNEO0FBRXRELE1BQWEsZ0JBRVgsU0FBUSxxQ0FBYztJQUl0QixZQUFZLGNBQThCO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBSEQsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUluQixNQUFNLGVBQWUsR0FBRztZQUN0Qiw2RUFBNkU7WUFDN0Usa0JBQWtCLEVBQUUsS0FBSztZQUN6Qix3REFBd0Q7WUFDeEQscUJBQXFCLEVBQUUsS0FBSztZQUM1QixxREFBcUQ7WUFDckQseUJBQXlCLEVBQUUsS0FBSyxFQUFFLHFCQUFxQjtTQUN4RCxDQUFDO1FBRUYsTUFBTSxpQkFBaUIsR0FBRztZQUN4QixpR0FBaUc7WUFDakcsV0FBVyxFQUFFLEtBQUssRUFBRSxxQkFBcUI7U0FDMUMsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLEVBQUMsZUFBZSxFQUFFLGlCQUFpQixFQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQ0FBc0IsQ0FBQyxJQUFJLENBQy9DLGNBQWMsRUFDZCxlQUFlLENBQ2MsQ0FBQztJQUNsQyxDQUFDO0lBRUssR0FBRyxDQUFDLEtBQW1COztZQUMzQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUkseUJBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7S0FBQTtJQUVLLEdBQUcsQ0FBQyxLQUFtQjs7WUFDM0IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLHlCQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDO0tBQUE7SUFFSyxLQUFLLENBQUMsS0FBaUI7O1lBQzNCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSwyQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQztLQUFBO0lBRUssTUFBTSxDQUFDLEtBQXNCOztZQUNqQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksNEJBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUM7S0FBQTtJQUVLLE1BQU0sQ0FBQyxLQUFzQjs7WUFDakMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLDRCQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDO0tBQUE7SUFFSyxVQUFVLENBQUMsS0FBMEI7O1lBQ3pDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxnQ0FBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7S0FBQTtJQUVLLFFBQVEsQ0FBQyxLQUF3Qjs7WUFDckMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLDhCQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDO0tBQUE7SUFFSyxXQUFXLENBQ2YsS0FBNEI7O1lBRTVCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQ0FBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7S0FBQTtJQUVLLGFBQWEsQ0FDakIsS0FBOEI7OztZQUU5QixJQUFJO2dCQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdDLElBQUksbUNBQW9CLENBQUMsS0FBSyxDQUFDLENBQ2hDLENBQUM7Z0JBQ0YsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixJQUFJLEdBQUcsWUFBWSw4Q0FBNEIsRUFBRTtvQkFDL0MsOEVBQThFO29CQUM5RSxNQUFNLElBQUksMENBQTZCLENBQ3JDLEdBQUcsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLE9BQU8sRUFDMUIsQ0FBQSxNQUFBLEdBQUcsQ0FBQyxtQkFBbUIsMENBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDdEMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO3dCQUNqQixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU87d0JBQ3ZCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtxQkFDbEIsQ0FBQyxDQUFDLEtBQUksRUFBRSxDQUNWLENBQUM7aUJBQ0g7Z0JBQ0QsTUFBTSxHQUFHLENBQUM7YUFDWDs7S0FDRjtJQUVLLElBQUksQ0FBQyxLQUFnQjs7WUFDekIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLDBCQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO0tBQUE7Q0FDRjtBQTFGRCw0Q0EwRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYXRjaEdldEl0ZW1JbnB1dCxcbiAgQmF0Y2hHZXRJdGVtT3V0cHV0LFxuICBCYXRjaFdyaXRlSXRlbUlucHV0LFxuICBCYXRjaFdyaXRlSXRlbU91dHB1dCxcbiAgRGVsZXRlSXRlbUlucHV0LFxuICBEZWxldGVJdGVtT3V0cHV0LFxuICBEeW5hbW9EQkNsaWVudCxcbiAgR2V0SXRlbUlucHV0LFxuICBHZXRJdGVtT3V0cHV0LFxuICBQdXRJdGVtSW5wdXQsXG4gIFB1dEl0ZW1PdXRwdXQsXG4gIFF1ZXJ5SW5wdXQsXG4gIFF1ZXJ5T3V0cHV0LFxuICBTY2FuSW5wdXQsXG4gIFNjYW5PdXRwdXQsXG4gIFRyYW5zYWN0R2V0SXRlbXNJbnB1dCxcbiAgVHJhbnNhY3RHZXRJdGVtc091dHB1dCxcbiAgVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvbixcbiAgVHJhbnNhY3RXcml0ZUl0ZW1zSW5wdXQsXG4gIFRyYW5zYWN0V3JpdGVJdGVtc091dHB1dCxcbiAgVXBkYXRlSXRlbUlucHV0LFxuICBVcGRhdGVJdGVtT3V0cHV0LFxufSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInO1xuaW1wb3J0IHtcbiAgQmF0Y2hHZXRDb21tYW5kLFxuICBCYXRjaFdyaXRlQ29tbWFuZCxcbiAgRGVsZXRlQ29tbWFuZCxcbiAgRHluYW1vREJEb2N1bWVudENsaWVudCxcbiAgR2V0Q29tbWFuZCxcbiAgUHV0Q29tbWFuZCxcbiAgUXVlcnlDb21tYW5kLFxuICBTY2FuQ29tbWFuZCxcbiAgVHJhbnNhY3RHZXRDb21tYW5kLFxuICBUcmFuc2FjdFdyaXRlQ29tbWFuZCxcbiAgVXBkYXRlQ29tbWFuZCxcbn0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcbmltcG9ydCB7VHJhbnNhY3Rpb25DYW5jZWxsZWRFeGNlcHRpb259IGZyb20gJy4uL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHtEb2N1bWVudENsaWVudH0gZnJvbSAnLi9iYXNlLWRvY3VtZW50LWNsaWVudCc7XG5cbmV4cG9ydCBjbGFzcyBEb2N1bWVudENsaWVudFYzPFxuICBEeW5hbW9EQkRvY3VtZW50Q2xpZW50VHlwZSBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnQgPSBEeW5hbW9EQkRvY3VtZW50Q2xpZW50XG4+IGV4dGVuZHMgRG9jdW1lbnRDbGllbnQge1xuICByZWFkb25seSBkb2N1bWVudENsaWVudDogRHluYW1vREJEb2N1bWVudENsaWVudFR5cGU7XG4gIHJlYWRvbmx5IHZlcnNpb24gPSAzO1xuXG4gIGNvbnN0cnVjdG9yKGR5bmFtb0RCQ2xpZW50OiBEeW5hbW9EQkNsaWVudCkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgbWFyc2hhbGxPcHRpb25zID0ge1xuICAgICAgLy8gV2hldGhlciB0byBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgZW1wdHkgc3RyaW5ncywgYmxvYnMsIGFuZCBzZXRzIHRvIGBudWxsYC5cbiAgICAgIGNvbnZlcnRFbXB0eVZhbHVlczogZmFsc2UsIC8vIGZhbHNlLCBieSBkZWZhdWx0LlxuICAgICAgLy8gV2hldGhlciB0byByZW1vdmUgdW5kZWZpbmVkIHZhbHVlcyB3aGlsZSBtYXJzaGFsbGluZy5cbiAgICAgIHJlbW92ZVVuZGVmaW5lZFZhbHVlczogZmFsc2UsIC8vIGZhbHNlLCBieSBkZWZhdWx0LlxuICAgICAgLy8gV2hldGhlciB0byBjb252ZXJ0IHR5cGVvZiBvYmplY3QgdG8gbWFwIGF0dHJpYnV0ZS5cbiAgICAgIGNvbnZlcnRDbGFzc0luc3RhbmNlVG9NYXA6IGZhbHNlLCAvLyBmYWxzZSwgYnkgZGVmYXVsdC5cbiAgICB9O1xuXG4gICAgY29uc3QgdW5tYXJzaGFsbE9wdGlvbnMgPSB7XG4gICAgICAvLyBXaGV0aGVyIHRvIHJldHVybiBudW1iZXJzIGFzIGEgc3RyaW5nIGluc3RlYWQgb2YgY29udmVydGluZyB0aGVtIHRvIG5hdGl2ZSBKYXZhU2NyaXB0IG51bWJlcnMuXG4gICAgICB3cmFwTnVtYmVyczogZmFsc2UsIC8vIGZhbHNlLCBieSBkZWZhdWx0LlxuICAgIH07XG5cbiAgICBjb25zdCB0cmFuc2xhdGVDb25maWcgPSB7bWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsT3B0aW9uc307XG4gICAgdGhpcy5kb2N1bWVudENsaWVudCA9IER5bmFtb0RCRG9jdW1lbnRDbGllbnQuZnJvbShcbiAgICAgIGR5bmFtb0RCQ2xpZW50LFxuICAgICAgdHJhbnNsYXRlQ29uZmlnXG4gICAgKSBhcyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50VHlwZTtcbiAgfVxuXG4gIGFzeW5jIHB1dChpbnB1dDogUHV0SXRlbUlucHV0KTogUHJvbWlzZTxQdXRJdGVtT3V0cHV0PiB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRDbGllbnQuc2VuZChuZXcgUHV0Q29tbWFuZChpbnB1dCkpO1xuICB9XG5cbiAgYXN5bmMgZ2V0KGlucHV0OiBHZXRJdGVtSW5wdXQpOiBQcm9taXNlPEdldEl0ZW1PdXRwdXQ+IHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudENsaWVudC5zZW5kKG5ldyBHZXRDb21tYW5kKGlucHV0KSk7XG4gIH1cblxuICBhc3luYyBxdWVyeShpbnB1dDogUXVlcnlJbnB1dCk6IFByb21pc2U8UXVlcnlPdXRwdXQ+IHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudENsaWVudC5zZW5kKG5ldyBRdWVyeUNvbW1hbmQoaW5wdXQpKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShpbnB1dDogVXBkYXRlSXRlbUlucHV0KTogUHJvbWlzZTxVcGRhdGVJdGVtT3V0cHV0PiB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRDbGllbnQuc2VuZChuZXcgVXBkYXRlQ29tbWFuZChpbnB1dCkpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKGlucHV0OiBEZWxldGVJdGVtSW5wdXQpOiBQcm9taXNlPERlbGV0ZUl0ZW1PdXRwdXQ+IHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudENsaWVudC5zZW5kKG5ldyBEZWxldGVDb21tYW5kKGlucHV0KSk7XG4gIH1cblxuICBhc3luYyBiYXRjaFdyaXRlKGlucHV0OiBCYXRjaFdyaXRlSXRlbUlucHV0KTogUHJvbWlzZTxCYXRjaFdyaXRlSXRlbU91dHB1dD4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q2xpZW50LnNlbmQobmV3IEJhdGNoV3JpdGVDb21tYW5kKGlucHV0KSk7XG4gIH1cblxuICBhc3luYyBiYXRjaEdldChpbnB1dDogQmF0Y2hHZXRJdGVtSW5wdXQpOiBQcm9taXNlPEJhdGNoR2V0SXRlbU91dHB1dD4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q2xpZW50LnNlbmQobmV3IEJhdGNoR2V0Q29tbWFuZChpbnB1dCkpO1xuICB9XG5cbiAgYXN5bmMgdHJhbnNhY3RHZXQoXG4gICAgaW5wdXQ6IFRyYW5zYWN0R2V0SXRlbXNJbnB1dFxuICApOiBQcm9taXNlPFRyYW5zYWN0R2V0SXRlbXNPdXRwdXQ+IHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudENsaWVudC5zZW5kKG5ldyBUcmFuc2FjdEdldENvbW1hbmQoaW5wdXQpKTtcbiAgfVxuXG4gIGFzeW5jIHRyYW5zYWN0V3JpdGUoXG4gICAgaW5wdXQ6IFRyYW5zYWN0V3JpdGVJdGVtc0lucHV0XG4gICk6IFByb21pc2U8VHJhbnNhY3RXcml0ZUl0ZW1zT3V0cHV0PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5kb2N1bWVudENsaWVudC5zZW5kKFxuICAgICAgICBuZXcgVHJhbnNhY3RXcml0ZUNvbW1hbmQoaW5wdXQpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFRyYW5zYWN0aW9uQ2FuY2VsZWRFeGNlcHRpb24pIHtcbiAgICAgICAgLy8gUmVtYXAgVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvbiB0byB1bmlmaWVkIFRyYW5zYWN0aW9uQ2FuY2VsbGVkRXhjZXB0aW9uXG4gICAgICAgIHRocm93IG5ldyBUcmFuc2FjdGlvbkNhbmNlbGxlZEV4Y2VwdGlvbihcbiAgICAgICAgICBlcnIuTWVzc2FnZSB8fCBlcnIubWVzc2FnZSxcbiAgICAgICAgICBlcnIuQ2FuY2VsbGF0aW9uUmVhc29ucz8ubWFwKHJlYXNvbiA9PiAoe1xuICAgICAgICAgICAgY29kZTogcmVhc29uLkNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiByZWFzb24uTWVzc2FnZSxcbiAgICAgICAgICAgIGl0ZW06IHJlYXNvbi5JdGVtLFxuICAgICAgICAgIH0pKSB8fCBbXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNjYW4oaW5wdXQ6IFNjYW5JbnB1dCk6IFByb21pc2U8U2Nhbk91dHB1dD4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q2xpZW50LnNlbmQobmV3IFNjYW5Db21tYW5kKGlucHV0KSk7XG4gIH1cbn1cbiJdfQ==