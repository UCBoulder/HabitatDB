export declare enum TRANSFORM_TYPE {
    GET = "GET",
    PUT = "PUT",
    UPDATE = "UPDATE",
    DELETE = "DELETE",
    QUERY = "QUERY",
    RESPONSE = "RESPONSE"
}
export declare enum MANAGER_NAME {
    ENTITY_MANAGER = "ENTITY MANAGER",
    TRANSACTION_MANAGER = "TRANSACTION MANAGER",
    BATCH_MANAGER = "BATCH MANAGER",
    SCAN_MANAGER = "SCAN_MANAGER"
}
export declare enum TRANSFORM_TRANSACTION_TYPE {
    TRANSACTION_WRITE = "TRANSACTION_WRITE",
    TRANSACTION_READ = "TRANSACTION_READ"
}
export declare enum TRANSFORM_SCAN_TYPE {
    SCAN = "SCAN",
    PARALLEL_SCAN = "PARALLEL_SCAN"
}
export declare enum TRANSFORM_BATCH_TYPE {
    BATCH_WRITE = "BATCH_WRITE",
    BATCH_READ = "BATCH_READ"
}
export declare enum STATS_TYPE {
    CONSUMED_CAPACITY = "CONSUMED_CAPACITY"
}
export declare class DebugLogger {
    private debugTransformLog;
    private debugTransformBatchLog;
    private debugTransformTransactionLog;
    private debugTransformScanLog;
    private debugInfoLog;
    private debugWarnLog;
    private debugErrorLog;
    private debugStatsLog;
    /**
     * Get unique request id for each request, and include it in each log
     * this allows for easy debugging
     * @returns unique request uuid
     */
    getRequestId(): string;
    logTransform({ requestId, operation, prefix, entityName, primaryKey, body, options, }: {
        requestId?: string;
        operation: TRANSFORM_TYPE;
        prefix: string;
        entityName: string;
        primaryKey: any;
        body?: any;
        options?: any;
    }): void;
    logTransformBatch({ requestId, operation, prefix, body, options, }: {
        requestId?: string;
        operation: TRANSFORM_BATCH_TYPE;
        prefix: string;
        body?: any;
        options?: any;
    }): void;
    logTransformTransaction({ requestId, operation, prefix, body, options, }: {
        requestId?: string;
        operation: TRANSFORM_TRANSACTION_TYPE;
        prefix: string;
        body?: any;
        options?: any;
    }): void;
    logTransformScan({ requestId, prefix, operation, body, options, }: {
        requestId?: string;
        operation: TRANSFORM_SCAN_TYPE;
        prefix: string;
        body?: any;
        options?: any;
    }): void;
    logStats({ requestId, requestSegment, scope, statsType, consumedCapacityData, }: {
        requestId?: string;
        requestSegment?: number;
        scope: MANAGER_NAME;
        statsType: STATS_TYPE;
        consumedCapacityData: any;
    }): void;
    logInfo({ requestId, scope, log, }: {
        requestId?: string;
        scope: MANAGER_NAME;
        log: string;
    }): void;
    logWarn({ requestId, scope, log, }: {
        requestId?: string;
        scope: MANAGER_NAME;
        log: string;
    }): void;
    logError({ requestId, scope, log, }: {
        requestId?: string;
        scope: MANAGER_NAME;
        log: any;
    }): void;
    private ensurePrintable;
}
