"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugLogger = exports.STATS_TYPE = exports.TRANSFORM_BATCH_TYPE = exports.TRANSFORM_SCAN_TYPE = exports.TRANSFORM_TRANSACTION_TYPE = exports.MANAGER_NAME = exports.TRANSFORM_TYPE = void 0;
const debug_1 = __importDefault(require("debug"));
const chalk_1 = __importDefault(require("chalk"));
const uuid_1 = require("uuid");
var TRANSFORM_TYPE;
(function (TRANSFORM_TYPE) {
    TRANSFORM_TYPE["GET"] = "GET";
    TRANSFORM_TYPE["PUT"] = "PUT";
    TRANSFORM_TYPE["UPDATE"] = "UPDATE";
    TRANSFORM_TYPE["DELETE"] = "DELETE";
    TRANSFORM_TYPE["QUERY"] = "QUERY";
    TRANSFORM_TYPE["RESPONSE"] = "RESPONSE";
})(TRANSFORM_TYPE = exports.TRANSFORM_TYPE || (exports.TRANSFORM_TYPE = {}));
var MANAGER_NAME;
(function (MANAGER_NAME) {
    MANAGER_NAME["ENTITY_MANAGER"] = "ENTITY MANAGER";
    MANAGER_NAME["TRANSACTION_MANAGER"] = "TRANSACTION MANAGER";
    MANAGER_NAME["BATCH_MANAGER"] = "BATCH MANAGER";
    MANAGER_NAME["SCAN_MANAGER"] = "SCAN_MANAGER";
})(MANAGER_NAME = exports.MANAGER_NAME || (exports.MANAGER_NAME = {}));
var TRANSFORM_TRANSACTION_TYPE;
(function (TRANSFORM_TRANSACTION_TYPE) {
    TRANSFORM_TRANSACTION_TYPE["TRANSACTION_WRITE"] = "TRANSACTION_WRITE";
    TRANSFORM_TRANSACTION_TYPE["TRANSACTION_READ"] = "TRANSACTION_READ";
})(TRANSFORM_TRANSACTION_TYPE = exports.TRANSFORM_TRANSACTION_TYPE || (exports.TRANSFORM_TRANSACTION_TYPE = {}));
var TRANSFORM_SCAN_TYPE;
(function (TRANSFORM_SCAN_TYPE) {
    TRANSFORM_SCAN_TYPE["SCAN"] = "SCAN";
    TRANSFORM_SCAN_TYPE["PARALLEL_SCAN"] = "PARALLEL_SCAN";
})(TRANSFORM_SCAN_TYPE = exports.TRANSFORM_SCAN_TYPE || (exports.TRANSFORM_SCAN_TYPE = {}));
var TRANSFORM_BATCH_TYPE;
(function (TRANSFORM_BATCH_TYPE) {
    TRANSFORM_BATCH_TYPE["BATCH_WRITE"] = "BATCH_WRITE";
    TRANSFORM_BATCH_TYPE["BATCH_READ"] = "BATCH_READ";
})(TRANSFORM_BATCH_TYPE = exports.TRANSFORM_BATCH_TYPE || (exports.TRANSFORM_BATCH_TYPE = {}));
var STATS_TYPE;
(function (STATS_TYPE) {
    STATS_TYPE["CONSUMED_CAPACITY"] = "CONSUMED_CAPACITY";
})(STATS_TYPE = exports.STATS_TYPE || (exports.STATS_TYPE = {}));
class DebugLogger {
    constructor() {
        // log
        this.debugTransformLog = (0, debug_1.default)('typedorm:transform:log');
        // batch transform logger
        this.debugTransformBatchLog = (0, debug_1.default)('typedorm:transform:batch:log');
        // transaction transform logger
        this.debugTransformTransactionLog = (0, debug_1.default)('typedorm:transform:transaction:log');
        // scan transform logger
        this.debugTransformScanLog = (0, debug_1.default)('typedorm:transform:scan:log');
        // info logger
        this.debugInfoLog = (0, debug_1.default)('typedorm:info:log');
        this.debugWarnLog = (0, debug_1.default)('typedorm:warn:log');
        this.debugErrorLog = (0, debug_1.default)('typedorm:error:log');
        // stats logger
        this.debugStatsLog = (0, debug_1.default)('typedorm:stats:log');
    }
    /**
     * Get unique request id for each request, and include it in each log
     * this allows for easy debugging
     * @returns unique request uuid
     */
    getRequestId() {
        return (0, uuid_1.v4)();
    }
    logTransform({ requestId, operation, prefix, entityName, primaryKey, body, options, }) {
        if (this.debugTransformLog.enabled) {
            this.debugTransformLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(operation)} ${chalk_1.default.blue(entityName)} ${chalk_1.default.magenta(prefix)}:`, ...(primaryKey
                ? [
                    chalk_1.default.blueBright('\nPrimary key: '),
                    chalk_1.default.white(this.ensurePrintable(primaryKey)),
                ]
                : []), ...(body
                ? [
                    chalk_1.default.blueBright('\nBody: '),
                    chalk_1.default.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk_1.default.blueBright('\nOptions: '),
                    chalk_1.default.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logTransformBatch({ requestId, operation, prefix, body, options, }) {
        if (this.debugTransformBatchLog.enabled) {
            this.debugTransformBatchLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(operation)} ${chalk_1.default.magenta(prefix)}:`, ...(body
                ? [
                    chalk_1.default.blueBright('\nBody: '),
                    chalk_1.default.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk_1.default.blueBright('\nOptions: '),
                    chalk_1.default.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logTransformTransaction({ requestId, operation, prefix, body, options, }) {
        if (this.debugTransformTransactionLog.enabled) {
            this.debugTransformTransactionLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(operation)} ${chalk_1.default.magenta(prefix)}:`, ...(body
                ? [
                    chalk_1.default.blueBright('\nBody: '),
                    chalk_1.default.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk_1.default.blueBright('\nOptions: '),
                    chalk_1.default.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logTransformScan({ requestId, prefix, operation, body, options, }) {
        if (this.debugTransformScanLog.enabled) {
            this.debugTransformScanLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(operation)} ${chalk_1.default.magenta(prefix)}:`, ...(body
                ? [
                    chalk_1.default.blueBright('\nBody: '),
                    chalk_1.default.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk_1.default.blueBright('\nOptions: '),
                    chalk_1.default.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logStats({ requestId, requestSegment, scope, statsType, consumedCapacityData, }) {
        if (this.debugStatsLog.enabled) {
            this.debugStatsLog(`${chalk_1.default.bold.bgCyanBright(requestId) +
                (requestSegment ? ':' + chalk_1.default.bold.bgCyanBright(requestId) : '')} ${chalk_1.default.green(scope)} ${chalk_1.default.magenta(statsType)}:`, chalk_1.default.white(this.ensurePrintable(consumedCapacityData)));
        }
    }
    logInfo({ requestId, scope, log, }) {
        if (this.debugInfoLog.enabled) {
            this.debugInfoLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(scope)}:`, chalk_1.default.white(this.ensurePrintable(log)));
        }
    }
    logWarn({ requestId, scope, log, }) {
        if (this.debugWarnLog.enabled) {
            this.debugWarnLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(scope)}:`, chalk_1.default.yellow(this.ensurePrintable(log)));
        }
    }
    logError({ requestId, scope, log, }) {
        if (this.debugErrorLog.enabled) {
            this.debugErrorLog(`${chalk_1.default.bold.bgCyanBright(requestId)} ${chalk_1.default.green(scope)}:`, chalk_1.default.red(this.ensurePrintable(log)));
        }
    }
    ensurePrintable(log) {
        if (typeof log === 'object' && log !== null) {
            return `\n${JSON.stringify(log, null, 2)}\n`;
        }
        else
            return log;
    }
}
exports.DebugLogger = DebugLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9sb2dnZXIvZGVidWctbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQixrREFBMEI7QUFDMUIsK0JBQXdCO0FBRXhCLElBQVksY0FPWDtBQVBELFdBQVksY0FBYztJQUN4Qiw2QkFBVyxDQUFBO0lBQ1gsNkJBQVcsQ0FBQTtJQUNYLG1DQUFpQixDQUFBO0lBQ2pCLG1DQUFpQixDQUFBO0lBQ2pCLGlDQUFlLENBQUE7SUFDZix1Q0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBUFcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFPekI7QUFFRCxJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdEIsaURBQWlDLENBQUE7SUFDakMsMkRBQTJDLENBQUE7SUFDM0MsK0NBQStCLENBQUE7SUFDL0IsNkNBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQUxXLFlBQVksR0FBWixvQkFBWSxLQUFaLG9CQUFZLFFBS3ZCO0FBQ0QsSUFBWSwwQkFHWDtBQUhELFdBQVksMEJBQTBCO0lBQ3BDLHFFQUF1QyxDQUFBO0lBQ3ZDLG1FQUFxQyxDQUFBO0FBQ3ZDLENBQUMsRUFIVywwQkFBMEIsR0FBMUIsa0NBQTBCLEtBQTFCLGtDQUEwQixRQUdyQztBQUVELElBQVksbUJBR1g7QUFIRCxXQUFZLG1CQUFtQjtJQUM3QixvQ0FBYSxDQUFBO0lBQ2Isc0RBQStCLENBQUE7QUFDakMsQ0FBQyxFQUhXLG1CQUFtQixHQUFuQiwyQkFBbUIsS0FBbkIsMkJBQW1CLFFBRzlCO0FBRUQsSUFBWSxvQkFHWDtBQUhELFdBQVksb0JBQW9CO0lBQzlCLG1EQUEyQixDQUFBO0lBQzNCLGlEQUF5QixDQUFBO0FBQzNCLENBQUMsRUFIVyxvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixR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TyxFQUFFO1lBQzlCLElBQUksQ0FBQyxhQUFhLENBQ2hCLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksZUFBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUM5RCxlQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDckMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVPLGVBQWUsQ0FBQyxHQUFRO1FBQzlCLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDM0MsT0FBTyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzlDOztZQUFNLE9BQU8sR0FBRyxDQUFDO0lBQ3BCLENBQUM7Q0FDRjtBQTdQRCxrQ0E2UEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCB7djR9IGZyb20gJ3V1aWQnO1xuXG5leHBvcnQgZW51bSBUUkFOU0ZPUk1fVFlQRSB7XG4gIEdFVCA9ICdHRVQnLFxuICBQVVQgPSAnUFVUJyxcbiAgVVBEQVRFID0gJ1VQREFURScsXG4gIERFTEVURSA9ICdERUxFVEUnLFxuICBRVUVSWSA9ICdRVUVSWScsXG4gIFJFU1BPTlNFID0gJ1JFU1BPTlNFJyxcbn1cblxuZXhwb3J0IGVudW0gTUFOQUdFUl9OQU1FIHtcbiAgRU5USVRZX01BTkFHRVIgPSAnRU5USVRZIE1BTkFHRVInLFxuICBUUkFOU0FDVElPTl9NQU5BR0VSID0gJ1RSQU5TQUNUSU9OIE1BTkFHRVInLFxuICBCQVRDSF9NQU5BR0VSID0gJ0JBVENIIE1BTkFHRVInLFxuICBTQ0FOX01BTkFHRVIgPSAnU0NBTl9NQU5BR0VSJyxcbn1cbmV4cG9ydCBlbnVtIFRSQU5TRk9STV9UUkFOU0FDVElPTl9UWVBFIHtcbiAgVFJBTlNBQ1RJT05fV1JJVEUgPSAnVFJBTlNBQ1RJT05fV1JJVEUnLFxuICBUUkFOU0FDVElPTl9SRUFEID0gJ1RSQU5TQUNUSU9OX1JFQUQnLFxufVxuXG5leHBvcnQgZW51bSBUUkFOU0ZPUk1fU0NBTl9UWVBFIHtcbiAgU0NBTiA9ICdTQ0FOJyxcbiAgUEFSQUxMRUxfU0NBTiA9ICdQQVJBTExFTF9TQ0FOJyxcbn1cblxuZXhwb3J0IGVudW0gVFJBTlNGT1JNX0JBVENIX1RZUEUge1xuICBCQVRDSF9XUklURSA9ICdCQVRDSF9XUklURScsXG4gIEJBVENIX1JFQUQgPSAnQkFUQ0hfUkVBRCcsXG59XG5cbmV4cG9ydCBlbnVtIFNUQVRTX1RZUEUge1xuICBDT05TVU1FRF9DQVBBQ0lUWSA9ICdDT05TVU1FRF9DQVBBQ0lUWScsXG59XG5cbmV4cG9ydCBjbGFzcyBEZWJ1Z0xvZ2dlciB7XG4gIC8vIGxvZ1xuICBwcml2YXRlIGRlYnVnVHJhbnNmb3JtTG9nID0gZGVidWcoJ3R5cGVkb3JtOnRyYW5zZm9ybTpsb2cnKTtcbiAgLy8gYmF0Y2ggdHJhbnNmb3JtIGxvZ2dlclxuICBwcml2YXRlIGRlYnVnVHJhbnNmb3JtQmF0Y2hMb2cgPSBkZWJ1ZygndHlwZWRvcm06dHJhbnNmb3JtOmJhdGNoOmxvZycpO1xuICAvLyB0cmFuc2FjdGlvbiB0cmFuc2Zvcm0gbG9nZ2VyXG4gIHByaXZhdGUgZGVidWdUcmFuc2Zvcm1UcmFuc2FjdGlvbkxvZyA9IGRlYnVnKFxuICAgICd0eXBlZG9ybTp0cmFuc2Zvcm06dHJhbnNhY3Rpb246bG9nJ1xuICApO1xuICAvLyBzY2FuIHRyYW5zZm9ybSBsb2dnZXJcbiAgcHJpdmF0ZSBkZWJ1Z1RyYW5zZm9ybVNjYW5Mb2cgPSBkZWJ1ZygndHlwZWRvcm06dHJhbnNmb3JtOnNjYW46bG9nJyk7XG4gIC8vIGluZm8gbG9nZ2VyXG4gIHByaXZhdGUgZGVidWdJbmZvTG9nID0gZGVidWcoJ3R5cGVkb3JtOmluZm86bG9nJyk7XG4gIHByaXZhdGUgZGVidWdXYXJuTG9nID0gZGVidWcoJ3R5cGVkb3JtOndhcm46bG9nJyk7XG4gIHByaXZhdGUgZGVidWdFcnJvckxvZyA9IGRlYnVnKCd0eXBlZG9ybTplcnJvcjpsb2cnKTtcbiAgLy8gc3RhdHMgbG9nZ2VyXG4gIHByaXZhdGUgZGVidWdTdGF0c0xvZyA9IGRlYnVnKCd0eXBlZG9ybTpzdGF0czpsb2cnKTtcblxuICAvKipcbiAgICogR2V0IHVuaXF1ZSByZXF1ZXN0IGlkIGZvciBlYWNoIHJlcXVlc3QsIGFuZCBpbmNsdWRlIGl0IGluIGVhY2ggbG9nXG4gICAqIHRoaXMgYWxsb3dzIGZvciBlYXN5IGRlYnVnZ2luZ1xuICAgKiBAcmV0dXJucyB1bmlxdWUgcmVxdWVzdCB1dWlkXG4gICAqL1xuICBnZXRSZXF1ZXN0SWQoKSB7XG4gICAgcmV0dXJuIHY0KCk7XG4gIH1cblxuICBsb2dUcmFuc2Zvcm0oe1xuICAgIHJlcXVlc3RJZCxcbiAgICBvcGVyYXRpb24sXG4gICAgcHJlZml4LFxuICAgIGVudGl0eU5hbWUsXG4gICAgcHJpbWFyeUtleSxcbiAgICBib2R5LFxuICAgIG9wdGlvbnMsXG4gIH06IHtcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XG4gICAgb3BlcmF0aW9uOiBUUkFOU0ZPUk1fVFlQRTtcbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICBlbnRpdHlOYW1lOiBzdHJpbmc7XG4gICAgcHJpbWFyeUtleTogYW55O1xuICAgIGJvZHk/OiBhbnk7XG4gICAgb3B0aW9ucz86IGFueTtcbiAgfSkge1xuICAgIGlmICh0aGlzLmRlYnVnVHJhbnNmb3JtTG9nLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuZGVidWdUcmFuc2Zvcm1Mb2coXG4gICAgICAgIGAke2NoYWxrLmJvbGQuYmdDeWFuQnJpZ2h0KHJlcXVlc3RJZCl9ICR7Y2hhbGsuZ3JlZW4oXG4gICAgICAgICAgb3BlcmF0aW9uXG4gICAgICAgICl9ICR7Y2hhbGsuYmx1ZShlbnRpdHlOYW1lKX0gJHtjaGFsay5tYWdlbnRhKHByZWZpeCl9OmAsXG4gICAgICAgIC4uLihwcmltYXJ5S2V5XG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIGNoYWxrLmJsdWVCcmlnaHQoJ1xcblByaW1hcnkga2V5OiAnKSxcbiAgICAgICAgICAgICAgY2hhbGsud2hpdGUodGhpcy5lbnN1cmVQcmludGFibGUocHJpbWFyeUtleSkpLFxuICAgICAgICAgICAgXVxuICAgICAgICAgIDogW10pLFxuICAgICAgICAuLi4oYm9keVxuICAgICAgICAgID8gW1xuICAgICAgICAgICAgICBjaGFsay5ibHVlQnJpZ2h0KCdcXG5Cb2R5OiAnKSxcbiAgICAgICAgICAgICAgY2hhbGsud2hpdGUodGhpcy5lbnN1cmVQcmludGFibGUoYm9keSkpLFxuICAgICAgICAgICAgXVxuICAgICAgICAgIDogW10pLFxuICAgICAgICAuLi4ob3B0aW9uc1xuICAgICAgICAgID8gW1xuICAgICAgICAgICAgICBjaGFsay5ibHVlQnJpZ2h0KCdcXG5PcHRpb25zOiAnKSxcbiAgICAgICAgICAgICAgY2hhbGsud2hpdGUodGhpcy5lbnN1cmVQcmludGFibGUob3B0aW9ucykpLFxuICAgICAgICAgICAgXVxuICAgICAgICAgIDogW10pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGxvZ1RyYW5zZm9ybUJhdGNoKHtcbiAgICByZXF1ZXN0SWQsXG4gICAgb3BlcmF0aW9uLFxuICAgIHByZWZpeCxcbiAgICBib2R5LFxuICAgIG9wdGlvbnMsXG4gIH06IHtcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XG4gICAgb3BlcmF0aW9uOiBUUkFOU0ZPUk1fQkFUQ0hfVFlQRTtcbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICBib2R5PzogYW55O1xuICAgIG9wdGlvbnM/OiBhbnk7XG4gIH0pIHtcbiAgICBpZiAodGhpcy5kZWJ1Z1RyYW5zZm9ybUJhdGNoTG9nLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuZGVidWdUcmFuc2Zvcm1CYXRjaExvZyhcbiAgICAgICAgYCR7Y2hhbGsuYm9sZC5iZ0N5YW5CcmlnaHQocmVxdWVzdElkKX0gJHtjaGFsay5ncmVlbihcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgKX0gJHtjaGFsay5tYWdlbnRhKHByZWZpeCl9OmAsXG4gICAgICAgIC4uLihib2R5XG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIGNoYWxrLmJsdWVCcmlnaHQoJ1xcbkJvZHk6ICcpLFxuICAgICAgICAgICAgICBjaGFsay53aGl0ZSh0aGlzLmVuc3VyZVByaW50YWJsZShib2R5KSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbXSksXG4gICAgICAgIC4uLihvcHRpb25zXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIGNoYWxrLmJsdWVCcmlnaHQoJ1xcbk9wdGlvbnM6ICcpLFxuICAgICAgICAgICAgICBjaGFsay53aGl0ZSh0aGlzLmVuc3VyZVByaW50YWJsZShvcHRpb25zKSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbXSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbG9nVHJhbnNmb3JtVHJhbnNhY3Rpb24oe1xuICAgIHJlcXVlc3RJZCxcbiAgICBvcGVyYXRpb24sXG4gICAgcHJlZml4LFxuICAgIGJvZHksXG4gICAgb3B0aW9ucyxcbiAgfToge1xuICAgIHJlcXVlc3RJZD86IHN0cmluZztcbiAgICBvcGVyYXRpb246IFRSQU5TRk9STV9UUkFOU0FDVElPTl9UWVBFO1xuICAgIHByZWZpeDogc3RyaW5nO1xuICAgIGJvZHk/OiBhbnk7XG4gICAgb3B0aW9ucz86IGFueTtcbiAgfSkge1xuICAgIGlmICh0aGlzLmRlYnVnVHJhbnNmb3JtVHJhbnNhY3Rpb25Mb2cuZW5hYmxlZCkge1xuICAgICAgdGhpcy5kZWJ1Z1RyYW5zZm9ybVRyYW5zYWN0aW9uTG9nKFxuICAgICAgICBgJHtjaGFsay5ib2xkLmJnQ3lhbkJyaWdodChyZXF1ZXN0SWQpfSAke2NoYWxrLmdyZWVuKFxuICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICApfSAke2NoYWxrLm1hZ2VudGEocHJlZml4KX06YCxcbiAgICAgICAgLi4uKGJvZHlcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgY2hhbGsuYmx1ZUJyaWdodCgnXFxuQm9keTogJyksXG4gICAgICAgICAgICAgIGNoYWxrLndoaXRlKHRoaXMuZW5zdXJlUHJpbnRhYmxlKGJvZHkpKSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICA6IFtdKSxcbiAgICAgICAgLi4uKG9wdGlvbnNcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgY2hhbGsuYmx1ZUJyaWdodCgnXFxuT3B0aW9uczogJyksXG4gICAgICAgICAgICAgIGNoYWxrLndoaXRlKHRoaXMuZW5zdXJlUHJpbnRhYmxlKG9wdGlvbnMpKSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICA6IFtdKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBsb2dUcmFuc2Zvcm1TY2FuKHtcbiAgICByZXF1ZXN0SWQsXG4gICAgcHJlZml4LFxuICAgIG9wZXJhdGlvbixcbiAgICBib2R5LFxuICAgIG9wdGlvbnMsXG4gIH06IHtcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XG4gICAgb3BlcmF0aW9uOiBUUkFOU0ZPUk1fU0NBTl9UWVBFO1xuICAgIHByZWZpeDogc3RyaW5nO1xuICAgIGJvZHk/OiBhbnk7XG4gICAgb3B0aW9ucz86IGFueTtcbiAgfSkge1xuICAgIGlmICh0aGlzLmRlYnVnVHJhbnNmb3JtU2NhbkxvZy5lbmFibGVkKSB7XG4gICAgICB0aGlzLmRlYnVnVHJhbnNmb3JtU2NhbkxvZyhcbiAgICAgICAgYCR7Y2hhbGsuYm9sZC5iZ0N5YW5CcmlnaHQocmVxdWVzdElkKX0gJHtjaGFsay5ncmVlbihcbiAgICAgICAgICBvcGVyYXRpb25cbiAgICAgICAgKX0gJHtjaGFsay5tYWdlbnRhKHByZWZpeCl9OmAsXG4gICAgICAgIC4uLihib2R5XG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIGNoYWxrLmJsdWVCcmlnaHQoJ1xcbkJvZHk6ICcpLFxuICAgICAgICAgICAgICBjaGFsay53aGl0ZSh0aGlzLmVuc3VyZVByaW50YWJsZShib2R5KSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbXSksXG4gICAgICAgIC4uLihvcHRpb25zXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIGNoYWxrLmJsdWVCcmlnaHQoJ1xcbk9wdGlvbnM6ICcpLFxuICAgICAgICAgICAgICBjaGFsay53aGl0ZSh0aGlzLmVuc3VyZVByaW50YWJsZShvcHRpb25zKSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbXSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbG9nU3RhdHMoe1xuICAgIHJlcXVlc3RJZCxcbiAgICByZXF1ZXN0U2VnbWVudCxcbiAgICBzY29wZSxcbiAgICBzdGF0c1R5cGUsXG4gICAgY29uc3VtZWRDYXBhY2l0eURhdGEsXG4gIH06IHtcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XG4gICAgcmVxdWVzdFNlZ21lbnQ/OiBudW1iZXI7IC8vIGlmIGZvciBhbnkgcmVhc29uLCByZXF1ZXN0IHdhcyBzZWdtZW50ZWQgaW50byBtdWx0aXBsZSByZXF1ZXN0LCB0aGlzIGluZGljYXRlcyBzZWdtZW50IGluZGV4XG4gICAgc2NvcGU6IE1BTkFHRVJfTkFNRTtcbiAgICBzdGF0c1R5cGU6IFNUQVRTX1RZUEU7XG4gICAgY29uc3VtZWRDYXBhY2l0eURhdGE6IGFueTtcbiAgfSkge1xuICAgIGlmICh0aGlzLmRlYnVnU3RhdHNMb2cuZW5hYmxlZCkge1xuICAgICAgdGhpcy5kZWJ1Z1N0YXRzTG9nKFxuICAgICAgICBgJHtcbiAgICAgICAgICBjaGFsay5ib2xkLmJnQ3lhbkJyaWdodChyZXF1ZXN0SWQpICtcbiAgICAgICAgICAocmVxdWVzdFNlZ21lbnQgPyAnOicgKyBjaGFsay5ib2xkLmJnQ3lhbkJyaWdodChyZXF1ZXN0SWQpIDogJycpXG4gICAgICAgIH0gJHtjaGFsay5ncmVlbihzY29wZSl9ICR7Y2hhbGsubWFnZW50YShzdGF0c1R5cGUpfTpgLFxuICAgICAgICBjaGFsay53aGl0ZSh0aGlzLmVuc3VyZVByaW50YWJsZShjb25zdW1lZENhcGFjaXR5RGF0YSkpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGxvZ0luZm8oe1xuICAgIHJlcXVlc3RJZCxcbiAgICBzY29wZSxcbiAgICBsb2csXG4gIH06IHtcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XG4gICAgc2NvcGU6IE1BTkFHRVJfTkFNRTtcbiAgICBsb2c6IHN0cmluZztcbiAgfSkge1xuICAgIGlmICh0aGlzLmRlYnVnSW5mb0xvZy5lbmFibGVkKSB7XG4gICAgICB0aGlzLmRlYnVnSW5mb0xvZyhcbiAgICAgICAgYCR7Y2hhbGsuYm9sZC5iZ0N5YW5CcmlnaHQocmVxdWVzdElkKX0gJHtjaGFsay5ncmVlbihzY29wZSl9OmAsXG4gICAgICAgIGNoYWxrLndoaXRlKHRoaXMuZW5zdXJlUHJpbnRhYmxlKGxvZykpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGxvZ1dhcm4oe1xuICAgIHJlcXVlc3RJZCxcbiAgICBzY29wZSxcbiAgICBsb2csXG4gIH06IHtcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XG4gICAgc2NvcGU6IE1BTkFHRVJfTkFNRTtcbiAgICBsb2c6IHN0cmluZztcbiAgfSkge1xuICAgIGlmICh0aGlzLmRlYnVnV2FybkxvZy5lbmFibGVkKSB7XG4gICAgICB0aGlzLmRlYnVnV2FybkxvZyhcbiAgICAgICAgYCR7Y2hhbGsuYm9sZC5iZ0N5YW5CcmlnaHQocmVxdWVzdElkKX0gJHtjaGFsay5ncmVlbihzY29wZSl9OmAsXG4gICAgICAgIGNoYWxrLnllbGxvdyh0aGlzLmVuc3VyZVByaW50YWJsZShsb2cpKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBsb2dFcnJvcih7XG4gICAgcmVxdWVzdElkLFxuICAgIHNjb3BlLFxuICAgIGxvZyxcbiAgfToge1xuICAgIHJlcXVlc3RJZD86IHN0cmluZztcbiAgICBzY29wZTogTUFOQUdFUl9OQU1FO1xuICAgIGxvZzogYW55O1xuICB9KSB7XG4gICAgaWYgKHRoaXMuZGVidWdFcnJvckxvZy5lbmFibGVkKSB7XG4gICAgICB0aGlzLmRlYnVnRXJyb3JMb2coXG4gICAgICAgIGAke2NoYWxrLmJvbGQuYmdDeWFuQnJpZ2h0KHJlcXVlc3RJZCl9ICR7Y2hhbGsuZ3JlZW4oc2NvcGUpfTpgLFxuICAgICAgICBjaGFsay5yZWQodGhpcy5lbnN1cmVQcmludGFibGUobG9nKSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBlbnN1cmVQcmludGFibGUobG9nOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIGxvZyA9PT0gJ29iamVjdCcgJiYgbG9nICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYFxcbiR7SlNPTi5zdHJpbmdpZnkobG9nLCBudWxsLCAyKX1cXG5gO1xuICAgIH0gZWxzZSByZXR1cm4gbG9nO1xuICB9XG59XG4iXX0=