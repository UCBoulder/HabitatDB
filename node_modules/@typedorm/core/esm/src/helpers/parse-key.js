import { SparseIndexParseError } from '@typedorm/common';
import { isKeyOfTypeAliasSchema } from './is-key-of-type-alias-schema';
const regexExp = {
    interpolation: /\{{.+?\}}/g,
    interpolatedWord: /\{{(.+?)\}}/,
};
export function parseKey(key, dict, { isSparseIndex } = { isSparseIndex: false }) {
    if (isKeyOfTypeAliasSchema(key)) {
        const aliasAttr = key.alias;
        const aliasValue = dict[aliasAttr];
        if (aliasValue) {
            return aliasValue;
        }
        if (!aliasValue) {
            const error = new Error(`"attribute alias ${key} was found but it's value could not be resolved.`);
            if (isSparseIndex) {
                throw new SparseIndexParseError(aliasAttr);
            }
            throw error;
        }
        return aliasValue;
    }
    else {
        return key.replace(regexExp.interpolation, substr => {
            const match = regexExp.interpolatedWord.exec(substr);
            let variable;
            if (match) {
                variable = match[1];
            }
            if (!match || !variable) {
                throw new Error(`Failed to parse expression: "${key}", could not find a variable inside "${substr}"`);
            }
            const valueToReplace = dict[variable];
            if (valueToReplace === undefined || valueToReplace === null) {
                const error = new Error(`"${variable}" was referenced in ${key} but it's value could not be resolved.`);
                // this is what tells transformer to ignore including parsed values
                if (isSparseIndex) {
                    throw new SparseIndexParseError(key);
                }
                throw error;
            }
            return valueToReplace.toString();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2Uta2V5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaGVscGVycy9wYXJzZS1rZXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFzQixxQkFBcUIsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzVFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBRXJFLE1BQU0sUUFBUSxHQUFHO0lBQ2YsYUFBYSxFQUFFLFlBQVk7SUFDM0IsZ0JBQWdCLEVBQUUsYUFBYTtDQUNoQyxDQUFDO0FBRUYsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsR0FBNkIsRUFDN0IsSUFBWSxFQUNaLEVBQUMsYUFBYSxLQUE4QixFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUM7SUFFbEUsSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMvQixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsS0FBZSxDQUFDO1FBQ3RDLE1BQU0sVUFBVSxHQUFJLElBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sVUFBVSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUNyQixvQkFBb0IsR0FBRyxrREFBa0QsQ0FDMUUsQ0FBQztZQUVGLElBQUksYUFBYSxFQUFFO2dCQUNqQixNQUFNLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDNUM7WUFDRCxNQUFNLEtBQUssQ0FBQztTQUNiO1FBQ0QsT0FBTyxVQUFVLENBQUM7S0FDbkI7U0FBTTtRQUNMLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ2xELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckQsSUFBSSxRQUFhLENBQUM7WUFDbEIsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtZQUNELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0NBQWdDLEdBQUcsd0NBQXdDLE1BQU0sR0FBRyxDQUNyRixDQUFDO2FBQ0g7WUFFRCxNQUFNLGNBQWMsR0FBSSxJQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFL0MsSUFBSSxjQUFjLEtBQUssU0FBUyxJQUFJLGNBQWMsS0FBSyxJQUFJLEVBQUU7Z0JBQzNELE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUNyQixJQUFJLFFBQVEsdUJBQXVCLEdBQUcsd0NBQXdDLENBQy9FLENBQUM7Z0JBRUYsbUVBQW1FO2dCQUNuRSxJQUFJLGFBQWEsRUFBRTtvQkFDakIsTUFBTSxJQUFJLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN0QztnQkFDRCxNQUFNLEtBQUssQ0FBQzthQUNiO1lBRUQsT0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7S0FDSjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VudGl0eUFsaWFzT3JTdHJpbmcsIFNwYXJzZUluZGV4UGFyc2VFcnJvcn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge2lzS2V5T2ZUeXBlQWxpYXNTY2hlbWF9IGZyb20gJy4vaXMta2V5LW9mLXR5cGUtYWxpYXMtc2NoZW1hJztcblxuY29uc3QgcmVnZXhFeHAgPSB7XG4gIGludGVycG9sYXRpb246IC9cXHt7Lis/XFx9fS9nLFxuICBpbnRlcnBvbGF0ZWRXb3JkOiAvXFx7eyguKz8pXFx9fS8sXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VLZXk8RW50aXR5PihcbiAga2V5OiBFbnRpdHlBbGlhc09yU3RyaW5nPGFueT4sXG4gIGRpY3Q6IEVudGl0eSxcbiAge2lzU3BhcnNlSW5kZXh9OiB7aXNTcGFyc2VJbmRleDogYm9vbGVhbn0gPSB7aXNTcGFyc2VJbmRleDogZmFsc2V9XG4pIHtcbiAgaWYgKGlzS2V5T2ZUeXBlQWxpYXNTY2hlbWEoa2V5KSkge1xuICAgIGNvbnN0IGFsaWFzQXR0ciA9IGtleS5hbGlhcyBhcyBzdHJpbmc7XG4gICAgY29uc3QgYWxpYXNWYWx1ZSA9IChkaWN0IGFzIGFueSlbYWxpYXNBdHRyXTtcbiAgICBpZiAoYWxpYXNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGFsaWFzVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKCFhbGlhc1ZhbHVlKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgYFwiYXR0cmlidXRlIGFsaWFzICR7a2V5fSB3YXMgZm91bmQgYnV0IGl0J3MgdmFsdWUgY291bGQgbm90IGJlIHJlc29sdmVkLmBcbiAgICAgICk7XG5cbiAgICAgIGlmIChpc1NwYXJzZUluZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBTcGFyc2VJbmRleFBhcnNlRXJyb3IoYWxpYXNBdHRyKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gYWxpYXNWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ga2V5LnJlcGxhY2UocmVnZXhFeHAuaW50ZXJwb2xhdGlvbiwgc3Vic3RyID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoID0gcmVnZXhFeHAuaW50ZXJwb2xhdGVkV29yZC5leGVjKHN1YnN0cik7XG4gICAgICBsZXQgdmFyaWFibGU6IGFueTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICB2YXJpYWJsZSA9IG1hdGNoWzFdO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXRjaCB8fCAhdmFyaWFibGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gcGFyc2UgZXhwcmVzc2lvbjogXCIke2tleX1cIiwgY291bGQgbm90IGZpbmQgYSB2YXJpYWJsZSBpbnNpZGUgXCIke3N1YnN0cn1cImBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsdWVUb1JlcGxhY2UgPSAoZGljdCBhcyBhbnkpW3ZhcmlhYmxlXTtcblxuICAgICAgaWYgKHZhbHVlVG9SZXBsYWNlID09PSB1bmRlZmluZWQgfHwgdmFsdWVUb1JlcGxhY2UgPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgYFwiJHt2YXJpYWJsZX1cIiB3YXMgcmVmZXJlbmNlZCBpbiAke2tleX0gYnV0IGl0J3MgdmFsdWUgY291bGQgbm90IGJlIHJlc29sdmVkLmBcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB0aGlzIGlzIHdoYXQgdGVsbHMgdHJhbnNmb3JtZXIgdG8gaWdub3JlIGluY2x1ZGluZyBwYXJzZWQgdmFsdWVzXG4gICAgICAgIGlmIChpc1NwYXJzZUluZGV4KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFNwYXJzZUluZGV4UGFyc2VFcnJvcihrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVUb1JlcGxhY2UudG9TdHJpbmcoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19