import { Transaction } from './transaction';
export class WriteTransaction extends Transaction {
    constructor(
    /** only here for backwards compatibility
     * @deprecated
     * `WriteTransaction` does no longer need the connection object defined
     * at this level, it is now auto inferred by transaction transformer
     */
    connection, 
    /**
     * only here for backwards compatibility
     * @deprecated use `.add` for appending bulk items
     */
    transactionItems) {
        super();
        if (transactionItems && transactionItems.length) {
            throw new Error(`From 1.12.x, appending existing operation to 'WriteTransaction' is not supported. 
        Please use '.add' for appending bulk items.`);
        }
    }
    /**
     * @deprecated use operation specific method or `.add` instead
     */
    chian(chainedItem) {
        return this.add([chainedItem]);
    }
    add(transactionItems) {
        this.items.push(...transactionItems);
        return this;
    }
    addCreateItem(item, options) {
        this.items.push({
            create: {
                item,
                options: options,
            },
        });
        return this;
    }
    addUpdateItem(item, primaryKey, body, options) {
        this.items.push({
            update: {
                item,
                primaryKey,
                body,
                options: options,
            },
        });
        return this;
    }
    addDeleteItem(item, primaryKey, options) {
        this.items.push({
            delete: {
                item,
                primaryKey,
                options: options,
            },
        });
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGUtdHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jbGFzc2VzL3RyYW5zYWN0aW9uL3dyaXRlLXRyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUEyRDFDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUVyQztJQUNDO0lBQ0U7Ozs7T0FJRztJQUNILFVBQXVCO0lBQ3ZCOzs7T0FHRztJQUNILGdCQUF3RDtRQUV4RCxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ2I7b0RBQzRDLENBQzdDLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FDSCxXQUEyRTtRQUUzRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFrRCxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsR0FBRyxDQUFDLGdCQUF1RDtRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYSxDQUNYLElBQVksRUFDWixPQUErQztRQUUvQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNkLE1BQU0sRUFBRTtnQkFDTixJQUFJO2dCQUNKLE9BQU8sRUFBRSxPQUE2QzthQUN2RDtTQUNGLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FLWCxJQUEwQixFQUMxQixVQUFzQixFQUN0QixJQUE4QyxFQUM5QyxPQUErQztRQUUvQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNkLE1BQU0sRUFBRTtnQkFDTixJQUFJO2dCQUNKLFVBQVU7Z0JBQ1YsSUFBSTtnQkFDSixPQUFPLEVBQUUsT0FBNkM7YUFDdkQ7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxhQUFhLENBQ1gsSUFBMEIsRUFDMUIsVUFBc0IsRUFDdEIsT0FBK0M7UUFFL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDZCxNQUFNLEVBQUU7Z0JBQ04sSUFBSTtnQkFDSixVQUFVO2dCQUNWLE9BQU8sRUFBRSxPQUE2QzthQUN2RDtTQUNGLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbnRpdHlUYXJnZXR9IGZyb20gJ0B0eXBlZG9ybS9jb21tb24nO1xuaW1wb3J0IHtDb25uZWN0aW9ufSBmcm9tICcuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IHtDb25kaXRpb25PcHRpb25zfSBmcm9tICcuLi9leHByZXNzaW9uL2NvbmRpdGlvbi1vcHRpb25zLXR5cGUnO1xuaW1wb3J0IHtVcGRhdGVCb2R5fSBmcm9tICcuLi9leHByZXNzaW9uL3VwZGF0ZS1ib2R5LXR5cGUnO1xuaW1wb3J0IHtUcmFuc2FjdGlvbn0gZnJvbSAnLi90cmFuc2FjdGlvbic7XG5cbmludGVyZmFjZSBXcml0ZVRyYW5zYWN0aW9uQ3JlYXRlT3B0aW9uczxFbnRpdHk+IHtcbiAgLyoqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBvdmVyd3JpdGVJZkV4aXN0cz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgY29uZGl0aW9uIHRvIGFwcGx5XG4gICAqL1xuICB3aGVyZT86IENvbmRpdGlvbk9wdGlvbnM8RW50aXR5Pjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgV3JpdGVUcmFuc2FjdGlvbkNyZWF0ZTxFbnRpdHk+IHtcbiAgY3JlYXRlOiB7aXRlbTogRW50aXR5OyBvcHRpb25zPzogV3JpdGVUcmFuc2FjdGlvbkNyZWF0ZU9wdGlvbnM8RW50aXR5Pn07XG59XG5cbmludGVyZmFjZSBXcml0ZVRyYW5zYWN0aW9uVXBkYXRlT3B0aW9uczxFbnRpdHk+IHtcbiAgLyoqXG4gICAqIEBkZWZhdWx0ICcuJ1xuICAgKi9cbiAgbmVzdGVkS2V5U2VwYXJhdG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGNvbmRpdGlvbiB0byBhcHBseVxuICAgKi9cbiAgd2hlcmU/OiBDb25kaXRpb25PcHRpb25zPEVudGl0eT47XG59XG5leHBvcnQgaW50ZXJmYWNlIFdyaXRlVHJhbnNhY3Rpb25VcGRhdGU8XG4gIEVudGl0eSxcbiAgUHJpbWFyeUtleSA9IFBhcnRpYWw8RW50aXR5PixcbiAgQWRkaXRpb25hbFByb3BlcnRpZXMgPSBFbnRpdHlcbj4ge1xuICB1cGRhdGU6IHtcbiAgICBpdGVtOiBFbnRpdHlUYXJnZXQ8RW50aXR5PjtcbiAgICBwcmltYXJ5S2V5OiBQcmltYXJ5S2V5O1xuICAgIGJvZHk6IFVwZGF0ZUJvZHk8RW50aXR5LCBBZGRpdGlvbmFsUHJvcGVydGllcz47XG4gICAgb3B0aW9ucz86IFdyaXRlVHJhbnNhY3Rpb25VcGRhdGVPcHRpb25zPEVudGl0eT47XG4gIH07XG59XG5cbmludGVyZmFjZSBXcml0ZVRyYW5zYWN0aW9uRGVsZXRlT3B0aW9uczxFbnRpdHk+IHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgY29uZGl0aW9uIHRvIGFwcGx5XG4gICAqL1xuICB3aGVyZT86IENvbmRpdGlvbk9wdGlvbnM8RW50aXR5Pjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgV3JpdGVUcmFuc2FjdGlvbkRlbGV0ZTxFbnRpdHksIFByaW1hcnlLZXk+IHtcbiAgZGVsZXRlOiB7XG4gICAgaXRlbTogRW50aXR5VGFyZ2V0PEVudGl0eT47XG4gICAgcHJpbWFyeUtleTogUHJpbWFyeUtleTtcbiAgICBvcHRpb25zPzogV3JpdGVUcmFuc2FjdGlvbkRlbGV0ZU9wdGlvbnM8RW50aXR5PjtcbiAgfTtcbn1cbmV4cG9ydCB0eXBlIFdyaXRlVHJhbnNhY3Rpb25JdGVtPEVudGl0eSwgUHJpbWFyeUtleSwgQWRkaXRpb25hbFByb3BlcnRpZXM+ID1cbiAgfCBXcml0ZVRyYW5zYWN0aW9uQ3JlYXRlPEVudGl0eT5cbiAgfCBXcml0ZVRyYW5zYWN0aW9uVXBkYXRlPEVudGl0eSwgUHJpbWFyeUtleSwgQWRkaXRpb25hbFByb3BlcnRpZXM+XG4gIHwgV3JpdGVUcmFuc2FjdGlvbkRlbGV0ZTxFbnRpdHksIFByaW1hcnlLZXk+O1xuXG5leHBvcnQgY2xhc3MgV3JpdGVUcmFuc2FjdGlvbiBleHRlbmRzIFRyYW5zYWN0aW9uPFxuICBXcml0ZVRyYW5zYWN0aW9uSXRlbTxhbnksIGFueSwgYW55PlxuPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBvbmx5IGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBgV3JpdGVUcmFuc2FjdGlvbmAgZG9lcyBubyBsb25nZXIgbmVlZCB0aGUgY29ubmVjdGlvbiBvYmplY3QgZGVmaW5lZFxuICAgICAqIGF0IHRoaXMgbGV2ZWwsIGl0IGlzIG5vdyBhdXRvIGluZmVycmVkIGJ5IHRyYW5zYWN0aW9uIHRyYW5zZm9ybWVyXG4gICAgICovXG4gICAgY29ubmVjdGlvbj86IENvbm5lY3Rpb24sXG4gICAgLyoqXG4gICAgICogb25seSBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgLmFkZGAgZm9yIGFwcGVuZGluZyBidWxrIGl0ZW1zXG4gICAgICovXG4gICAgdHJhbnNhY3Rpb25JdGVtcz86IFdyaXRlVHJhbnNhY3Rpb25JdGVtPGFueSwgYW55LCBhbnk+W11cbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICh0cmFuc2FjdGlvbkl0ZW1zICYmIHRyYW5zYWN0aW9uSXRlbXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGcm9tIDEuMTIueCwgYXBwZW5kaW5nIGV4aXN0aW5nIG9wZXJhdGlvbiB0byAnV3JpdGVUcmFuc2FjdGlvbicgaXMgbm90IHN1cHBvcnRlZC4gXG4gICAgICAgIFBsZWFzZSB1c2UgJy5hZGQnIGZvciBhcHBlbmRpbmcgYnVsayBpdGVtcy5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2Ugb3BlcmF0aW9uIHNwZWNpZmljIG1ldGhvZCBvciBgLmFkZGAgaW5zdGVhZFxuICAgKi9cbiAgY2hpYW48RW50aXR5LCBQcmltYXJ5S2V5LCBBZGRpdGlvbmFsUHJvcGVydGllcyA9IHt9PihcbiAgICBjaGFpbmVkSXRlbTogV3JpdGVUcmFuc2FjdGlvbkl0ZW08RW50aXR5LCBQcmltYXJ5S2V5LCBBZGRpdGlvbmFsUHJvcGVydGllcz5cbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXMuYWRkKFtjaGFpbmVkSXRlbSBhcyBXcml0ZVRyYW5zYWN0aW9uSXRlbTxhbnksIGFueSwgYW55Pl0pO1xuICB9XG5cbiAgYWRkKHRyYW5zYWN0aW9uSXRlbXM6IFdyaXRlVHJhbnNhY3Rpb25JdGVtPGFueSwgYW55LCBhbnk+W10pOiB0aGlzIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goLi4udHJhbnNhY3Rpb25JdGVtcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRDcmVhdGVJdGVtPEVudGl0eT4oXG4gICAgaXRlbTogRW50aXR5LFxuICAgIG9wdGlvbnM/OiBXcml0ZVRyYW5zYWN0aW9uQ3JlYXRlT3B0aW9uczxFbnRpdHk+XG4gICk6IHRoaXMge1xuICAgIHRoaXMuaXRlbXMucHVzaCh7XG4gICAgICBjcmVhdGU6IHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyBhcyBXcml0ZVRyYW5zYWN0aW9uQ3JlYXRlT3B0aW9uczxhbnk+LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFVwZGF0ZUl0ZW08XG4gICAgRW50aXR5LFxuICAgIFByaW1hcnlLZXkgPSBQYXJ0aWFsPEVudGl0eT4sXG4gICAgQWRkaXRpb25hbFByb3BlcnRpZXMgPSBFbnRpdHlcbiAgPihcbiAgICBpdGVtOiBFbnRpdHlUYXJnZXQ8RW50aXR5PixcbiAgICBwcmltYXJ5S2V5OiBQcmltYXJ5S2V5LFxuICAgIGJvZHk6IFVwZGF0ZUJvZHk8RW50aXR5LCBBZGRpdGlvbmFsUHJvcGVydGllcz4sXG4gICAgb3B0aW9ucz86IFdyaXRlVHJhbnNhY3Rpb25VcGRhdGVPcHRpb25zPEVudGl0eT5cbiAgKTogdGhpcyB7XG4gICAgdGhpcy5pdGVtcy5wdXNoKHtcbiAgICAgIHVwZGF0ZToge1xuICAgICAgICBpdGVtLFxuICAgICAgICBwcmltYXJ5S2V5LFxuICAgICAgICBib2R5LFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zIGFzIFdyaXRlVHJhbnNhY3Rpb25VcGRhdGVPcHRpb25zPGFueT4sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkRGVsZXRlSXRlbTxFbnRpdHksIFByaW1hcnlLZXkgPSBQYXJ0aWFsPEVudGl0eT4+KFxuICAgIGl0ZW06IEVudGl0eVRhcmdldDxFbnRpdHk+LFxuICAgIHByaW1hcnlLZXk6IFByaW1hcnlLZXksXG4gICAgb3B0aW9ucz86IFdyaXRlVHJhbnNhY3Rpb25EZWxldGVPcHRpb25zPEVudGl0eT5cbiAgKTogdGhpcyB7XG4gICAgdGhpcy5pdGVtcy5wdXNoKHtcbiAgICAgIGRlbGV0ZToge1xuICAgICAgICBpdGVtLFxuICAgICAgICBwcmltYXJ5S2V5LFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zIGFzIFdyaXRlVHJhbnNhY3Rpb25EZWxldGVPcHRpb25zPGFueT4sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=