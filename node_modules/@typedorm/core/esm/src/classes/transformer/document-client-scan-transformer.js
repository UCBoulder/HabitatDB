import { INTERNAL_ENTITY_ATTRIBUTE, InvalidFilterInputError, InvalidSelectInputError, NoSuchEntityExistsError, NoSuchIndexFoundError, QUERY_SELECT_TYPE, TRANSFORM_SCAN_TYPE, } from '@typedorm/common';
import { isEmptyObject } from '../../helpers/is-empty-object';
import { MERGE_STRATEGY } from '../expression/base-expression-input';
import { Filter } from '../expression/filter';
import { LowOrderTransformers } from './low-order-transformers';
export class DocumentClientScanTransformer extends LowOrderTransformers {
    constructor(connection) {
        super(connection);
    }
    /**
     * Transforms TypeDORM input into dynamo scan operation input
     */
    toDynamoScanItem(scanOptions, metadataOptions) {
        this.connection.logger.logTransformScan({
            requestId: metadataOptions?.requestId,
            operation: TRANSFORM_SCAN_TYPE.SCAN,
            prefix: 'Before',
            options: scanOptions,
        });
        const tableToScan = scanOptions?.entity
            ? this.connection.getEntityByTarget(scanOptions?.entity)?.table
            : this.connection.table;
        let verifiedIndexToScan;
        // validate if index requested to scan belongs to current resolved table
        if (scanOptions?.scanIndex) {
            const scanIndexOptions = tableToScan.getIndexByKey(scanOptions?.scanIndex);
            if (!scanIndexOptions) {
                throw new NoSuchIndexFoundError(tableToScan.name, scanOptions?.scanIndex);
            }
        }
        let transformedScanInput = {
            TableName: tableToScan.name,
            IndexName: verifiedIndexToScan,
            ReturnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
        };
        // transform additional options
        if (scanOptions && !isEmptyObject(scanOptions)) {
            const { cursor, limit, where, onlyCount, select, entity } = scanOptions;
            transformedScanInput.Limit = limit;
            transformedScanInput.ExclusiveStartKey = cursor;
            // check if only the count was requested
            if (onlyCount) {
                if (select?.length) {
                    throw new Error('Attributes projection and count can not be used together');
                }
                // count and projection selection can not be used together
                transformedScanInput.Select = QUERY_SELECT_TYPE.COUNT;
            }
            // entity filter
            let entityFilter = undefined;
            if (entity) {
                const metadata = this.connection.getEntityByTarget(entity);
                if (!metadata) {
                    throw new NoSuchEntityExistsError(entity.name);
                }
                // build current entity filter
                entityFilter = this.expressionInputParser.parseToFilter({
                    [INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME]: {
                        EQ: metadata.name,
                    },
                });
            }
            // build filter expression
            let optionsFilter = undefined;
            if (where && !isEmptyObject(where)) {
                const inputFilter = this.expressionInputParser.parseToFilter(where);
                if (!inputFilter) {
                    throw new InvalidFilterInputError(where);
                }
                optionsFilter = inputFilter;
            }
            // merge filters of fall back to none
            let filter;
            if (entityFilter && optionsFilter) {
                filter = new Filter().mergeMany([entityFilter, optionsFilter], MERGE_STRATEGY.AND);
            }
            else {
                filter = entityFilter || optionsFilter || null; // if non of the condition skip it all together
            }
            // if at least one condition was truthy, parse it and include it in the input
            if (filter) {
                const { FilterExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildFilterExpression(filter);
                transformedScanInput = {
                    ...transformedScanInput,
                    FilterExpression,
                    ExpressionAttributeNames: {
                        ...transformedScanInput.ExpressionAttributeNames,
                        ...ExpressionAttributeNames,
                    },
                    ExpressionAttributeValues: {
                        ...transformedScanInput.ExpressionAttributeValues,
                        ...ExpressionAttributeValues,
                    },
                };
            }
            // projection builder
            if (select?.length) {
                const projection = this.expressionInputParser.parseToProjection(select);
                if (!projection) {
                    throw new InvalidSelectInputError(select);
                }
                const { ProjectionExpression, ExpressionAttributeNames } = this.expressionBuilder.buildProjectionExpression(projection);
                transformedScanInput = {
                    ...transformedScanInput,
                    ProjectionExpression,
                    ExpressionAttributeNames: {
                        ...transformedScanInput.ExpressionAttributeNames,
                        ...ExpressionAttributeNames,
                    },
                };
            }
        }
        // validate value for segment and totalSegment before appending
        if (scanOptions?.totalSegments !== undefined &&
            scanOptions?.totalSegments !== null) {
            if (scanOptions?.totalSegments === 0) {
                throw new Error(`Invalid scan option totalSegment: ${scanOptions?.totalSegments}.
        totalSegments is optional, but when provided it's value must be greater than 0.`);
            }
            if (scanOptions?.segment === undefined || scanOptions?.segment === null) {
                throw new Error(`Invalid scan option segment: ${scanOptions?.segment}.
        When totalSegments value is defined, value for option 'segment' must also be defined.`);
            }
            if (scanOptions?.segment >= scanOptions?.totalSegments) {
                throw new Error(`Invalid scan option segment: ${scanOptions?.segment}.
        When totalSegments value is defined, value for option 'segment' must be one less than totalSegment size.`);
            }
            transformedScanInput.TotalSegments = scanOptions?.totalSegments;
            transformedScanInput.Segment = scanOptions?.segment;
        }
        this.connection.logger.logTransformScan({
            requestId: metadataOptions?.requestId,
            prefix: 'After',
            operation: TRANSFORM_SCAN_TYPE.SCAN,
            body: transformedScanInput,
        });
        return transformedScanInput;
    }
    /**
     * Transforms DynamoDB scan output into entities
     */
    fromDynamoScanResponseItemList(itemList, metadataOptions) {
        const initialResponse = {
            items: [],
            unknownItems: [],
        };
        if (!itemList.length) {
            return initialResponse;
        }
        return itemList.reduce((acc, responseItem) => {
            const entityPhysicalName = responseItem[INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME];
            // early return if no entity metadata was found on item
            if (!entityPhysicalName) {
                acc.unknownItems.push(responseItem);
                return acc;
            }
            const entityMetadata = this.connection.getEntityByPhysicalName(entityPhysicalName);
            const reverseTransformedItem = this.fromDynamoEntity(entityMetadata.target, responseItem, metadataOptions);
            acc.items.push(reverseTransformedItem);
            return acc;
        }, initialResponse);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtY2xpZW50LXNjYW4tdHJhbnNmb3JtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jbGFzc2VzL3RyYW5zZm9ybWVyL2RvY3VtZW50LWNsaWVudC1zY2FuLXRyYW5zZm9ybWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCx5QkFBeUIsRUFDekIsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2Qix1QkFBdUIsRUFDdkIscUJBQXFCLEVBQ3JCLGlCQUFpQixFQUNqQixtQkFBbUIsR0FDcEIsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFFNUQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUU1QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQWM5RCxNQUFNLE9BQU8sNkJBQThCLFNBQVEsb0JBQW9CO0lBQ3JFLFlBQVksVUFBc0I7UUFDaEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7T0FFRztJQUNILGdCQUFnQixDQUNkLFdBQWdELEVBQ2hELGVBQWlDO1FBRWpDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQ3RDLFNBQVMsRUFBRSxlQUFlLEVBQUUsU0FBUztZQUNyQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsSUFBSTtZQUNuQyxNQUFNLEVBQUUsUUFBUTtZQUNoQixPQUFPLEVBQUUsV0FBVztTQUNyQixDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxXQUFXLEVBQUUsTUFBTTtZQUNyQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FB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WSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXRELHVEQUF1RDtZQUN2RCxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3ZCLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLEdBQUcsQ0FBQzthQUNaO1lBRUQsTUFBTSxjQUFjLEdBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUU5RCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FDbEQsY0FBYyxDQUFDLE1BQU0sRUFDckIsWUFBWSxFQUNaLGVBQWUsQ0FDaEIsQ0FBQztZQUVGLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFFdkMsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEb2N1bWVudENsaWVudFR5cGVzfSBmcm9tICdAdHlwZWRvcm0vZG9jdW1lbnQtY2xpZW50JztcbmltcG9ydCB7XG4gIEVudGl0eVRhcmdldCxcbiAgSU5URVJOQUxfRU5USVRZX0FUVFJJQlVURSxcbiAgSW52YWxpZEZpbHRlcklucHV0RXJyb3IsXG4gIEludmFsaWRTZWxlY3RJbnB1dEVycm9yLFxuICBOb1N1Y2hFbnRpdHlFeGlzdHNFcnJvcixcbiAgTm9TdWNoSW5kZXhGb3VuZEVycm9yLFxuICBRVUVSWV9TRUxFQ1RfVFlQRSxcbiAgVFJBTlNGT1JNX1NDQU5fVFlQRSxcbn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge2lzRW1wdHlPYmplY3R9IGZyb20gJy4uLy4uL2hlbHBlcnMvaXMtZW1wdHktb2JqZWN0JztcbmltcG9ydCB7Q29ubmVjdGlvbn0gZnJvbSAnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uJztcbmltcG9ydCB7TUVSR0VfU1RSQVRFR1l9IGZyb20gJy4uL2V4cHJlc3Npb24vYmFzZS1leHByZXNzaW9uLWlucHV0JztcbmltcG9ydCB7RmlsdGVyfSBmcm9tICcuLi9leHByZXNzaW9uL2ZpbHRlcic7XG5pbXBvcnQge01ldGFkYXRhT3B0aW9uc30gZnJvbSAnLi9iYXNlLXRyYW5zZm9ybWVyJztcbmltcG9ydCB7TG93T3JkZXJUcmFuc2Zvcm1lcnN9IGZyb20gJy4vbG93LW9yZGVyLXRyYW5zZm9ybWVycyc7XG5cbmludGVyZmFjZSBTY2FuVHJhbnNmb3JtZXJUb0R5bmFtb1NjYW5PcHRpb25zIHtcbiAgZW50aXR5PzogRW50aXR5VGFyZ2V0PGFueT47XG4gIHNjYW5JbmRleD86IHN0cmluZztcbiAgbGltaXQ/OiBudW1iZXI7XG4gIGN1cnNvcj86IERvY3VtZW50Q2xpZW50VHlwZXMuS2V5O1xuICB3aGVyZT86IGFueTtcbiAgc2VsZWN0PzogYW55W107XG4gIG9ubHlDb3VudD86IGJvb2xlYW47XG4gIHNlZ21lbnQ/OiBudW1iZXI7IC8vIGN1cnJlbnQgc2VnbWVudFxuICB0b3RhbFNlZ21lbnRzPzogbnVtYmVyOyAvLyB0b3RhbCBzZWdtZW50cyB0aGF0IHRoaXMgcGFyYWxsZWwgc2NhbiB3aWxsIGJlIGRpdmlkZWQgaW5cbn1cblxuZXhwb3J0IGNsYXNzIERvY3VtZW50Q2xpZW50U2NhblRyYW5zZm9ybWVyIGV4dGVuZHMgTG93T3JkZXJUcmFuc2Zvcm1lcnMge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uOiBDb25uZWN0aW9uKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBUeXBlRE9STSBpbnB1dCBpbnRvIGR5bmFtbyBzY2FuIG9wZXJhdGlvbiBpbnB1dFxuICAgKi9cbiAgdG9EeW5hbW9TY2FuSXRlbShcbiAgICBzY2FuT3B0aW9ucz86IFNjYW5UcmFuc2Zvcm1lclRvRHluYW1vU2Nhbk9wdGlvbnMsXG4gICAgbWV0YWRhdGFPcHRpb25zPzogTWV0YWRhdGFPcHRpb25zXG4gICk6IERvY3VtZW50Q2xpZW50VHlwZXMuU2NhbklucHV0IHtcbiAgICB0aGlzLmNvbm5lY3Rpb24ubG9nZ2VyLmxvZ1RyYW5zZm9ybVNjYW4oe1xuICAgICAgcmVxdWVzdElkOiBtZXRhZGF0YU9wdGlvbnM/LnJlcXVlc3RJZCxcbiAgICAgIG9wZXJhdGlvbjogVFJBTlNGT1JNX1NDQU5fVFlQRS5TQ0FOLFxuICAgICAgcHJlZml4OiAnQmVmb3JlJyxcbiAgICAgIG9wdGlvbnM6IHNjYW5PcHRpb25zLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdGFibGVUb1NjYW4gPSBzY2FuT3B0aW9ucz8uZW50aXR5XG4gICAgICA/IHRoaXMuY29ubmVjdGlvbi5nZXRFbnRpdHlCeVRhcmdldChzY2FuT3B0aW9ucz8uZW50aXR5KT8udGFibGVcbiAgICAgIDogdGhpcy5jb25uZWN0aW9uLnRhYmxlO1xuXG4gICAgbGV0IHZlcmlmaWVkSW5kZXhUb1NjYW46IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAvLyB2YWxpZGF0ZSBpZiBpbmRleCByZXF1ZXN0ZWQgdG8gc2NhbiBiZWxvbmdzIHRvIGN1cnJlbnQgcmVzb2x2ZWQgdGFibGVcbiAgICBpZiAoc2Nhbk9wdGlvbnM/LnNjYW5JbmRleCkge1xuICAgICAgY29uc3Qgc2NhbkluZGV4T3B0aW9ucyA9IHRhYmxlVG9TY2FuLmdldEluZGV4QnlLZXkoXG4gICAgICAgIHNjYW5PcHRpb25zPy5zY2FuSW5kZXhcbiAgICAgICk7XG4gICAgICBpZiAoIXNjYW5JbmRleE9wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IE5vU3VjaEluZGV4Rm91bmRFcnJvcihcbiAgICAgICAgICB0YWJsZVRvU2Nhbi5uYW1lLFxuICAgICAgICAgIHNjYW5PcHRpb25zPy5zY2FuSW5kZXhcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdHJhbnNmb3JtZWRTY2FuSW5wdXQ6IERvY3VtZW50Q2xpZW50VHlwZXMuU2NhbklucHV0ID0ge1xuICAgICAgVGFibGVOYW1lOiB0YWJsZVRvU2Nhbi5uYW1lLFxuICAgICAgSW5kZXhOYW1lOiB2ZXJpZmllZEluZGV4VG9TY2FuLFxuICAgICAgUmV0dXJuQ29uc3VtZWRDYXBhY2l0eTogbWV0YWRhdGFPcHRpb25zPy5yZXR1cm5Db25zdW1lZENhcGFjaXR5LFxuICAgIH07XG5cbiAgICAvLyB0cmFuc2Zvcm0gYWRkaXRpb25hbCBvcHRpb25zXG4gICAgaWYgKHNjYW5PcHRpb25zICYmICFpc0VtcHR5T2JqZWN0KHNjYW5PcHRpb25zKSkge1xuICAgICAgY29uc3Qge2N1cnNvciwgbGltaXQsIHdoZXJlLCBvbmx5Q291bnQsIHNlbGVjdCwgZW50aXR5fSA9IHNjYW5PcHRpb25zO1xuXG4gICAgICB0cmFuc2Zvcm1lZFNjYW5JbnB1dC5MaW1pdCA9IGxpbWl0O1xuICAgICAgdHJhbnNmb3JtZWRTY2FuSW5wdXQuRXhjbHVzaXZlU3RhcnRLZXkgPSBjdXJzb3I7XG5cbiAgICAgIC8vIGNoZWNrIGlmIG9ubHkgdGhlIGNvdW50IHdhcyByZXF1ZXN0ZWRcbiAgICAgIGlmIChvbmx5Q291bnQpIHtcbiAgICAgICAgaWYgKHNlbGVjdD8ubGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0F0dHJpYnV0ZXMgcHJvamVjdGlvbiBhbmQgY291bnQgY2FuIG5vdCBiZSB1c2VkIHRvZ2V0aGVyJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY291bnQgYW5kIHByb2plY3Rpb24gc2VsZWN0aW9uIGNhbiBub3QgYmUgdXNlZCB0b2dldGhlclxuICAgICAgICB0cmFuc2Zvcm1lZFNjYW5JbnB1dC5TZWxlY3QgPSBRVUVSWV9TRUxFQ1RfVFlQRS5DT1VOVDtcbiAgICAgIH1cblxuICAgICAgLy8gZW50aXR5IGZpbHRlclxuICAgICAgbGV0IGVudGl0eUZpbHRlcjogRmlsdGVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGVudGl0eSkge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY29ubmVjdGlvbi5nZXRFbnRpdHlCeVRhcmdldChlbnRpdHkpO1xuXG4gICAgICAgIGlmICghbWV0YWRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTm9TdWNoRW50aXR5RXhpc3RzRXJyb3IoZW50aXR5Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGJ1aWxkIGN1cnJlbnQgZW50aXR5IGZpbHRlclxuICAgICAgICBlbnRpdHlGaWx0ZXIgPSB0aGlzLmV4cHJlc3Npb25JbnB1dFBhcnNlci5wYXJzZVRvRmlsdGVyKHtcbiAgICAgICAgICBbSU5URVJOQUxfRU5USVRZX0FUVFJJQlVURS5FTlRJVFlfTkFNRV06IHtcbiAgICAgICAgICAgIEVROiBtZXRhZGF0YS5uYW1lLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0gYXMgYW55KTtcbiAgICAgIH1cblxuICAgICAgLy8gYnVpbGQgZmlsdGVyIGV4cHJlc3Npb25cbiAgICAgIGxldCBvcHRpb25zRmlsdGVyOiBGaWx0ZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAod2hlcmUgJiYgIWlzRW1wdHlPYmplY3Qod2hlcmUpKSB7XG4gICAgICAgIGNvbnN0IGlucHV0RmlsdGVyID0gdGhpcy5leHByZXNzaW9uSW5wdXRQYXJzZXIucGFyc2VUb0ZpbHRlcih3aGVyZSk7XG5cbiAgICAgICAgaWYgKCFpbnB1dEZpbHRlcikge1xuICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkRmlsdGVySW5wdXRFcnJvcih3aGVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9uc0ZpbHRlciA9IGlucHV0RmlsdGVyO1xuICAgICAgfVxuXG4gICAgICAvLyBtZXJnZSBmaWx0ZXJzIG9mIGZhbGwgYmFjayB0byBub25lXG4gICAgICBsZXQgZmlsdGVyOiBGaWx0ZXIgfCBudWxsO1xuICAgICAgaWYgKGVudGl0eUZpbHRlciAmJiBvcHRpb25zRmlsdGVyKSB7XG4gICAgICAgIGZpbHRlciA9IG5ldyBGaWx0ZXIoKS5tZXJnZU1hbnkoXG4gICAgICAgICAgW2VudGl0eUZpbHRlciwgb3B0aW9uc0ZpbHRlcl0sXG4gICAgICAgICAgTUVSR0VfU1RSQVRFR1kuQU5EXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWx0ZXIgPSBlbnRpdHlGaWx0ZXIgfHwgb3B0aW9uc0ZpbHRlciB8fCBudWxsOyAvLyBpZiBub24gb2YgdGhlIGNvbmRpdGlvbiBza2lwIGl0IGFsbCB0b2dldGhlclxuICAgICAgfVxuXG4gICAgICAvLyBpZiBhdCBsZWFzdCBvbmUgY29uZGl0aW9uIHdhcyB0cnV0aHksIHBhcnNlIGl0IGFuZCBpbmNsdWRlIGl0IGluIHRoZSBpbnB1dFxuICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgRmlsdGVyRXhwcmVzc2lvbixcbiAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXMsXG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcyxcbiAgICAgICAgfSA9IHRoaXMuZXhwcmVzc2lvbkJ1aWxkZXIuYnVpbGRGaWx0ZXJFeHByZXNzaW9uKGZpbHRlcik7XG5cbiAgICAgICAgdHJhbnNmb3JtZWRTY2FuSW5wdXQgPSB7XG4gICAgICAgICAgLi4udHJhbnNmb3JtZWRTY2FuSW5wdXQsXG4gICAgICAgICAgRmlsdGVyRXhwcmVzc2lvbixcbiAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHtcbiAgICAgICAgICAgIC4uLnRyYW5zZm9ybWVkU2NhbklucHV0LkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyxcbiAgICAgICAgICAgIC4uLkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICAgIC4uLnRyYW5zZm9ybWVkU2NhbklucHV0LkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgICAgICAgICAuLi5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHByb2plY3Rpb24gYnVpbGRlclxuICAgICAgaWYgKHNlbGVjdD8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSB0aGlzLmV4cHJlc3Npb25JbnB1dFBhcnNlci5wYXJzZVRvUHJvamVjdGlvbihzZWxlY3QpO1xuXG4gICAgICAgIGlmICghcHJvamVjdGlvbikge1xuICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0SW5wdXRFcnJvcihzZWxlY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge1Byb2plY3Rpb25FeHByZXNzaW9uLCBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXN9ID1cbiAgICAgICAgICB0aGlzLmV4cHJlc3Npb25CdWlsZGVyLmJ1aWxkUHJvamVjdGlvbkV4cHJlc3Npb24ocHJvamVjdGlvbik7XG5cbiAgICAgICAgdHJhbnNmb3JtZWRTY2FuSW5wdXQgPSB7XG4gICAgICAgICAgLi4udHJhbnNmb3JtZWRTY2FuSW5wdXQsXG4gICAgICAgICAgUHJvamVjdGlvbkV4cHJlc3Npb24sXG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICAgICAuLi50cmFuc2Zvcm1lZFNjYW5JbnB1dC5FeHByZXNzaW9uQXR0cmlidXRlTmFtZXMsXG4gICAgICAgICAgICAuLi5FeHByZXNzaW9uQXR0cmlidXRlTmFtZXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSB2YWx1ZSBmb3Igc2VnbWVudCBhbmQgdG90YWxTZWdtZW50IGJlZm9yZSBhcHBlbmRpbmdcbiAgICBpZiAoXG4gICAgICBzY2FuT3B0aW9ucz8udG90YWxTZWdtZW50cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBzY2FuT3B0aW9ucz8udG90YWxTZWdtZW50cyAhPT0gbnVsbFxuICAgICkge1xuICAgICAgaWYgKHNjYW5PcHRpb25zPy50b3RhbFNlZ21lbnRzID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzY2FuIG9wdGlvbiB0b3RhbFNlZ21lbnQ6ICR7c2Nhbk9wdGlvbnM/LnRvdGFsU2VnbWVudHN9LlxuICAgICAgICB0b3RhbFNlZ21lbnRzIGlzIG9wdGlvbmFsLCBidXQgd2hlbiBwcm92aWRlZCBpdCdzIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAuYCk7XG4gICAgICB9XG4gICAgICBpZiAoc2Nhbk9wdGlvbnM/LnNlZ21lbnQgPT09IHVuZGVmaW5lZCB8fCBzY2FuT3B0aW9ucz8uc2VnbWVudCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2NhbiBvcHRpb24gc2VnbWVudDogJHtzY2FuT3B0aW9ucz8uc2VnbWVudH0uXG4gICAgICAgIFdoZW4gdG90YWxTZWdtZW50cyB2YWx1ZSBpcyBkZWZpbmVkLCB2YWx1ZSBmb3Igb3B0aW9uICdzZWdtZW50JyBtdXN0IGFsc28gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIGlmIChzY2FuT3B0aW9ucz8uc2VnbWVudCA+PSBzY2FuT3B0aW9ucz8udG90YWxTZWdtZW50cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2NhbiBvcHRpb24gc2VnbWVudDogJHtzY2FuT3B0aW9ucz8uc2VnbWVudH0uXG4gICAgICAgIFdoZW4gdG90YWxTZWdtZW50cyB2YWx1ZSBpcyBkZWZpbmVkLCB2YWx1ZSBmb3Igb3B0aW9uICdzZWdtZW50JyBtdXN0IGJlIG9uZSBsZXNzIHRoYW4gdG90YWxTZWdtZW50IHNpemUuYCk7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zZm9ybWVkU2NhbklucHV0LlRvdGFsU2VnbWVudHMgPSBzY2FuT3B0aW9ucz8udG90YWxTZWdtZW50cztcbiAgICAgIHRyYW5zZm9ybWVkU2NhbklucHV0LlNlZ21lbnQgPSBzY2FuT3B0aW9ucz8uc2VnbWVudDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbm5lY3Rpb24ubG9nZ2VyLmxvZ1RyYW5zZm9ybVNjYW4oe1xuICAgICAgcmVxdWVzdElkOiBtZXRhZGF0YU9wdGlvbnM/LnJlcXVlc3RJZCxcbiAgICAgIHByZWZpeDogJ0FmdGVyJyxcbiAgICAgIG9wZXJhdGlvbjogVFJBTlNGT1JNX1NDQU5fVFlQRS5TQ0FOLFxuICAgICAgYm9keTogdHJhbnNmb3JtZWRTY2FuSW5wdXQsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRTY2FuSW5wdXQ7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBEeW5hbW9EQiBzY2FuIG91dHB1dCBpbnRvIGVudGl0aWVzXG4gICAqL1xuICBmcm9tRHluYW1vU2NhblJlc3BvbnNlSXRlbUxpc3Q8VD4oXG4gICAgaXRlbUxpc3Q6IERvY3VtZW50Q2xpZW50VHlwZXMuSXRlbUxpc3QsXG4gICAgbWV0YWRhdGFPcHRpb25zPzogTWV0YWRhdGFPcHRpb25zXG4gICk6IHtcbiAgICBpdGVtczogVFtdO1xuICAgIHVua25vd25JdGVtczogRG9jdW1lbnRDbGllbnRUeXBlcy5BdHRyaWJ1dGVNYXBbXTtcbiAgfSB7XG4gICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlOiB7XG4gICAgICBpdGVtczogVFtdO1xuICAgICAgdW5rbm93bkl0ZW1zOiBEb2N1bWVudENsaWVudFR5cGVzLkF0dHJpYnV0ZU1hcFtdO1xuICAgIH0gPSB7XG4gICAgICBpdGVtczogW10sXG4gICAgICB1bmtub3duSXRlbXM6IFtdLFxuICAgIH07XG5cbiAgICBpZiAoIWl0ZW1MaXN0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGluaXRpYWxSZXNwb25zZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbUxpc3QucmVkdWNlKChhY2M6IHR5cGVvZiBpbml0aWFsUmVzcG9uc2UsIHJlc3BvbnNlSXRlbSkgPT4ge1xuICAgICAgY29uc3QgZW50aXR5UGh5c2ljYWxOYW1lID1cbiAgICAgICAgcmVzcG9uc2VJdGVtW0lOVEVSTkFMX0VOVElUWV9BVFRSSUJVVEUuRU5USVRZX05BTUVdO1xuXG4gICAgICAvLyBlYXJseSByZXR1cm4gaWYgbm8gZW50aXR5IG1ldGFkYXRhIHdhcyBmb3VuZCBvbiBpdGVtXG4gICAgICBpZiAoIWVudGl0eVBoeXNpY2FsTmFtZSkge1xuICAgICAgICBhY2MudW5rbm93bkl0ZW1zLnB1c2gocmVzcG9uc2VJdGVtKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgY29uc3QgZW50aXR5TWV0YWRhdGEgPVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24uZ2V0RW50aXR5QnlQaHlzaWNhbE5hbWUoZW50aXR5UGh5c2ljYWxOYW1lKTtcblxuICAgICAgY29uc3QgcmV2ZXJzZVRyYW5zZm9ybWVkSXRlbSA9IHRoaXMuZnJvbUR5bmFtb0VudGl0eShcbiAgICAgICAgZW50aXR5TWV0YWRhdGEudGFyZ2V0LFxuICAgICAgICByZXNwb25zZUl0ZW0sXG4gICAgICAgIG1ldGFkYXRhT3B0aW9uc1xuICAgICAgKTtcblxuICAgICAgYWNjLml0ZW1zLnB1c2gocmV2ZXJzZVRyYW5zZm9ybWVkSXRlbSk7XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgaW5pdGlhbFJlc3BvbnNlKTtcbiAgfVxufVxuIl19