import { EntityTarget } from '@typedorm/common';
import { Batch } from './batch';
export interface WriteBatchCreate<Entity> {
    create: {
        item: Entity;
    };
}
export interface WriteBatchDelete<Entity, PrimaryKey> {
    delete: {
        item: EntityTarget<Entity>;
        primaryKey: PrimaryKey;
    };
}
export type WriteBatchItem<Entity, PrimaryKey> = WriteBatchCreate<Entity> | WriteBatchDelete<Entity, PrimaryKey>;
export declare class WriteBatch extends Batch<WriteBatchItem<any, any>> {
    add(batchItems: WriteBatchItem<any, any>[]): this;
    addCreateItem<Entity>(item: Entity): this;
    addDeleteItem<Entity, PrimaryKey = Partial<Entity>>(item: EntityTarget<Entity>, primaryKey: PrimaryKey): this;
}
