import { INTERNAL_ENTITY_ATTRIBUTE, InvalidParallelScanLimitOptionError, MANAGER_NAME, PARALLEL_SCAN_CONCURRENCY_LIMIT, STATS_TYPE, } from '@typedorm/common';
import pLimit from 'p-limit';
import { getUniqueRequestId } from '../../helpers/get-unique-request-id';
import { DocumentClientScanTransformer } from '../transformer/document-client-scan-transformer';
export class ScanManager {
    connection;
    itemsFetchedSoFarTotalParallelCount;
    limit = pLimit(PARALLEL_SCAN_CONCURRENCY_LIMIT);
    _dcScanTransformer;
    constructor(connection) {
        this.connection = connection;
        this._dcScanTransformer = new DocumentClientScanTransformer(connection);
        this.itemsFetchedSoFarTotalParallelCount = 0;
    }
    /**
     * Finds all the matching entity over document client scan operation
     * @param entityClass Entity to find
     * @param findOptions find query options
     * @param metadataOptions Other metadata options
     */
    async find(entityClass, findOptions, metadataOptions) {
        const requestId = getUniqueRequestId(metadataOptions?.requestId);
        let response;
        if (findOptions?.totalSegments) {
            (response = await this.parallelScan({
                ...findOptions,
                entity: entityClass,
            })),
                {
                    requestId,
                    returnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
                };
        }
        else {
            response = await this.scan({ ...findOptions, entity: entityClass }, {
                requestId,
                returnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
            });
        }
        if (response.unknownItems?.length) {
            // log warning for items that were skipped form the response
            // These are items that had __en attribute on them but TypeDORM does no longer know about them
            this.connection.logger.logWarn({
                requestId,
                scope: MANAGER_NAME.SCAN_MANAGER,
                log: `"${response.unknownItems.length}" items were skipped from the response because TypDORM failed to resolve them.`,
            });
        }
        return {
            items: response.items,
            cursor: response.cursor,
        };
    }
    /**
     * Returns total count of all matching items for current entity
     * @param entityClass Entity to count
     * @param scanOptions Extra scan options
     * @param metadataOptions Other metadata options
     */
    async count(entityClass, scanOptions, metadataOptions) {
        const requestId = getUniqueRequestId(metadataOptions?.requestId);
        const dynamoScanInput = this._dcScanTransformer.toDynamoScanItem({ ...scanOptions, entity: entityClass, onlyCount: true, select: undefined }, // select projection and count can not be used together
        {
            requestId,
            returnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
        });
        const count = await this._internalRecursiveCount({
            scanInput: dynamoScanInput,
            metadataOptions: {
                requestId,
                returnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
            },
        });
        return count;
    }
    /**
     * Scans all items from dynamo table in parallel while also respecting the max provisioned concurrency
     * @param scanOptions Options for parallel scan
     * @param metadataOptions Additional metadata options
     */
    async parallelScan(scanOptions, metadataOptions) {
        // start with 0
        this.itemsFetchedSoFarTotalParallelCount = 0;
        const concurrencyLimit = PARALLEL_SCAN_CONCURRENCY_LIMIT || scanOptions.requestsConcurrencyLimit;
        const requestId = getUniqueRequestId(metadataOptions?.requestId);
        if (scanOptions.requestsConcurrencyLimit) {
            this.limit = pLimit(scanOptions.requestsConcurrencyLimit);
        }
        const parallelScanOptions = [];
        if (scanOptions?.limit &&
            scanOptions?.limitPerSegment &&
            scanOptions?.limit < scanOptions?.limitPerSegment) {
            throw new InvalidParallelScanLimitOptionError(scanOptions?.limit, scanOptions?.limitPerSegment);
        }
        for (let index = 0; index < scanOptions.totalSegments; index++) {
            // only the cursor for same segment can be applied
            const cursorForSegment = scanOptions.cursor
                ? scanOptions.cursor[index]
                : undefined;
            parallelScanOptions.push({
                ...scanOptions,
                cursor: cursorForSegment,
                segment: index,
            });
        }
        this.connection.logger.logInfo({
            requestId,
            scope: MANAGER_NAME.SCAN_MANAGER,
            log: `Running scan in parallel with ${scanOptions.totalSegments} segments.`,
        });
        if (concurrencyLimit < scanOptions.totalSegments) {
            this.connection.logger.logInfo({
                requestId,
                scope: MANAGER_NAME.SCAN_MANAGER,
                log: `Current request concurrency limit ${concurrencyLimit} is lower than requested segments count ${scanOptions.totalSegments}
        So requests will be run in a batch of ${concurrencyLimit} at a time until all segments ${scanOptions.totalSegments} have processed.`,
            });
        }
        const allPromisesResponse = await Promise.all(parallelScanOptions.map(options => this.toLimited(this.scan(options, metadataOptions))));
        // merge all responses
        const response = allPromisesResponse.reduce((acc, current, index) => {
            if (current.items?.length) {
                if (!acc.items) {
                    acc.items = [];
                }
                acc.items = [...acc.items, ...current.items];
            }
            if (current.unknownItems?.length) {
                if (!acc.unknownItems) {
                    acc.unknownItems = [];
                }
                acc.unknownItems = [...acc.unknownItems, ...current.unknownItems];
            }
            if (current.cursor) {
                if (!acc.cursor) {
                    acc.cursor = {};
                }
                acc.cursor = {
                    ...acc.cursor,
                    [index]: current.cursor,
                };
            }
            return acc;
        }, {});
        return response;
    }
    /**
     * Low level scan operation.
     *
     * Perhaps you are looking for higher level ScanManager.find or ScanManager.parallelScan operation
     * @param scanOptions scan options to run scan with
     * @param metadataOptions any other metadata options
     */
    async scan(scanOptions, metadataOptions) {
        const requestId = getUniqueRequestId(metadataOptions?.requestId);
        const dynamoScanInput = this._dcScanTransformer.toDynamoScanItem({
            ...scanOptions,
            // if requested segmented scan, then apply segment limit or default to limit operator
            limit: scanOptions?.totalSegments
                ? scanOptions?.limitPerSegment
                : scanOptions?.limit,
        }, {
            requestId,
            returnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
        });
        const response = await this._internalRecursiveScan({
            scanInput: dynamoScanInput,
            limit: scanOptions?.limit,
            cursor: scanOptions?.cursor,
            metadataOptions: {
                requestId,
                returnConsumedCapacity: metadataOptions?.returnConsumedCapacity,
            },
        });
        const entities = this._dcScanTransformer.fromDynamoScanResponseItemList(response.items);
        if (scanOptions?.entity && entities.unknownItems) {
            this.connection.logger.logWarn({
                requestId,
                scope: MANAGER_NAME.SCAN_MANAGER,
                log: `
        There were some items that looked like ${scanOptions?.entity.name} but TypeDORM was unable to convert it back to entity type,
        This can happen when there are items in the table with "${INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME} but was not created by TypeDORM.
        You should remove them or update it to something different."`,
            });
        }
        return {
            items: entities.items?.length ? entities.items : undefined,
            unknownItems: entities.unknownItems?.length
                ? entities.unknownItems
                : undefined,
            cursor: response.cursor,
        };
    }
    /**
     * Recursively scans table with given options
     */
    async _internalRecursiveScan({ scanInput, limit, cursor, itemsFetched = [], metadataOptions, }) {
        // return if the count is already met
        if (limit && this.itemsFetchedSoFarTotalParallelCount >= limit) {
            return {
                items: itemsFetched,
                cursor,
            };
        }
        const { LastEvaluatedKey, Items = [], ConsumedCapacity, } = await this.connection.documentClient.scan({
            ...scanInput,
            ExclusiveStartKey: cursor,
        });
        // stats
        if (ConsumedCapacity) {
            this.connection.logger.logStats({
                requestId: metadataOptions?.requestId,
                scope: MANAGER_NAME.SCAN_MANAGER,
                statsType: STATS_TYPE.CONSUMED_CAPACITY,
                consumedCapacityData: ConsumedCapacity,
            });
        }
        // recheck if requested items limit is already met, may be other worker
        // if so drop the result of current request and return
        if (limit && this.itemsFetchedSoFarTotalParallelCount >= limit) {
            return {
                items: itemsFetched,
                cursor,
            };
        }
        itemsFetched = [...itemsFetched, ...Items];
        this.itemsFetchedSoFarTotalParallelCount += Items.length;
        if (LastEvaluatedKey) {
            return this._internalRecursiveScan({
                scanInput,
                limit,
                cursor: LastEvaluatedKey,
                itemsFetched,
                metadataOptions,
            });
        }
        return {
            items: itemsFetched,
            cursor: LastEvaluatedKey,
        };
    }
    /**
     * Recursively counts items form table with given options
     */
    async _internalRecursiveCount({ scanInput, cursor, currentCount = 0, metadataOptions, }) {
        const { Count, LastEvaluatedKey, ConsumedCapacity } = await this.connection.documentClient.scan({
            ...scanInput,
            ExclusiveStartKey: cursor,
        });
        // stats
        if (ConsumedCapacity) {
            this.connection.logger.logStats({
                requestId: metadataOptions?.requestId,
                scope: MANAGER_NAME.SCAN_MANAGER,
                statsType: STATS_TYPE.CONSUMED_CAPACITY,
                consumedCapacityData: ConsumedCapacity,
            });
        }
        currentCount += Count || 0;
        if (LastEvaluatedKey) {
            return this._internalRecursiveCount({
                scanInput,
                cursor: LastEvaluatedKey,
                currentCount,
                metadataOptions,
            });
        }
        return currentCount;
    }
    /**
     * Simple wrapper to limit number of concurrent calls
     * @param promise wraps promise in a limited factory
     * @returns
     */
    toLimited(promise) {
        return this.limit(() => promise);
    }
}
//# sourceMappingURL=data:application/json;base64,