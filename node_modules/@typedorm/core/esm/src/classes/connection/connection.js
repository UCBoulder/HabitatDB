import { DYNAMO_QUERY_ITEMS_IMPLICIT_LIMIT, DebugLogger, getEntityDefinition, NoSuchEntityExistsError, } from '@typedorm/common';
import { loadPackage } from '@typedorm/common';
import { DocumentClientV2, DocumentClientV3, } from '@typedorm/document-client';
import { isUsedForPrimaryKey } from '../../helpers/is-used-for-primary-key';
import { BatchManager } from '../manager/batch-manager';
import { EntityManager } from '../manager/entity-manager';
import { ScanManager } from '../manager/scan-manager';
import { TransactionManager } from '../manager/transaction-manager';
import { ConnectionMetadataBuilder } from './connection-metadata-builder';
export class Connection {
    options;
    destroySelf;
    name;
    table;
    entityManager;
    transactionManger;
    batchManager;
    scanManager;
    defaultConfig;
    documentClient;
    logger;
    _entityMetadatas;
    isConnected;
    constructor(options, destroySelf) {
        this.options = options;
        this.destroySelf = destroySelf;
        const { table, name = 'default' } = options;
        if (table) {
            this.table = table;
        }
        this.name = name;
        this.entityManager = new EntityManager(this);
        this.batchManager = new BatchManager(this);
        this.transactionManger = new TransactionManager(this);
        this.scanManager = new ScanManager(this);
        this.defaultConfig = {
            queryItemsImplicitLimit: options.dynamoQueryItemsImplicitLimit ??
                DYNAMO_QUERY_ITEMS_IMPLICIT_LIMIT,
        };
        this.documentClient = this.loadOrInitiateDocumentClient(options.documentClient);
        /**
         * This makes sure that we only ever build entity metadatas once per connection
         */
        this.isConnected = false;
        this.logger = new DebugLogger();
    }
    connect() {
        if (this.isConnected) {
            throw new Error('There is already an active connection, Connect should only be called once per application.');
        }
        try {
            this._entityMetadatas = new Map(this.buildMetadatas().map(entityMeta => [
                entityMeta.target.name,
                entityMeta,
            ]));
            this.isConnected = true;
            return this;
        }
        catch (err) {
            // Failed to connect to connection, clear self from connection manager
            this.destroySelf(this.name);
            throw err;
        }
    }
    get entityMetadatas() {
        return Array.from(this._entityMetadatas.values());
    }
    hasMetadata(entityClass) {
        return !!this.getEntityByTarget(entityClass);
    }
    getAttributesForEntity(entityClass) {
        const attributesMap = this._entityMetadatas.get(entityClass.name);
        if (!attributesMap) {
            throw new Error(`Cannot find attributes for entity "${entityClass.name}".`);
        }
        return attributesMap.attributes;
    }
    get globalTable() {
        return this.table;
    }
    /**
     * Returns any attributes marked as unique
     * If attribute used in a primary key is marked as unique, it is ignored, since all primary key are always unique
     * @param entityClass
     */
    getUniqueAttributesForEntity(entityClass) {
        const entityMetadata = this.getEntityByTarget(entityClass);
        return this.getAttributesForEntity(entityClass).filter(attr => {
            // only attributes that are not part of primary key should be included
            return (attr?.unique &&
                !isUsedForPrimaryKey(entityMetadata.schema.primaryKey, attr.name));
        });
    }
    /**
     * Returns a list of attribute names that are referenced in primary key
     * @param entityClass Entity to get primary key attributes for
     * @returns
     */
    getPrimaryKeyAttributeInterpolationsForEntity(entityClass) {
        const entityMetadata = this.getEntityByTarget(entityClass);
        return [
            ...new Set(Object.values(entityMetadata.schema.primaryKey.metadata._interpolations ?? {}).flat()),
        ];
    }
    getEntityByTarget(entityClass) {
        const metadata = this._entityMetadatas.get(entityClass.name);
        if (!metadata) {
            throw new Error(`No such entity named "${entityClass.name}" is known to TypeDORM, make sure it is declared at the connection creation time.`);
        }
        return metadata;
    }
    getEntityByPhysicalName(name) {
        const entitySpec = getEntityDefinition(name);
        if (!entitySpec) {
            throw new NoSuchEntityExistsError(name);
        }
        return this.getEntityByTarget(entitySpec.target);
    }
    getAutoUpdateAttributes(entityClass) {
        return this.getAttributesForEntity(entityClass).filter(attr => attr?.autoUpdate);
    }
    isUsedForPrimaryKey(primaryKey, attributeName) {
        const primaryKeyInterpolations = primaryKey.metadata._interpolations ?? {};
        return Object.keys(primaryKeyInterpolations).some(key => {
            const currInterpolation = primaryKeyInterpolations[key];
            return currInterpolation.includes(attributeName);
        });
    }
    buildMetadatas() {
        return new ConnectionMetadataBuilder(this).buildEntityMetadatas(this.options.entities);
    }
    loadOrInitiateDocumentClient(documentClient) {
        if (!documentClient) {
            const AWSModule = loadPackage('aws-sdk');
            return new DocumentClientV2(new AWSModule.DynamoDB.DocumentClient());
        }
        if (documentClient instanceof DocumentClientV2) {
            return documentClient;
        }
        else if (documentClient instanceof DocumentClientV3) {
            return documentClient;
        }
        else {
            return new DocumentClientV2(documentClient);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,