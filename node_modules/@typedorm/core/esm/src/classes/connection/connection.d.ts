import { EntityTarget, Replace, Table, DebugLogger } from '@typedorm/common';
import { DocumentClient, DocumentClientV2, DocumentClientV3 } from '@typedorm/document-client';
import { BatchManager } from '../manager/batch-manager';
import { EntityManager } from '../manager/entity-manager';
import { ScanManager } from '../manager/scan-manager';
import { TransactionManager } from '../manager/transaction-manager';
import { AttributeMetadata } from '../metadata/attribute-metadata';
import { AutoGeneratedAttributeMetadata } from '../metadata/auto-generated-attribute-metadata';
import { EntityMetadata, DynamoEntitySchemaPrimaryKey } from '../metadata/entity-metadata';
import { ConnectionOptions } from './connection-options';
export declare class Connection {
    private options;
    private destroySelf;
    readonly name: string;
    readonly table: Table;
    readonly entityManager: EntityManager;
    readonly transactionManger: TransactionManager;
    readonly batchManager: BatchManager;
    readonly scanManager: ScanManager;
    readonly defaultConfig: {
        queryItemsImplicitLimit: number;
    };
    readonly documentClient: DocumentClient;
    readonly logger: DebugLogger;
    private _entityMetadatas;
    private isConnected;
    constructor(options: ConnectionOptions, destroySelf: (name: string) => void);
    connect(): this;
    get entityMetadatas(): EntityMetadata[];
    hasMetadata<Entity>(entityClass: EntityTarget<Entity>): boolean;
    getAttributesForEntity<Entity>(entityClass: EntityTarget<Entity>): import("../metadata/entity-metadata").AttributeMetadataType[];
    get globalTable(): Table;
    /**
     * Returns any attributes marked as unique
     * If attribute used in a primary key is marked as unique, it is ignored, since all primary key are always unique
     * @param entityClass
     */
    getUniqueAttributesForEntity<Entity>(entityClass: EntityTarget<Entity>): Replace<AttributeMetadata, "unique", {
        unique: DynamoEntitySchemaPrimaryKey;
    }>[];
    /**
     * Returns a list of attribute names that are referenced in primary key
     * @param entityClass Entity to get primary key attributes for
     * @returns
     */
    getPrimaryKeyAttributeInterpolationsForEntity<Entity>(entityClass: EntityTarget<Entity>): string[];
    getEntityByTarget<Entity>(entityClass: EntityTarget<Entity>): EntityMetadata;
    getEntityByPhysicalName(name: string): EntityMetadata;
    getAutoUpdateAttributes<Entity>(entityClass: EntityTarget<Entity>): AutoGeneratedAttributeMetadata[];
    isUsedForPrimaryKey(primaryKey: DynamoEntitySchemaPrimaryKey, attributeName: string): boolean;
    buildMetadatas(): EntityMetadata[];
    loadOrInitiateDocumentClient(documentClient?: unknown): DocumentClientV2<any> | DocumentClientV3<any>;
}
