import { MetadataManager, MissingRequiredTableConfig, } from '@typedorm/common';
import { EntityMetadata, } from '../metadata/entity-metadata';
import { AttributesMetadataBuilder } from './attribute-metadata-builder';
export class EntityMetadataBuilder {
    connection;
    table;
    attributesMetadataBuilder;
    constructor(connection) {
        this.connection = connection;
        this.attributesMetadataBuilder = new AttributesMetadataBuilder();
    }
    build(entityClasses) {
        return entityClasses.map(decoratedEntityClass => {
            const { target, table, name, primaryKey, indexes } = MetadataManager.metadataStorage.getRawEntityByTarget(decoratedEntityClass);
            if (table) {
                // if no entity level table is defined fallback to global connection table
                this.table = table;
            }
            else {
                this.table = this.connection.table;
            }
            if (!this.table) {
                throw new MissingRequiredTableConfig(decoratedEntityClass.name);
            }
            const inheritedClasses = this.recursiveGetInheritanceTree(decoratedEntityClass);
            // metadata are sorted by [very base class] -> [very derived class]
            const inheritedEntitiesAttributesMetadata = inheritedClasses
                .map(derivedClass => this.attributesMetadataBuilder.build(this.table, derivedClass, decoratedEntityClass))
                .reverse();
            const deNormalizedAttributesMap = inheritedEntitiesAttributesMetadata
                .flat()
                .reduce((acc, current) => {
                // when inherited class defined same attribute again with different config, it should be used over base class
                // attribute definition on child class take precedence over base class
                acc.set(current.name, current);
                return acc;
            }, new Map());
            // reverse to return [very derived class] -> [very base class] attributes
            const allAttributesForEntity = Array.from(deNormalizedAttributesMap.values()).reverse();
            // At the moment we do simple store metadata and retrieve for entities,
            // this however needs to support extending Entity
            return new EntityMetadata({
                connection: this.connection,
                table: this.table,
                target,
                attributes: allAttributesForEntity,
                name,
                primaryKey,
                indexes,
            });
        });
    }
    /**
     * Returns inheritance tree of given entity
     * Inheritance tree includes entities from current -> very child -> very parent
     * @param entityClass
     * @param tree
     * @returns [originalEntity, parent of originalEntity as parent1, parent of parent1 as parent2]
     */
    recursiveGetInheritanceTree(entityClass, tree = []) {
        tree.push(entityClass);
        const proto = Object.getPrototypeOf(entityClass);
        if (proto && proto.name) {
            return this.recursiveGetInheritanceTree(proto, tree);
        }
        return tree;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LW1ldGFkYXRhLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jbGFzc2VzL2Nvbm5lY3Rpb24vZW50aXR5LW1ldGFkYXRhLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGVBQWUsRUFDZiwwQkFBMEIsR0FFM0IsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBRUwsY0FBYyxHQUNmLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFHdkUsTUFBTSxPQUFPLHFCQUFxQjtJQUdaO0lBRnBCLEtBQUssQ0FBUTtJQUNMLHlCQUF5QixDQUE0QjtJQUM3RCxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3hDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLHlCQUF5QixFQUFFLENBQUM7SUFDbkUsQ0FBQztJQUNELEtBQUssQ0FBQyxhQUF5QjtRQUM3QixPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUM5QyxNQUFNLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxHQUM5QyxlQUFlLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUNsRCxvQkFBb0IsQ0FDckIsQ0FBQztZQUVKLElBQUksS0FBSyxFQUFFO2dCQUNULDBFQUEwRTtnQkFDMUUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQzthQUNwQztZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNmLE1BQU0sSUFBSSwwQkFBMEIsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqRTtZQUVELE1BQU0sZ0JBQWdCLEdBQ3BCLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRXpELG1FQUFtRTtZQUNuRSxNQUFNLG1DQUFtQyxHQUFHLGdCQUFnQjtpQkFDekQsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQ2xCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQ2xDLElBQUksQ0FBQyxLQUFLLEVBQ1YsWUFBWSxFQUNaLG9CQUFvQixDQUNyQixDQUNGO2lCQUNBLE9BQU8sRUFBRSxDQUFDO1lBRWIsTUFBTSx5QkFBeUIsR0FBRyxtQ0FBbUM7aUJBQ2xFLElBQUksRUFBRTtpQkFDTixNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUU7Z0JBQ3ZCLDZHQUE2RztnQkFDN0csc0VBQXNFO2dCQUN0RSxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQy9CLE9BQU8sR0FBRyxDQUFDO1lBQ2IsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFpQyxDQUFDLENBQUM7WUFFL0MseUVBQXlFO1lBQ3pFLE1BQU0sc0JBQXNCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FDdkMseUJBQXlCLENBQUMsTUFBTSxFQUFFLENBQ25DLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFWix1RUFBdUU7WUFDdkUsaURBQWlEO1lBRWpELE9BQU8sSUFBSSxjQUFjLENBQUM7Z0JBQ3hCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDM0IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNqQixNQUFNO2dCQUNOLFVBQVUsRUFBRSxzQkFBc0I7Z0JBQ2xDLElBQUk7Z0JBQ0osVUFBVTtnQkFDVixPQUFPO2FBQ1IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ssMkJBQTJCLENBQ2pDLFdBQXFCLEVBQ3JCLE9BQW1CLEVBQUU7UUFFckIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBNZXRhZGF0YU1hbmFnZXIsXG4gIE1pc3NpbmdSZXF1aXJlZFRhYmxlQ29uZmlnLFxuICBUYWJsZSxcbn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge1xuICBBdHRyaWJ1dGVNZXRhZGF0YVR5cGUsXG4gIEVudGl0eU1ldGFkYXRhLFxufSBmcm9tICcuLi9tZXRhZGF0YS9lbnRpdHktbWV0YWRhdGEnO1xuaW1wb3J0IHtBdHRyaWJ1dGVzTWV0YWRhdGFCdWlsZGVyfSBmcm9tICcuL2F0dHJpYnV0ZS1tZXRhZGF0YS1idWlsZGVyJztcbmltcG9ydCB7Q29ubmVjdGlvbn0gZnJvbSAnLi9jb25uZWN0aW9uJztcblxuZXhwb3J0IGNsYXNzIEVudGl0eU1ldGFkYXRhQnVpbGRlciB7XG4gIHRhYmxlOiBUYWJsZTtcbiAgcHJpdmF0ZSBhdHRyaWJ1dGVzTWV0YWRhdGFCdWlsZGVyOiBBdHRyaWJ1dGVzTWV0YWRhdGFCdWlsZGVyO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbm5lY3Rpb246IENvbm5lY3Rpb24pIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNNZXRhZGF0YUJ1aWxkZXIgPSBuZXcgQXR0cmlidXRlc01ldGFkYXRhQnVpbGRlcigpO1xuICB9XG4gIGJ1aWxkKGVudGl0eUNsYXNzZXM6IEZ1bmN0aW9uW10pOiBFbnRpdHlNZXRhZGF0YVtdIHtcbiAgICByZXR1cm4gZW50aXR5Q2xhc3Nlcy5tYXAoZGVjb3JhdGVkRW50aXR5Q2xhc3MgPT4ge1xuICAgICAgY29uc3Qge3RhcmdldCwgdGFibGUsIG5hbWUsIHByaW1hcnlLZXksIGluZGV4ZXN9ID1cbiAgICAgICAgTWV0YWRhdGFNYW5hZ2VyLm1ldGFkYXRhU3RvcmFnZS5nZXRSYXdFbnRpdHlCeVRhcmdldChcbiAgICAgICAgICBkZWNvcmF0ZWRFbnRpdHlDbGFzc1xuICAgICAgICApO1xuXG4gICAgICBpZiAodGFibGUpIHtcbiAgICAgICAgLy8gaWYgbm8gZW50aXR5IGxldmVsIHRhYmxlIGlzIGRlZmluZWQgZmFsbGJhY2sgdG8gZ2xvYmFsIGNvbm5lY3Rpb24gdGFibGVcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRoaXMuY29ubmVjdGlvbi50YWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnRhYmxlKSB7XG4gICAgICAgIHRocm93IG5ldyBNaXNzaW5nUmVxdWlyZWRUYWJsZUNvbmZpZyhkZWNvcmF0ZWRFbnRpdHlDbGFzcy5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5oZXJpdGVkQ2xhc3NlcyA9XG4gICAgICAgIHRoaXMucmVjdXJzaXZlR2V0SW5oZXJpdGFuY2VUcmVlKGRlY29yYXRlZEVudGl0eUNsYXNzKTtcblxuICAgICAgLy8gbWV0YWRhdGEgYXJlIHNvcnRlZCBieSBbdmVyeSBiYXNlIGNsYXNzXSAtPiBbdmVyeSBkZXJpdmVkIGNsYXNzXVxuICAgICAgY29uc3QgaW5oZXJpdGVkRW50aXRpZXNBdHRyaWJ1dGVzTWV0YWRhdGEgPSBpbmhlcml0ZWRDbGFzc2VzXG4gICAgICAgIC5tYXAoZGVyaXZlZENsYXNzID0+XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzTWV0YWRhdGFCdWlsZGVyLmJ1aWxkKFxuICAgICAgICAgICAgdGhpcy50YWJsZSxcbiAgICAgICAgICAgIGRlcml2ZWRDbGFzcyxcbiAgICAgICAgICAgIGRlY29yYXRlZEVudGl0eUNsYXNzXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIC5yZXZlcnNlKCk7XG5cbiAgICAgIGNvbnN0IGRlTm9ybWFsaXplZEF0dHJpYnV0ZXNNYXAgPSBpbmhlcml0ZWRFbnRpdGllc0F0dHJpYnV0ZXNNZXRhZGF0YVxuICAgICAgICAuZmxhdCgpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgY3VycmVudCkgPT4ge1xuICAgICAgICAgIC8vIHdoZW4gaW5oZXJpdGVkIGNsYXNzIGRlZmluZWQgc2FtZSBhdHRyaWJ1dGUgYWdhaW4gd2l0aCBkaWZmZXJlbnQgY29uZmlnLCBpdCBzaG91bGQgYmUgdXNlZCBvdmVyIGJhc2UgY2xhc3NcbiAgICAgICAgICAvLyBhdHRyaWJ1dGUgZGVmaW5pdGlvbiBvbiBjaGlsZCBjbGFzcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBiYXNlIGNsYXNzXG4gICAgICAgICAgYWNjLnNldChjdXJyZW50Lm5hbWUsIGN1cnJlbnQpO1xuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIG5ldyBNYXA8c3RyaW5nLCBBdHRyaWJ1dGVNZXRhZGF0YVR5cGU+KCkpO1xuXG4gICAgICAvLyByZXZlcnNlIHRvIHJldHVybiBbdmVyeSBkZXJpdmVkIGNsYXNzXSAtPiBbdmVyeSBiYXNlIGNsYXNzXSBhdHRyaWJ1dGVzXG4gICAgICBjb25zdCBhbGxBdHRyaWJ1dGVzRm9yRW50aXR5ID0gQXJyYXkuZnJvbShcbiAgICAgICAgZGVOb3JtYWxpemVkQXR0cmlidXRlc01hcC52YWx1ZXMoKVxuICAgICAgKS5yZXZlcnNlKCk7XG5cbiAgICAgIC8vIEF0IHRoZSBtb21lbnQgd2UgZG8gc2ltcGxlIHN0b3JlIG1ldGFkYXRhIGFuZCByZXRyaWV2ZSBmb3IgZW50aXRpZXMsXG4gICAgICAvLyB0aGlzIGhvd2V2ZXIgbmVlZHMgdG8gc3VwcG9ydCBleHRlbmRpbmcgRW50aXR5XG5cbiAgICAgIHJldHVybiBuZXcgRW50aXR5TWV0YWRhdGEoe1xuICAgICAgICBjb25uZWN0aW9uOiB0aGlzLmNvbm5lY3Rpb24sXG4gICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGF0dHJpYnV0ZXM6IGFsbEF0dHJpYnV0ZXNGb3JFbnRpdHksXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHByaW1hcnlLZXksXG4gICAgICAgIGluZGV4ZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGluaGVyaXRhbmNlIHRyZWUgb2YgZ2l2ZW4gZW50aXR5XG4gICAqIEluaGVyaXRhbmNlIHRyZWUgaW5jbHVkZXMgZW50aXRpZXMgZnJvbSBjdXJyZW50IC0+IHZlcnkgY2hpbGQgLT4gdmVyeSBwYXJlbnRcbiAgICogQHBhcmFtIGVudGl0eUNsYXNzXG4gICAqIEBwYXJhbSB0cmVlXG4gICAqIEByZXR1cm5zIFtvcmlnaW5hbEVudGl0eSwgcGFyZW50IG9mIG9yaWdpbmFsRW50aXR5IGFzIHBhcmVudDEsIHBhcmVudCBvZiBwYXJlbnQxIGFzIHBhcmVudDJdXG4gICAqL1xuICBwcml2YXRlIHJlY3Vyc2l2ZUdldEluaGVyaXRhbmNlVHJlZShcbiAgICBlbnRpdHlDbGFzczogRnVuY3Rpb24sXG4gICAgdHJlZTogRnVuY3Rpb25bXSA9IFtdXG4gICk6IEZ1bmN0aW9uW10ge1xuICAgIHRyZWUucHVzaChlbnRpdHlDbGFzcyk7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZW50aXR5Q2xhc3MpO1xuICAgIGlmIChwcm90byAmJiBwcm90by5uYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWN1cnNpdmVHZXRJbmhlcml0YW5jZVRyZWUocHJvdG8sIHRyZWUpO1xuICAgIH1cbiAgICByZXR1cm4gdHJlZTtcbiAgfVxufVxuIl19