import fg from 'fast-glob';
import path from 'path';
import { DuplicateEntityPhysicalNameError, MissingRequiredEntityPhysicalNameError, } from '@typedorm/common';
import { EntityMetadataBuilder } from './entity-metadata-builder';
import { MetadataManager } from '@typedorm/common';
export class ConnectionMetadataBuilder {
    connection;
    constructor(connection) {
        this.connection = connection;
    }
    buildEntityMetadatas(entities) {
        let possibleEntitiesToBuild = [];
        if (typeof entities === 'string') {
            possibleEntitiesToBuild = [...this.loadEntitiesFromDirs(entities)];
        }
        else {
            possibleEntitiesToBuild = [...entities];
        }
        // filter all entities that are not marked with `@Entity` decorator
        const entitiesToBuild = possibleEntitiesToBuild.filter(entity => MetadataManager.metadataStorage.hasKnownEntity(entity));
        const entityMetadatas = new EntityMetadataBuilder(this.connection).build(entitiesToBuild);
        this.sanitizeDuplicates(entityMetadatas);
        return entityMetadatas;
    }
    loadEntitiesFromDirs(pathMatchPattern) {
        const classesDirectory = path.normalize(pathMatchPattern);
        const allFiles = fg
            .sync(classesDirectory, {
            dot: false,
        })
            .map(file => require(file));
        return this.recursiveLoadModulesFromFiles(allFiles, []);
    }
    recursiveLoadModulesFromFiles(exported, allLoaded) {
        if (typeof exported === 'function') {
            allLoaded.push(exported);
        }
        else if (Array.isArray(exported)) {
            exported.forEach((file) => this.recursiveLoadModulesFromFiles(file, allLoaded));
        }
        else if (typeof exported === 'object' && exported !== null) {
            Object.keys(exported).forEach(key => this.recursiveLoadModulesFromFiles(exported[key], allLoaded));
        }
        return allLoaded;
    }
    sanitizeDuplicates(metadata) {
        const cache = [];
        metadata.forEach(metadata => {
            if (!metadata.name) {
                throw new MissingRequiredEntityPhysicalNameError(metadata.target.name);
            }
            if (cache.includes(metadata.name)) {
                throw new DuplicateEntityPhysicalNameError(metadata.name);
            }
            else {
                cache.push(metadata.name);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbi1tZXRhZGF0YS1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY2xhc3Nlcy9jb25uZWN0aW9uL2Nvbm5lY3Rpb24tbWV0YWRhdGEtYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDM0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFDTCxnQ0FBZ0MsRUFFaEMsc0NBQXNDLEdBQ3ZDLE1BQU0sa0JBQWtCLENBQUM7QUFFMUIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBR2pELE1BQU0sT0FBTyx5QkFBeUI7SUFDaEI7SUFBcEIsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7SUFFOUMsb0JBQW9CLENBQUMsUUFBc0M7UUFDekQsSUFBSSx1QkFBdUIsR0FBRyxFQUFnQixDQUFDO1FBQy9DLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLHVCQUF1QixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsdUJBQXVCLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsbUVBQW1FO1FBQ25FLE1BQU0sZUFBZSxHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUM5RCxlQUFlLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FDdkQsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FDdEUsZUFBZSxDQUNoQixDQUFDO1FBQ0YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXpDLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxnQkFBd0I7UUFDbkQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDMUQsTUFBTSxRQUFRLEdBQUcsRUFBRTthQUNoQixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEIsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO2FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyw2QkFBNkIsQ0FBQyxRQUFhLEVBQUUsU0FBcUI7UUFDeEUsSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQUU7WUFDbEMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMxQjthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FDN0IsSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FDcEQsQ0FBQztTQUNIO2FBQU0sSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtZQUM1RCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNsQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUM3RCxDQUFDO1NBQ0g7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sa0JBQWtCLENBQUMsUUFBMEI7UUFDbkQsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ2xCLE1BQU0sSUFBSSxzQ0FBc0MsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hFO1lBRUQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDakMsTUFBTSxJQUFJLGdDQUFnQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzRDtpQkFBTTtnQkFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZnIGZyb20gJ2Zhc3QtZ2xvYic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7XG4gIER1cGxpY2F0ZUVudGl0eVBoeXNpY2FsTmFtZUVycm9yLFxuICBFbnRpdHlUYXJnZXQsXG4gIE1pc3NpbmdSZXF1aXJlZEVudGl0eVBoeXNpY2FsTmFtZUVycm9yLFxufSBmcm9tICdAdHlwZWRvcm0vY29tbW9uJztcbmltcG9ydCB7Q29ubmVjdGlvbn0gZnJvbSAnLi9jb25uZWN0aW9uJztcbmltcG9ydCB7RW50aXR5TWV0YWRhdGFCdWlsZGVyfSBmcm9tICcuL2VudGl0eS1tZXRhZGF0YS1idWlsZGVyJztcbmltcG9ydCB7TWV0YWRhdGFNYW5hZ2VyfSBmcm9tICdAdHlwZWRvcm0vY29tbW9uJztcbmltcG9ydCB7RW50aXR5TWV0YWRhdGF9IGZyb20gJy4uL21ldGFkYXRhL2VudGl0eS1tZXRhZGF0YSc7XG5cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uTWV0YWRhdGFCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25uZWN0aW9uOiBDb25uZWN0aW9uKSB7fVxuXG4gIGJ1aWxkRW50aXR5TWV0YWRhdGFzKGVudGl0aWVzOiBFbnRpdHlUYXJnZXQ8YW55PltdIHwgc3RyaW5nKSB7XG4gICAgbGV0IHBvc3NpYmxlRW50aXRpZXNUb0J1aWxkID0gW10gYXMgRnVuY3Rpb25bXTtcbiAgICBpZiAodHlwZW9mIGVudGl0aWVzID09PSAnc3RyaW5nJykge1xuICAgICAgcG9zc2libGVFbnRpdGllc1RvQnVpbGQgPSBbLi4udGhpcy5sb2FkRW50aXRpZXNGcm9tRGlycyhlbnRpdGllcyldO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NzaWJsZUVudGl0aWVzVG9CdWlsZCA9IFsuLi5lbnRpdGllc107XG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIGFsbCBlbnRpdGllcyB0aGF0IGFyZSBub3QgbWFya2VkIHdpdGggYEBFbnRpdHlgIGRlY29yYXRvclxuICAgIGNvbnN0IGVudGl0aWVzVG9CdWlsZCA9IHBvc3NpYmxlRW50aXRpZXNUb0J1aWxkLmZpbHRlcihlbnRpdHkgPT5cbiAgICAgIE1ldGFkYXRhTWFuYWdlci5tZXRhZGF0YVN0b3JhZ2UuaGFzS25vd25FbnRpdHkoZW50aXR5KVxuICAgICk7XG5cbiAgICBjb25zdCBlbnRpdHlNZXRhZGF0YXMgPSBuZXcgRW50aXR5TWV0YWRhdGFCdWlsZGVyKHRoaXMuY29ubmVjdGlvbikuYnVpbGQoXG4gICAgICBlbnRpdGllc1RvQnVpbGRcbiAgICApO1xuICAgIHRoaXMuc2FuaXRpemVEdXBsaWNhdGVzKGVudGl0eU1ldGFkYXRhcyk7XG5cbiAgICByZXR1cm4gZW50aXR5TWV0YWRhdGFzO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkRW50aXRpZXNGcm9tRGlycyhwYXRoTWF0Y2hQYXR0ZXJuOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjbGFzc2VzRGlyZWN0b3J5ID0gcGF0aC5ub3JtYWxpemUocGF0aE1hdGNoUGF0dGVybik7XG4gICAgY29uc3QgYWxsRmlsZXMgPSBmZ1xuICAgICAgLnN5bmMoY2xhc3Nlc0RpcmVjdG9yeSwge1xuICAgICAgICBkb3Q6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5tYXAoZmlsZSA9PiByZXF1aXJlKGZpbGUpKTtcbiAgICByZXR1cm4gdGhpcy5yZWN1cnNpdmVMb2FkTW9kdWxlc0Zyb21GaWxlcyhhbGxGaWxlcywgW10pO1xuICB9XG5cbiAgcHJpdmF0ZSByZWN1cnNpdmVMb2FkTW9kdWxlc0Zyb21GaWxlcyhleHBvcnRlZDogYW55LCBhbGxMb2FkZWQ6IEZ1bmN0aW9uW10pIHtcbiAgICBpZiAodHlwZW9mIGV4cG9ydGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhbGxMb2FkZWQucHVzaChleHBvcnRlZCk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGV4cG9ydGVkKSkge1xuICAgICAgZXhwb3J0ZWQuZm9yRWFjaCgoZmlsZTogYW55KSA9PlxuICAgICAgICB0aGlzLnJlY3Vyc2l2ZUxvYWRNb2R1bGVzRnJvbUZpbGVzKGZpbGUsIGFsbExvYWRlZClcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0ZWQgPT09ICdvYmplY3QnICYmIGV4cG9ydGVkICE9PSBudWxsKSB7XG4gICAgICBPYmplY3Qua2V5cyhleHBvcnRlZCkuZm9yRWFjaChrZXkgPT5cbiAgICAgICAgdGhpcy5yZWN1cnNpdmVMb2FkTW9kdWxlc0Zyb21GaWxlcyhleHBvcnRlZFtrZXldLCBhbGxMb2FkZWQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYWxsTG9hZGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzYW5pdGl6ZUR1cGxpY2F0ZXMobWV0YWRhdGE6IEVudGl0eU1ldGFkYXRhW10pIHtcbiAgICBjb25zdCBjYWNoZTogc3RyaW5nW10gPSBbXTtcbiAgICBtZXRhZGF0YS5mb3JFYWNoKG1ldGFkYXRhID0+IHtcbiAgICAgIGlmICghbWV0YWRhdGEubmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1JlcXVpcmVkRW50aXR5UGh5c2ljYWxOYW1lRXJyb3IobWV0YWRhdGEudGFyZ2V0Lm5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUuaW5jbHVkZXMobWV0YWRhdGEubmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IER1cGxpY2F0ZUVudGl0eVBoeXNpY2FsTmFtZUVycm9yKG1ldGFkYXRhLm5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGUucHVzaChtZXRhZGF0YS5uYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19