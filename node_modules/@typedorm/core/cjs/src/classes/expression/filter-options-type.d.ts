import { ATTRIBUTE_TYPE, FilterType, NonKeyAttributesWithReturnType, RequireOnlyOne, ResolveScalarType } from '@typedorm/common';
type AttributeFilterOptions<Entity, PrimaryKey> = {
    [enKey in keyof Omit<Entity, keyof PrimaryKey>]?: RequireOnlyOne<{
        [key in FilterType.SimpleOperator | Extract<FilterType.FunctionOperator, 'CONTAINS' | 'BEGINS_WITH'>]: ResolveScalarType<Entity[enKey]>;
    } & {
        [key in Extract<FilterType.RangeOperator, 'BETWEEN'>]: [
            ResolveScalarType<Entity[enKey]>,
            ResolveScalarType<Entity[enKey]>
        ];
    } & {
        [key in Extract<FilterType.RangeOperator, 'IN'>]: ResolveScalarType<Entity[enKey]>[];
    } & {
        [key in Extract<FilterType.FunctionOperator, 'ATTRIBUTE_TYPE'>]: ATTRIBUTE_TYPE;
    } & {
        [key in Extract<FilterType.FunctionOperator, 'SIZE'>]: RequireOnlyOne<{
            [key in FilterType.SimpleOperator]: number;
        }>;
    }>;
} | NonKeyAttributesWithReturnType<Entity, PrimaryKey, Extract<FilterType.FunctionOperator, 'ATTRIBUTE_EXISTS' | 'ATTRIBUTE_NOT_EXISTS'>>;
type RecursiveFilterOptions<Entity, PrimaryKey> = {
    [key in Extract<FilterType.LogicalOperator, 'OR' | 'AND'>]: Partial<AttributeFilterOptions<Entity, PrimaryKey> & RecursiveFilterOptions<Entity, PrimaryKey>> | {} extends infer R ? R : never;
} & {
    [key in Extract<FilterType.LogicalOperator, 'NOT'>]: Partial<AttributeFilterOptions<Entity, PrimaryKey> & RecursiveFilterOptions<Entity, PrimaryKey>> | {} extends infer R ? R : never;
} & AttributeFilterOptions<Entity, PrimaryKey>;
export type FilterOptions<Entity, PrimaryKey> = RequireOnlyOne<RecursiveFilterOptions<Entity, PrimaryKey>>;
export {};
