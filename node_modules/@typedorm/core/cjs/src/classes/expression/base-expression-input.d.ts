import { ATTRIBUTE_TYPE, ScalarType, SimpleOperator } from '@typedorm/common';
export declare enum MERGE_STRATEGY {
    AND = "AND",
    OR = "OR"
}
export declare abstract class BaseExpressionInput {
    expression: string;
    protected _names?: {
        [key: string]: any;
    };
    protected _values?: {
        [key: string]: any;
    };
    constructor();
    set names(value: any);
    get names(): any;
    set values(value: any);
    get values(): any;
    protected abstract getExpNameKey(key: string): string;
    protected abstract getExpValueKey(key: string): string;
    protected appendToExpression(segment: string): void;
    protected addExpressionName(name: string): string;
    private innerAddExpressionName;
    protected addExpressionValue(name: string, value: any): string;
    private innerAddExpressionValue;
    merge(condition: BaseExpressionInput, strategy?: MERGE_STRATEGY): this;
    mergeMany<T extends BaseExpressionInput>(inputs: T[], strategy: MERGE_STRATEGY): this;
    /** Use merge instead
     * @deprecated
     */
    and(): this;
    not<T extends BaseExpressionInput>(condition?: T): this;
    /**
     * Use merge instead
     * @deprecated
     */
    or(): this;
    beginsWith(key: string, substring: ScalarType): this;
    contains(key: string, value: ScalarType): this;
    attributeType(key: string, type: ATTRIBUTE_TYPE): this;
    attributeExists(attr: string): this;
    attributeNotExists(attr: string): this;
    equals(key: string, value: ScalarType): this;
    lessThan(key: string, value: ScalarType): this;
    lessThanAndEqualTo(key: string, value: ScalarType): this;
    greaterThan(key: string, value: ScalarType): this;
    greaterThanAndEqualTo(key: string, value: ScalarType): this;
    notEquals(key: string, value: ScalarType): this;
    between(key: string, value: [ScalarType, ScalarType]): this;
    in(key: string, values: ScalarType[]): this;
    size(key: string): this;
    protected addBaseOperator(operator: SimpleOperator, key: string, value: any): this;
    protected getSymbolForOperator(operator: SimpleOperator): string;
    private hasSpaceInLastChar;
}
