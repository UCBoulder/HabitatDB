"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpdate = void 0;
const update_1 = require("./update");
class SetUpdate extends update_1.Update {
    constructor() {
        super(...arguments);
        this.prefix = 'SET';
    }
    /**
     * Support specifying additional arithmetic operations
     */
    setTo(key, value, incrementBy) {
        const arithmeticOperator = incrementBy
            ? this.getSymbolForArithmeticOperator(incrementBy)
            : '';
        const attrExpName = this.addExpressionName(key);
        const attrExpValue = this.addExpressionValue(key, value);
        this.appendToExpression(`${attrExpName} ` +
            `${this.getSymbolForOperator('EQ')} ` +
            // builds exp like #UE_age = #UE_age + :UE_age if incrementBy was provided
            `${arithmeticOperator ? `${attrExpName} ${arithmeticOperator} ` : ''}` +
            `${attrExpValue}`);
        return this;
    }
    setToIfNotExists(key, value, otherKeyAttribute) {
        const attrExpName = this.addExpressionName(key);
        const attrExpValue = this.addExpressionValue(key, value);
        // if no other key is specified, use default value of updating key
        const keyofValueToCheck = otherKeyAttribute
            ? this.addExpressionName(otherKeyAttribute)
            : attrExpName;
        this.appendToExpression(`${attrExpName} ` +
            `${this.getSymbolForOperator('EQ')} ` +
            `if_not_exists(${keyofValueToCheck}, ${attrExpValue})`);
        return this;
    }
    setOrAppendToList(key, value, otherKeyAttribute) {
        const attrExpName = this.addExpressionName(key);
        const attrExpValue = this.addExpressionValue(key, value);
        // if no other key is specified, use default value of updating key
        const keyofValueToAppend = otherKeyAttribute
            ? this.addExpressionName(otherKeyAttribute)
            : attrExpName;
        this.appendToExpression(`${attrExpName} ` +
            `${this.getSymbolForOperator('EQ')} ` +
            `list_append(${keyofValueToAppend}, ${attrExpValue})`);
        return this;
    }
}
exports.SetUpdate = SetUpdate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LXVwZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NsYXNzZXMvZXhwcmVzc2lvbi91cGRhdGUvc2V0LXVwZGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBZ0M7QUFFaEMsTUFBYSxTQUFVLFNBQVEsZUFBTTtJQUFyQzs7UUFDWSxXQUFNLEdBQXNCLEtBQUssQ0FBQztJQStEOUMsQ0FBQztJQTdEQzs7T0FFRztJQUNILEtBQUssQ0FDSCxHQUFXLEVBQ1gsS0FBVSxFQUNWLFdBQTJDO1FBRTNDLE1BQU0sa0JBQWtCLEdBQUcsV0FBVztZQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLFdBQVcsQ0FBQztZQUNsRCxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRVAsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLGtCQUFrQixDQUNyQixHQUFHLFdBQVcsR0FBRztZQUNmLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ3JDLDBFQUEwRTtZQUMxRSxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDdEUsR0FBRyxZQUFZLEVBQUUsQ0FDcEIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGdCQUFnQixDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsaUJBQTBCO1FBQ2xFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXpELGtFQUFrRTtRQUNsRSxNQUFNLGlCQUFpQixHQUFHLGlCQUFpQjtZQUN6QyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDO1lBQzNDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFFaEIsSUFBSSxDQUFDLGtCQUFrQixDQUNyQixHQUFHLFdBQVcsR0FBRztZQUNmLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ3JDLGlCQUFpQixpQkFBaUIsS0FBSyxZQUFZLEdBQUcsQ0FDekQsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGlCQUFpQixDQUNmLEdBQVcsRUFDWCxLQUFtQixFQUNuQixpQkFBMEI7UUFFMUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFekQsa0VBQWtFO1FBQ2xFLE1BQU0sa0JBQWtCLEdBQUcsaUJBQWlCO1lBQzFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUM7WUFDM0MsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUVoQixJQUFJLENBQUMsa0JBQWtCLENBQ3JCLEdBQUcsV0FBVyxHQUFHO1lBQ2YsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFDckMsZUFBZSxrQkFBa0IsS0FBSyxZQUFZLEdBQUcsQ0FDeEQsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBaEVELDhCQWdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VXBkYXRlVHlwZSwgU2NhbGFyVHlwZX0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge1VwZGF0ZX0gZnJvbSAnLi91cGRhdGUnO1xuXG5leHBvcnQgY2xhc3MgU2V0VXBkYXRlIGV4dGVuZHMgVXBkYXRlIHtcbiAgcHJvdGVjdGVkIHByZWZpeDogVXBkYXRlVHlwZS5BY3Rpb24gPSAnU0VUJztcblxuICAvKipcbiAgICogU3VwcG9ydCBzcGVjaWZ5aW5nIGFkZGl0aW9uYWwgYXJpdGhtZXRpYyBvcGVyYXRpb25zXG4gICAqL1xuICBzZXRUbyhcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogYW55LFxuICAgIGluY3JlbWVudEJ5PzogVXBkYXRlVHlwZS5Bcml0aG1ldGljT3BlcmF0b3JcbiAgKTogdGhpcyB7XG4gICAgY29uc3QgYXJpdGhtZXRpY09wZXJhdG9yID0gaW5jcmVtZW50QnlcbiAgICAgID8gdGhpcy5nZXRTeW1ib2xGb3JBcml0aG1ldGljT3BlcmF0b3IoaW5jcmVtZW50QnkpXG4gICAgICA6ICcnO1xuXG4gICAgY29uc3QgYXR0ckV4cE5hbWUgPSB0aGlzLmFkZEV4cHJlc3Npb25OYW1lKGtleSk7XG4gICAgY29uc3QgYXR0ckV4cFZhbHVlID0gdGhpcy5hZGRFeHByZXNzaW9uVmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgdGhpcy5hcHBlbmRUb0V4cHJlc3Npb24oXG4gICAgICBgJHthdHRyRXhwTmFtZX0gYCArXG4gICAgICAgIGAke3RoaXMuZ2V0U3ltYm9sRm9yT3BlcmF0b3IoJ0VRJyl9IGAgK1xuICAgICAgICAvLyBidWlsZHMgZXhwIGxpa2UgI1VFX2FnZSA9ICNVRV9hZ2UgKyA6VUVfYWdlIGlmIGluY3JlbWVudEJ5IHdhcyBwcm92aWRlZFxuICAgICAgICBgJHthcml0aG1ldGljT3BlcmF0b3IgPyBgJHthdHRyRXhwTmFtZX0gJHthcml0aG1ldGljT3BlcmF0b3J9IGAgOiAnJ31gICtcbiAgICAgICAgYCR7YXR0ckV4cFZhbHVlfWBcbiAgICApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0VG9JZk5vdEV4aXN0cyhrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgb3RoZXJLZXlBdHRyaWJ1dGU/OiBzdHJpbmcpOiB0aGlzIHtcbiAgICBjb25zdCBhdHRyRXhwTmFtZSA9IHRoaXMuYWRkRXhwcmVzc2lvbk5hbWUoa2V5KTtcbiAgICBjb25zdCBhdHRyRXhwVmFsdWUgPSB0aGlzLmFkZEV4cHJlc3Npb25WYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIC8vIGlmIG5vIG90aGVyIGtleSBpcyBzcGVjaWZpZWQsIHVzZSBkZWZhdWx0IHZhbHVlIG9mIHVwZGF0aW5nIGtleVxuICAgIGNvbnN0IGtleW9mVmFsdWVUb0NoZWNrID0gb3RoZXJLZXlBdHRyaWJ1dGVcbiAgICAgID8gdGhpcy5hZGRFeHByZXNzaW9uTmFtZShvdGhlcktleUF0dHJpYnV0ZSlcbiAgICAgIDogYXR0ckV4cE5hbWU7XG5cbiAgICB0aGlzLmFwcGVuZFRvRXhwcmVzc2lvbihcbiAgICAgIGAke2F0dHJFeHBOYW1lfSBgICtcbiAgICAgICAgYCR7dGhpcy5nZXRTeW1ib2xGb3JPcGVyYXRvcignRVEnKX0gYCArXG4gICAgICAgIGBpZl9ub3RfZXhpc3RzKCR7a2V5b2ZWYWx1ZVRvQ2hlY2t9LCAke2F0dHJFeHBWYWx1ZX0pYFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRPckFwcGVuZFRvTGlzdChcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogU2NhbGFyVHlwZVtdLFxuICAgIG90aGVyS2V5QXR0cmlidXRlPzogc3RyaW5nXG4gICk6IHRoaXMge1xuICAgIGNvbnN0IGF0dHJFeHBOYW1lID0gdGhpcy5hZGRFeHByZXNzaW9uTmFtZShrZXkpO1xuICAgIGNvbnN0IGF0dHJFeHBWYWx1ZSA9IHRoaXMuYWRkRXhwcmVzc2lvblZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgLy8gaWYgbm8gb3RoZXIga2V5IGlzIHNwZWNpZmllZCwgdXNlIGRlZmF1bHQgdmFsdWUgb2YgdXBkYXRpbmcga2V5XG4gICAgY29uc3Qga2V5b2ZWYWx1ZVRvQXBwZW5kID0gb3RoZXJLZXlBdHRyaWJ1dGVcbiAgICAgID8gdGhpcy5hZGRFeHByZXNzaW9uTmFtZShvdGhlcktleUF0dHJpYnV0ZSlcbiAgICAgIDogYXR0ckV4cE5hbWU7XG5cbiAgICB0aGlzLmFwcGVuZFRvRXhwcmVzc2lvbihcbiAgICAgIGAke2F0dHJFeHBOYW1lfSBgICtcbiAgICAgICAgYCR7dGhpcy5nZXRTeW1ib2xGb3JPcGVyYXRvcignRVEnKX0gYCArXG4gICAgICAgIGBsaXN0X2FwcGVuZCgke2tleW9mVmFsdWVUb0FwcGVuZH0sICR7YXR0ckV4cFZhbHVlfSlgXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19