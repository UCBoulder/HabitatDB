"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteTransaction = void 0;
const transaction_1 = require("./transaction");
class WriteTransaction extends transaction_1.Transaction {
    constructor(
    /** only here for backwards compatibility
     * @deprecated
     * `WriteTransaction` does no longer need the connection object defined
     * at this level, it is now auto inferred by transaction transformer
     */
    connection, 
    /**
     * only here for backwards compatibility
     * @deprecated use `.add` for appending bulk items
     */
    transactionItems) {
        super();
        if (transactionItems && transactionItems.length) {
            throw new Error(`From 1.12.x, appending existing operation to 'WriteTransaction' is not supported. 
        Please use '.add' for appending bulk items.`);
        }
    }
    /**
     * @deprecated use operation specific method or `.add` instead
     */
    chian(chainedItem) {
        return this.add([chainedItem]);
    }
    add(transactionItems) {
        this.items.push(...transactionItems);
        return this;
    }
    addCreateItem(item, options) {
        this.items.push({
            create: {
                item,
                options: options,
            },
        });
        return this;
    }
    addUpdateItem(item, primaryKey, body, options) {
        this.items.push({
            update: {
                item,
                primaryKey,
                body,
                options: options,
            },
        });
        return this;
    }
    addDeleteItem(item, primaryKey, options) {
        this.items.push({
            delete: {
                item,
                primaryKey,
                options: options,
            },
        });
        return this;
    }
}
exports.WriteTransaction = WriteTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGUtdHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jbGFzc2VzL3RyYW5zYWN0aW9uL3dyaXRlLXRyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLCtDQUEwQztBQTJEMUMsTUFBYSxnQkFBaUIsU0FBUSx5QkFFckM7SUFDQztJQUNFOzs7O09BSUc7SUFDSCxVQUF1QjtJQUN2Qjs7O09BR0c7SUFDSCxnQkFBd0Q7UUFFeEQsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtZQUMvQyxNQUFNLElBQUksS0FBSyxDQUNiO29EQUM0QyxDQUM3QyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQ0gsV0FBMkU7UUFFM0UsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBa0QsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELEdBQUcsQ0FBQyxnQkFBdUQ7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FDWCxJQUFZLEVBQ1osT0FBK0M7UUFFL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDZCxNQUFNLEVBQUU7Z0JBQ04sSUFBSTtnQkFDSixPQUFPLEVBQUUsT0FBNkM7YUFDdkQ7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxhQUFhLENBS1gsSUFBMEIsRUFDMUIsVUFBc0IsRUFDdEIsSUFBOEMsRUFDOUMsT0FBK0M7UUFFL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDZCxNQUFNLEVBQUU7Z0JBQ04sSUFBSTtnQkFDSixVQUFVO2dCQUNWLElBQUk7Z0JBQ0osT0FBTyxFQUFFLE9BQTZDO2FBQ3ZEO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYSxDQUNYLElBQTBCLEVBQzFCLFVBQXNCLEVBQ3RCLE9BQStDO1FBRS9DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ2QsTUFBTSxFQUFFO2dCQUNOLElBQUk7Z0JBQ0osVUFBVTtnQkFDVixPQUFPLEVBQUUsT0FBNkM7YUFDdkQ7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQXhGRCw0Q0F3RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VudGl0eVRhcmdldH0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge0Nvbm5lY3Rpb259IGZyb20gJy4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbic7XG5pbXBvcnQge0NvbmRpdGlvbk9wdGlvbnN9IGZyb20gJy4uL2V4cHJlc3Npb24vY29uZGl0aW9uLW9wdGlvbnMtdHlwZSc7XG5pbXBvcnQge1VwZGF0ZUJvZHl9IGZyb20gJy4uL2V4cHJlc3Npb24vdXBkYXRlLWJvZHktdHlwZSc7XG5pbXBvcnQge1RyYW5zYWN0aW9ufSBmcm9tICcuL3RyYW5zYWN0aW9uJztcblxuaW50ZXJmYWNlIFdyaXRlVHJhbnNhY3Rpb25DcmVhdGVPcHRpb25zPEVudGl0eT4ge1xuICAvKipcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG92ZXJ3cml0ZUlmRXhpc3RzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmeSBjb25kaXRpb24gdG8gYXBwbHlcbiAgICovXG4gIHdoZXJlPzogQ29uZGl0aW9uT3B0aW9uczxFbnRpdHk+O1xufVxuZXhwb3J0IGludGVyZmFjZSBXcml0ZVRyYW5zYWN0aW9uQ3JlYXRlPEVudGl0eT4ge1xuICBjcmVhdGU6IHtpdGVtOiBFbnRpdHk7IG9wdGlvbnM/OiBXcml0ZVRyYW5zYWN0aW9uQ3JlYXRlT3B0aW9uczxFbnRpdHk+fTtcbn1cblxuaW50ZXJmYWNlIFdyaXRlVHJhbnNhY3Rpb25VcGRhdGVPcHRpb25zPEVudGl0eT4ge1xuICAvKipcbiAgICogQGRlZmF1bHQgJy4nXG4gICAqL1xuICBuZXN0ZWRLZXlTZXBhcmF0b3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgY29uZGl0aW9uIHRvIGFwcGx5XG4gICAqL1xuICB3aGVyZT86IENvbmRpdGlvbk9wdGlvbnM8RW50aXR5Pjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgV3JpdGVUcmFuc2FjdGlvblVwZGF0ZTxcbiAgRW50aXR5LFxuICBQcmltYXJ5S2V5ID0gUGFydGlhbDxFbnRpdHk+LFxuICBBZGRpdGlvbmFsUHJvcGVydGllcyA9IEVudGl0eVxuPiB7XG4gIHVwZGF0ZToge1xuICAgIGl0ZW06IEVudGl0eVRhcmdldDxFbnRpdHk+O1xuICAgIHByaW1hcnlLZXk6IFByaW1hcnlLZXk7XG4gICAgYm9keTogVXBkYXRlQm9keTxFbnRpdHksIEFkZGl0aW9uYWxQcm9wZXJ0aWVzPjtcbiAgICBvcHRpb25zPzogV3JpdGVUcmFuc2FjdGlvblVwZGF0ZU9wdGlvbnM8RW50aXR5PjtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFdyaXRlVHJhbnNhY3Rpb25EZWxldGVPcHRpb25zPEVudGl0eT4ge1xuICAvKipcbiAgICogU3BlY2lmeSBjb25kaXRpb24gdG8gYXBwbHlcbiAgICovXG4gIHdoZXJlPzogQ29uZGl0aW9uT3B0aW9uczxFbnRpdHk+O1xufVxuZXhwb3J0IGludGVyZmFjZSBXcml0ZVRyYW5zYWN0aW9uRGVsZXRlPEVudGl0eSwgUHJpbWFyeUtleT4ge1xuICBkZWxldGU6IHtcbiAgICBpdGVtOiBFbnRpdHlUYXJnZXQ8RW50aXR5PjtcbiAgICBwcmltYXJ5S2V5OiBQcmltYXJ5S2V5O1xuICAgIG9wdGlvbnM/OiBXcml0ZVRyYW5zYWN0aW9uRGVsZXRlT3B0aW9uczxFbnRpdHk+O1xuICB9O1xufVxuZXhwb3J0IHR5cGUgV3JpdGVUcmFuc2FjdGlvbkl0ZW08RW50aXR5LCBQcmltYXJ5S2V5LCBBZGRpdGlvbmFsUHJvcGVydGllcz4gPVxuICB8IFdyaXRlVHJhbnNhY3Rpb25DcmVhdGU8RW50aXR5PlxuICB8IFdyaXRlVHJhbnNhY3Rpb25VcGRhdGU8RW50aXR5LCBQcmltYXJ5S2V5LCBBZGRpdGlvbmFsUHJvcGVydGllcz5cbiAgfCBXcml0ZVRyYW5zYWN0aW9uRGVsZXRlPEVudGl0eSwgUHJpbWFyeUtleT47XG5cbmV4cG9ydCBjbGFzcyBXcml0ZVRyYW5zYWN0aW9uIGV4dGVuZHMgVHJhbnNhY3Rpb248XG4gIFdyaXRlVHJhbnNhY3Rpb25JdGVtPGFueSwgYW55LCBhbnk+XG4+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIG9ubHkgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIGBXcml0ZVRyYW5zYWN0aW9uYCBkb2VzIG5vIGxvbmdlciBuZWVkIHRoZSBjb25uZWN0aW9uIG9iamVjdCBkZWZpbmVkXG4gICAgICogYXQgdGhpcyBsZXZlbCwgaXQgaXMgbm93IGF1dG8gaW5mZXJyZWQgYnkgdHJhbnNhY3Rpb24gdHJhbnNmb3JtZXJcbiAgICAgKi9cbiAgICBjb25uZWN0aW9uPzogQ29ubmVjdGlvbixcbiAgICAvKipcbiAgICAgKiBvbmx5IGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGAuYWRkYCBmb3IgYXBwZW5kaW5nIGJ1bGsgaXRlbXNcbiAgICAgKi9cbiAgICB0cmFuc2FjdGlvbkl0ZW1zPzogV3JpdGVUcmFuc2FjdGlvbkl0ZW08YW55LCBhbnksIGFueT5bXVxuICApIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uSXRlbXMgJiYgdHJhbnNhY3Rpb25JdGVtcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEZyb20gMS4xMi54LCBhcHBlbmRpbmcgZXhpc3Rpbmcgb3BlcmF0aW9uIHRvICdXcml0ZVRyYW5zYWN0aW9uJyBpcyBub3Qgc3VwcG9ydGVkLiBcbiAgICAgICAgUGxlYXNlIHVzZSAnLmFkZCcgZm9yIGFwcGVuZGluZyBidWxrIGl0ZW1zLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBvcGVyYXRpb24gc3BlY2lmaWMgbWV0aG9kIG9yIGAuYWRkYCBpbnN0ZWFkXG4gICAqL1xuICBjaGlhbjxFbnRpdHksIFByaW1hcnlLZXksIEFkZGl0aW9uYWxQcm9wZXJ0aWVzID0ge30+KFxuICAgIGNoYWluZWRJdGVtOiBXcml0ZVRyYW5zYWN0aW9uSXRlbTxFbnRpdHksIFByaW1hcnlLZXksIEFkZGl0aW9uYWxQcm9wZXJ0aWVzPlxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcy5hZGQoW2NoYWluZWRJdGVtIGFzIFdyaXRlVHJhbnNhY3Rpb25JdGVtPGFueSwgYW55LCBhbnk+XSk7XG4gIH1cblxuICBhZGQodHJhbnNhY3Rpb25JdGVtczogV3JpdGVUcmFuc2FjdGlvbkl0ZW08YW55LCBhbnksIGFueT5bXSk6IHRoaXMge1xuICAgIHRoaXMuaXRlbXMucHVzaCguLi50cmFuc2FjdGlvbkl0ZW1zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZENyZWF0ZUl0ZW08RW50aXR5PihcbiAgICBpdGVtOiBFbnRpdHksXG4gICAgb3B0aW9ucz86IFdyaXRlVHJhbnNhY3Rpb25DcmVhdGVPcHRpb25zPEVudGl0eT5cbiAgKTogdGhpcyB7XG4gICAgdGhpcy5pdGVtcy5wdXNoKHtcbiAgICAgIGNyZWF0ZToge1xuICAgICAgICBpdGVtLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zIGFzIFdyaXRlVHJhbnNhY3Rpb25DcmVhdGVPcHRpb25zPGFueT4sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkVXBkYXRlSXRlbTxcbiAgICBFbnRpdHksXG4gICAgUHJpbWFyeUtleSA9IFBhcnRpYWw8RW50aXR5PixcbiAgICBBZGRpdGlvbmFsUHJvcGVydGllcyA9IEVudGl0eVxuICA+KFxuICAgIGl0ZW06IEVudGl0eVRhcmdldDxFbnRpdHk+LFxuICAgIHByaW1hcnlLZXk6IFByaW1hcnlLZXksXG4gICAgYm9keTogVXBkYXRlQm9keTxFbnRpdHksIEFkZGl0aW9uYWxQcm9wZXJ0aWVzPixcbiAgICBvcHRpb25zPzogV3JpdGVUcmFuc2FjdGlvblVwZGF0ZU9wdGlvbnM8RW50aXR5PlxuICApOiB0aGlzIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goe1xuICAgICAgdXBkYXRlOiB7XG4gICAgICAgIGl0ZW0sXG4gICAgICAgIHByaW1hcnlLZXksXG4gICAgICAgIGJvZHksXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMgYXMgV3JpdGVUcmFuc2FjdGlvblVwZGF0ZU9wdGlvbnM8YW55PixcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGREZWxldGVJdGVtPEVudGl0eSwgUHJpbWFyeUtleSA9IFBhcnRpYWw8RW50aXR5Pj4oXG4gICAgaXRlbTogRW50aXR5VGFyZ2V0PEVudGl0eT4sXG4gICAgcHJpbWFyeUtleTogUHJpbWFyeUtleSxcbiAgICBvcHRpb25zPzogV3JpdGVUcmFuc2FjdGlvbkRlbGV0ZU9wdGlvbnM8RW50aXR5PlxuICApOiB0aGlzIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goe1xuICAgICAgZGVsZXRlOiB7XG4gICAgICAgIGl0ZW0sXG4gICAgICAgIHByaW1hcnlLZXksXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMgYXMgV3JpdGVUcmFuc2FjdGlvbkRlbGV0ZU9wdGlvbnM8YW55PixcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==