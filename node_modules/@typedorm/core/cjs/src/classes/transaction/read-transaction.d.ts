import { EntityTarget } from '@typedorm/common';
import { ProjectionKeys } from '../expression/projection-keys-options-type';
import { Transaction } from './transaction';
interface ReadTransactionGetItemOptions<Entity> {
    /**
     * Specifies which attributes to fetch
     * @default all attributes are fetched
     */
    select?: ProjectionKeys<Entity>;
}
export interface ReadTransactionGet<Entity, PrimaryKeyAttributes = Partial<Entity>> {
    get: {
        item: EntityTarget<Entity>;
        primaryKey: PrimaryKeyAttributes;
        options?: ReadTransactionGetItemOptions<Entity>;
    };
}
export type ReadTransactionItem<Entity, PrimaryKey> = ReadTransactionGet<Entity, PrimaryKey>;
export declare class ReadTransaction extends Transaction<ReadTransactionItem<any, any>> {
    constructor();
    add(transactionItems: ReadTransactionItem<any, any>[]): this;
    addGetItem<Entity, PrimaryKeyAttributes = Partial<Entity>>(item: EntityTarget<Entity>, primaryKey: PrimaryKeyAttributes, options?: ReadTransactionGetItemOptions<Entity>): this;
}
export {};
