"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransformer = void 0;
const common_1 = require("@typedorm/common");
const get_constructor_for_instance_1 = require("../../helpers/get-constructor-for-instance");
const is_empty_object_1 = require("../../helpers/is-empty-object");
const is_scalar_type_1 = require("../../helpers/is-scalar-type");
const parse_key_1 = require("../../helpers/parse-key");
const auto_generated_attribute_metadata_1 = require("../metadata/auto-generated-attribute-metadata");
const is_dynamo_entity_key_schema_1 = require("../../helpers/is-dynamo-entity-key-schema");
const is_key_of_type_alias_schema_1 = require("../../helpers/is-key-of-type-alias-schema");
const class_transformer_1 = require("class-transformer");
const expression_input_parser_1 = require("../expression/expression-input-parser");
class BaseTransformer {
    constructor(connection) {
        this.connection = connection;
        this._expressionInputParser = new expression_input_parser_1.ExpressionInputParser();
    }
    /**
     * Returns table name decorated for given entity class
     * @param entityClass Entity Class
     */
    getTableNameForEntity(entityClass) {
        const entityMetadata = this.connection.getEntityByTarget(entityClass);
        return entityMetadata.table.name;
    }
    applyClassTransformerFormations(entity) {
        const transformedPlainEntity = (0, class_transformer_1.classToPlain)(entity, {
            enableImplicitConversion: true,
            excludePrefixes: ['__'], // exclude internal attributes
        });
        return transformedPlainEntity;
    }
    /**
     * Transforms entity to dynamo db entity schema
     * @param entity Entity to transform to DynamoDB entity type
     */
    toDynamoEntity(entity) {
        var _a;
        const entityClass = (0, get_constructor_for_instance_1.getConstructorForInstance)(entity);
        // retrieve metadata and parse it to schema
        const entityMetadata = this.connection.getEntityByTarget(entityClass);
        this.connection.getAttributesForEntity(entityClass).forEach(attr => {
            // if no explicit value was provided, look for default/autoGenerate values
            if (!Object.keys(entity).includes(attr.name)) {
                //  auto populate generated values
                if ((0, auto_generated_attribute_metadata_1.IsAutoGeneratedAttributeMetadata)(attr)) {
                    entity = Object.assign(entity, {
                        [attr.name]: attr.value,
                    });
                }
                const attributeDefaultValue = attr === null || attr === void 0 ? void 0 : attr.default;
                // include attribute with default value
                if (attributeDefaultValue &&
                    typeof attributeDefaultValue === 'function') {
                    const attrDefaultValue = attributeDefaultValue(entity);
                    entity = Object.assign(entity, {
                        [attr.name]: attrDefaultValue,
                    });
                }
            }
        });
        // pass through entity to class transformer to have all the metadata applied
        const parsedEntity = this.applyClassTransformerFormations(entity);
        const parsedPrimaryKey = this.recursiveParseEntity(entityMetadata.schema.primaryKey.attributes, parsedEntity);
        const indexesToParse = (_a = entityMetadata.schema.indexes) !== null && _a !== void 0 ? _a : {};
        const rawParsedIndexes = this.recursiveParseEntity(indexesToParse, parsedEntity);
        const parsedIndexes = Object.keys(rawParsedIndexes).reduce((acc, currIndexKey) => {
            const { metadata, attributes } = indexesToParse[currIndexKey];
            const currentParsedIndex = rawParsedIndexes[currIndexKey];
            // validate if there are any duplicated attribute names
            Object.keys(currentParsedIndex).forEach(attr => {
                if (acc[attr]) {
                    throw new Error(`Failed to parse entity "${entityMetadata.name}", duplicate attribute "${attr}".`);
                }
            });
            // if current index marked as sparse and one or more attribute is missing value, do not add it to schema
            if (metadata.isSparse) {
                const doesAllAttributesHaveValue = Object.keys(attributes).every(attr => {
                    if (!currentParsedIndex[attr]) {
                        return false;
                    }
                    return true;
                });
                if (!doesAllAttributesHaveValue) {
                    return acc;
                }
            }
            acc = Object.assign(Object.assign({}, acc), currentParsedIndex);
            return acc;
        }, {});
        // clone and cleanup any redundant keys
        const formattedSchema = Object.assign(Object.assign({}, parsedPrimaryKey), parsedIndexes);
        return Object.assign(Object.assign({}, parsedEntity), formattedSchema);
    }
    getAffectedPrimaryKeyAttributes(entityClass, attributes, attributesTypeMetadata, options) {
        const { schema: { primaryKey }, } = this.connection.getEntityByTarget(entityClass);
        const interpolations = primaryKey.metadata._interpolations;
        // if none of partition or sort key has any referenced attributes, return
        if (!interpolations || (0, is_empty_object_1.isEmptyObject)(interpolations)) {
            return;
        }
        const affectedKeyAttributes = Object.entries(attributes).reduce((acc, [attrKey, attrValue]) => {
            // bail early if current attribute type is not of type scalar
            if (!(0, is_scalar_type_1.isScalarType)(attrValue)) {
                return acc;
            }
            // resolve all interpolations
            Object.entries(interpolations).forEach(([primaryKeyAttrName, primaryKeyAttrRefs]) => {
                // if no attributes are referenced for current primary key attribute, return
                if (!primaryKeyAttrRefs.includes(attrKey)) {
                    return;
                }
                // if parsed value was of type we can not auto resolve indexes
                // this must be resolved by the dev
                if (attributesTypeMetadata[attrKey] === 'dynamic') {
                    throw new common_1.InvalidDynamicUpdateAttributeValueError(attrKey, attrValue);
                }
                const parsedKey = (0, parse_key_1.parseKey)(primaryKey.attributes[primaryKeyAttrName], Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.additionalAttributesDict), attributes));
                acc[primaryKeyAttrName] = parsedKey;
            });
            return acc;
        }, {});
        return affectedKeyAttributes;
    }
    /**
     * Returns all affected indexes for given attributes
     * @param entityClass Entity class
     * @param attributes Attributes to check affected indexes for
     * @param options
     */
    getAffectedIndexesForAttributes(entityClass, attributes, attributesTypeMetadata, options) {
        var _a;
        const nestedKeySeparator = (_a = options === null || options === void 0 ? void 0 : options.nestedKeySeparator) !== null && _a !== void 0 ? _a : '.';
        const { schema: { indexes }, } = this.connection.getEntityByTarget(entityClass);
        const affectedIndexes = Object.entries(attributes).reduce((acc, [attrKey, currAttrValue]) => {
            // if current value is not of scalar type skip checking index
            if (attrKey.includes(nestedKeySeparator) ||
                !(0, is_scalar_type_1.isScalarType)(currAttrValue)) {
                return acc;
            }
            if (!indexes) {
                return acc;
            }
            Object.keys(indexes).forEach(key => {
                var _a;
                const currIndex = indexes[key];
                const interpolationsForCurrIndex = (_a = currIndex.metadata._interpolations) !== null && _a !== void 0 ? _a : {};
                // if current index does not have any interpolations to resolve, move onto next one
                if ((0, is_empty_object_1.isEmptyObject)(interpolationsForCurrIndex)) {
                    return acc;
                }
                // check if attribute we are looking to update is referenced by any index
                Object.keys(interpolationsForCurrIndex).forEach(interpolationKey => {
                    const currentInterpolation = interpolationsForCurrIndex[interpolationKey];
                    if (currentInterpolation.includes(attrKey)) {
                        // if parsed value was of type we can not auto resolve indexes
                        // this must be resolved by the dev
                        if (attributesTypeMetadata[attrKey] === 'dynamic') {
                            throw new common_1.InvalidDynamicUpdateAttributeValueError(attrKey, currAttrValue);
                        }
                        try {
                            const parsedIndex = (0, parse_key_1.parseKey)(currIndex.attributes[interpolationKey], Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.additionalAttributesDict), attributes));
                            acc[interpolationKey] = parsedIndex;
                        }
                        catch (err) {
                            // if there was an error parsing sparse index, ignore
                            if (!(err instanceof common_1.SparseIndexParseError)) {
                                throw err;
                            }
                        }
                    }
                });
            });
            return acc;
        }, {});
        return affectedIndexes;
    }
    /**
     * Returns a primary key of an entity
     * @param entityClass Class of entity
     * @param attributes Attributes to parse into primary key
     */
    getParsedPrimaryKey(table, primaryKey, attributes) {
        return this.recursiveParseEntity(primaryKey.attributes, attributes);
    }
    /**
     * Recursively parses all keys of given object and replaces placeholders with matching values
     * @private
     * @param schema schema to resolve
     * @param entity entity to resolve schema against
     */
    recursiveParseEntity(schema, entity, isSparse = false) {
        const parsedSchema = Object.keys(schema).reduce((acc, key) => {
            var _a;
            const currentValue = schema[key];
            if (typeof currentValue === 'string' ||
                (0, is_key_of_type_alias_schema_1.isKeyOfTypeAliasSchema)(currentValue)) {
                try {
                    acc[key] = (0, parse_key_1.parseKey)(currentValue, entity, {
                        isSparseIndex: isSparse,
                    });
                }
                catch (err) {
                    // if there was an error parsing sparse index, ignore
                    if (!(err instanceof common_1.SparseIndexParseError)) {
                        throw err;
                    }
                }
            }
            else if ((0, is_dynamo_entity_key_schema_1.isDynamoEntityKeySchema)(currentValue)) {
                acc[key] = this.recursiveParseEntity(currentValue.attributes, entity, !!((_a = currentValue.metadata) === null || _a === void 0 ? void 0 : _a.isSparse));
            }
            else {
                acc[key] = this.recursiveParseEntity(currentValue, entity);
            }
            return acc;
        }, {});
        return parsedSchema;
    }
}
exports.BaseTransformer = BaseTransformer;
//# sourceMappingURL=data:application/json;base64,