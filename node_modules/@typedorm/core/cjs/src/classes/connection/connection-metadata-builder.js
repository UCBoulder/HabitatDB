"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionMetadataBuilder = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const path_1 = __importDefault(require("path"));
const common_1 = require("@typedorm/common");
const entity_metadata_builder_1 = require("./entity-metadata-builder");
const common_2 = require("@typedorm/common");
class ConnectionMetadataBuilder {
    constructor(connection) {
        this.connection = connection;
    }
    buildEntityMetadatas(entities) {
        let possibleEntitiesToBuild = [];
        if (typeof entities === 'string') {
            possibleEntitiesToBuild = [...this.loadEntitiesFromDirs(entities)];
        }
        else {
            possibleEntitiesToBuild = [...entities];
        }
        // filter all entities that are not marked with `@Entity` decorator
        const entitiesToBuild = possibleEntitiesToBuild.filter(entity => common_2.MetadataManager.metadataStorage.hasKnownEntity(entity));
        const entityMetadatas = new entity_metadata_builder_1.EntityMetadataBuilder(this.connection).build(entitiesToBuild);
        this.sanitizeDuplicates(entityMetadatas);
        return entityMetadatas;
    }
    loadEntitiesFromDirs(pathMatchPattern) {
        const classesDirectory = path_1.default.normalize(pathMatchPattern);
        const allFiles = fast_glob_1.default
            .sync(classesDirectory, {
            dot: false,
        })
            .map(file => require(file));
        return this.recursiveLoadModulesFromFiles(allFiles, []);
    }
    recursiveLoadModulesFromFiles(exported, allLoaded) {
        if (typeof exported === 'function') {
            allLoaded.push(exported);
        }
        else if (Array.isArray(exported)) {
            exported.forEach((file) => this.recursiveLoadModulesFromFiles(file, allLoaded));
        }
        else if (typeof exported === 'object' && exported !== null) {
            Object.keys(exported).forEach(key => this.recursiveLoadModulesFromFiles(exported[key], allLoaded));
        }
        return allLoaded;
    }
    sanitizeDuplicates(metadata) {
        const cache = [];
        metadata.forEach(metadata => {
            if (!metadata.name) {
                throw new common_1.MissingRequiredEntityPhysicalNameError(metadata.target.name);
            }
            if (cache.includes(metadata.name)) {
                throw new common_1.DuplicateEntityPhysicalNameError(metadata.name);
            }
            else {
                cache.push(metadata.name);
            }
        });
    }
}
exports.ConnectionMetadataBuilder = ConnectionMetadataBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbi1tZXRhZGF0YS1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY2xhc3Nlcy9jb25uZWN0aW9uL2Nvbm5lY3Rpb24tbWV0YWRhdGEtYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwwREFBMkI7QUFDM0IsZ0RBQXdCO0FBQ3hCLDZDQUkwQjtBQUUxQix1RUFBZ0U7QUFDaEUsNkNBQWlEO0FBR2pELE1BQWEseUJBQXlCO0lBQ3BDLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDO0lBRTlDLG9CQUFvQixDQUFDLFFBQXNDO1FBQ3pELElBQUksdUJBQXVCLEdBQUcsRUFBZ0IsQ0FBQztRQUMvQyxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyx1QkFBdUIsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDcEU7YUFBTTtZQUNMLHVCQUF1QixHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztTQUN6QztRQUVELG1FQUFtRTtRQUNuRSxNQUFNLGVBQWUsR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FDOUQsd0JBQWUsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUN2RCxDQUFDO1FBRUYsTUFBTSxlQUFlLEdBQUcsSUFBSSwrQ0FBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUN0RSxlQUFlLENBQ2hCLENBQUM7UUFDRixJQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFekMsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVPLG9CQUFvQixDQUFDLGdCQUF3QjtRQUNuRCxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMxRCxNQUFNLFFBQVEsR0FBRyxtQkFBRTthQUNoQixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEIsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO2FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyw2QkFBNkIsQ0FBQyxRQUFhLEVBQUUsU0FBcUI7UUFDeEUsSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQUU7WUFDbEMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMxQjthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FDN0IsSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FDcEQsQ0FBQztTQUNIO2FBQU0sSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtZQUM1RCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNsQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUM3RCxDQUFDO1NBQ0g7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sa0JBQWtCLENBQUMsUUFBMEI7UUFDbkQsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ2xCLE1BQU0sSUFBSSwrQ0FBc0MsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hFO1lBRUQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDakMsTUFBTSxJQUFJLHlDQUFnQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzRDtpQkFBTTtnQkFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBL0RELDhEQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmZyBmcm9tICdmYXN0LWdsb2InO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge1xuICBEdXBsaWNhdGVFbnRpdHlQaHlzaWNhbE5hbWVFcnJvcixcbiAgRW50aXR5VGFyZ2V0LFxuICBNaXNzaW5nUmVxdWlyZWRFbnRpdHlQaHlzaWNhbE5hbWVFcnJvcixcbn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge0Nvbm5lY3Rpb259IGZyb20gJy4vY29ubmVjdGlvbic7XG5pbXBvcnQge0VudGl0eU1ldGFkYXRhQnVpbGRlcn0gZnJvbSAnLi9lbnRpdHktbWV0YWRhdGEtYnVpbGRlcic7XG5pbXBvcnQge01ldGFkYXRhTWFuYWdlcn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge0VudGl0eU1ldGFkYXRhfSBmcm9tICcuLi9tZXRhZGF0YS9lbnRpdHktbWV0YWRhdGEnO1xuXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvbk1ldGFkYXRhQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29ubmVjdGlvbjogQ29ubmVjdGlvbikge31cblxuICBidWlsZEVudGl0eU1ldGFkYXRhcyhlbnRpdGllczogRW50aXR5VGFyZ2V0PGFueT5bXSB8IHN0cmluZykge1xuICAgIGxldCBwb3NzaWJsZUVudGl0aWVzVG9CdWlsZCA9IFtdIGFzIEZ1bmN0aW9uW107XG4gICAgaWYgKHR5cGVvZiBlbnRpdGllcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBvc3NpYmxlRW50aXRpZXNUb0J1aWxkID0gWy4uLnRoaXMubG9hZEVudGl0aWVzRnJvbURpcnMoZW50aXRpZXMpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zc2libGVFbnRpdGllc1RvQnVpbGQgPSBbLi4uZW50aXRpZXNdO1xuICAgIH1cblxuICAgIC8vIGZpbHRlciBhbGwgZW50aXRpZXMgdGhhdCBhcmUgbm90IG1hcmtlZCB3aXRoIGBARW50aXR5YCBkZWNvcmF0b3JcbiAgICBjb25zdCBlbnRpdGllc1RvQnVpbGQgPSBwb3NzaWJsZUVudGl0aWVzVG9CdWlsZC5maWx0ZXIoZW50aXR5ID0+XG4gICAgICBNZXRhZGF0YU1hbmFnZXIubWV0YWRhdGFTdG9yYWdlLmhhc0tub3duRW50aXR5KGVudGl0eSlcbiAgICApO1xuXG4gICAgY29uc3QgZW50aXR5TWV0YWRhdGFzID0gbmV3IEVudGl0eU1ldGFkYXRhQnVpbGRlcih0aGlzLmNvbm5lY3Rpb24pLmJ1aWxkKFxuICAgICAgZW50aXRpZXNUb0J1aWxkXG4gICAgKTtcbiAgICB0aGlzLnNhbml0aXplRHVwbGljYXRlcyhlbnRpdHlNZXRhZGF0YXMpO1xuXG4gICAgcmV0dXJuIGVudGl0eU1ldGFkYXRhcztcbiAgfVxuXG4gIHByaXZhdGUgbG9hZEVudGl0aWVzRnJvbURpcnMocGF0aE1hdGNoUGF0dGVybjogc3RyaW5nKSB7XG4gICAgY29uc3QgY2xhc3Nlc0RpcmVjdG9yeSA9IHBhdGgubm9ybWFsaXplKHBhdGhNYXRjaFBhdHRlcm4pO1xuICAgIGNvbnN0IGFsbEZpbGVzID0gZmdcbiAgICAgIC5zeW5jKGNsYXNzZXNEaXJlY3RvcnksIHtcbiAgICAgICAgZG90OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAubWFwKGZpbGUgPT4gcmVxdWlyZShmaWxlKSk7XG4gICAgcmV0dXJuIHRoaXMucmVjdXJzaXZlTG9hZE1vZHVsZXNGcm9tRmlsZXMoYWxsRmlsZXMsIFtdKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVjdXJzaXZlTG9hZE1vZHVsZXNGcm9tRmlsZXMoZXhwb3J0ZWQ6IGFueSwgYWxsTG9hZGVkOiBGdW5jdGlvbltdKSB7XG4gICAgaWYgKHR5cGVvZiBleHBvcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWxsTG9hZGVkLnB1c2goZXhwb3J0ZWQpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShleHBvcnRlZCkpIHtcbiAgICAgIGV4cG9ydGVkLmZvckVhY2goKGZpbGU6IGFueSkgPT5cbiAgICAgICAgdGhpcy5yZWN1cnNpdmVMb2FkTW9kdWxlc0Zyb21GaWxlcyhmaWxlLCBhbGxMb2FkZWQpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydGVkID09PSAnb2JqZWN0JyAmJiBleHBvcnRlZCAhPT0gbnVsbCkge1xuICAgICAgT2JqZWN0LmtleXMoZXhwb3J0ZWQpLmZvckVhY2goa2V5ID0+XG4gICAgICAgIHRoaXMucmVjdXJzaXZlTG9hZE1vZHVsZXNGcm9tRmlsZXMoZXhwb3J0ZWRba2V5XSwgYWxsTG9hZGVkKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbExvYWRlZDtcbiAgfVxuXG4gIHByaXZhdGUgc2FuaXRpemVEdXBsaWNhdGVzKG1ldGFkYXRhOiBFbnRpdHlNZXRhZGF0YVtdKSB7XG4gICAgY29uc3QgY2FjaGU6IHN0cmluZ1tdID0gW107XG4gICAgbWV0YWRhdGEuZm9yRWFjaChtZXRhZGF0YSA9PiB7XG4gICAgICBpZiAoIW1ldGFkYXRhLm5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdSZXF1aXJlZEVudGl0eVBoeXNpY2FsTmFtZUVycm9yKG1ldGFkYXRhLnRhcmdldC5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlLmluY2x1ZGVzKG1ldGFkYXRhLm5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBEdXBsaWNhdGVFbnRpdHlQaHlzaWNhbE5hbWVFcnJvcihtZXRhZGF0YS5uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlLnB1c2gobWV0YWRhdGEubmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==