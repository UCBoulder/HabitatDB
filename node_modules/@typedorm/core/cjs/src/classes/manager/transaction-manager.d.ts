import { DocumentClientTypes } from '@typedorm/document-client';
import { WriteTransaction } from './../transaction/write-transaction';
import { Connection } from '../connection/connection';
import { ReadTransaction } from '../transaction/read-transaction';
import { MetadataOptions } from '../transformer/base-transformer';
export declare class TransactionManager {
    private connection;
    private _dcTransactionTransformer;
    constructor(connection: Connection);
    /**
     * Processes transactions over document client's transaction api
     * @param transaction Write transaction to process
     */
    write(transaction: WriteTransaction, metadataOptions?: MetadataOptions): Promise<{
        success: boolean;
    }>;
    /**
     * Processes transactions over document client's transaction api
     * @param transaction read transaction to process
     */
    read(transaction: ReadTransaction, metadataOptions?: MetadataOptions): Promise<any[]>;
    /**
     * Perhaps, you are looking for ".write" instead.
     *
     * Writes items to dynamodb over document client's transact write API without performing any pre transforming
     * You would almost never need to use this.
     */
    writeRaw(transactItems: DocumentClientTypes.TransactWriteItem[], metadataOptions: MetadataOptions): Promise<{
        success: boolean;
    }>;
}
