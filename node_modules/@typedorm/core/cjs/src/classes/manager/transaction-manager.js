"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionManager = void 0;
const document_client_transaction_transformer_1 = require("../transformer/document-client-transaction-transformer");
const common_1 = require("@typedorm/common");
const get_unique_request_id_1 = require("../../helpers/get-unique-request-id");
class TransactionManager {
    constructor(connection) {
        this.connection = connection;
        this._dcTransactionTransformer = new document_client_transaction_transformer_1.DocumentClientTransactionTransformer(connection);
    }
    /**
     * Processes transactions over document client's transaction api
     * @param transaction Write transaction to process
     */
    write(transaction, metadataOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            const { transactionItemList, lazyTransactionWriteItemListLoader } = this._dcTransactionTransformer.toDynamoWriteTransactionItems(transaction, {
                requestId,
            });
            this.connection.logger.logInfo({
                requestId,
                scope: common_1.MANAGER_NAME.TRANSACTION_MANAGER,
                log: `Requested to write transaction for total ${transaction.items.length} items.`,
            });
            const lazyTransactionItems = (yield Promise.all(lazyTransactionWriteItemListLoader.map((item) => __awaiter(this, void 0, void 0, function* () {
                // if updating/removing unique attribute in transaction, get previous value of attributes
                const existingItem = yield this.connection.entityManager.findOne(item.entityClass, item.primaryKeyAttributes, undefined, {
                    requestId,
                    returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                });
                return item.lazyLoadTransactionWriteItems(existingItem);
            })))).flat();
            const itemsToWriteInTransaction = [
                ...transactionItemList,
                ...lazyTransactionItems,
            ];
            if (itemsToWriteInTransaction.length > common_1.TRANSACTION_WRITE_ITEMS_LIMIT) {
                throw new common_1.WriteTransactionItemLimitExceededError(transaction.items.length, itemsToWriteInTransaction.length);
            }
            if (itemsToWriteInTransaction.length > transaction.items.length) {
                this.connection.logger.logInfo({
                    requestId,
                    scope: common_1.MANAGER_NAME.TRANSACTION_MANAGER,
                    log: `Original items count ${transaction.items.length} expanded 
        to ${itemsToWriteInTransaction.length} to accommodate unique attributes.`,
                });
            }
            return this.writeRaw(itemsToWriteInTransaction, {
                requestId,
                returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            });
        });
    }
    /**
     * Processes transactions over document client's transaction api
     * @param transaction read transaction to process
     */
    read(transaction, metadataOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            const { transactionItemList } = this._dcTransactionTransformer.toDynamoReadTransactionItems(transaction, {
                requestId,
            });
            if (transactionItemList.length > common_1.TRANSACTION_READ_ITEMS_LIMIT) {
                throw new common_1.ReadTransactionItemLimitExceededError(transactionItemList.length);
            }
            this.connection.logger.logInfo({
                requestId,
                scope: common_1.MANAGER_NAME.TRANSACTION_MANAGER,
                log: `Running a transaction read ${transactionItemList.length} items..`,
            });
            const transactionInput = {
                TransactItems: transactionItemList,
                ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            };
            const response = yield this.connection.documentClient.transactGet(transactionInput);
            // log stats
            if (response === null || response === void 0 ? void 0 : response.ConsumedCapacity) {
                this.connection.logger.logStats({
                    requestId,
                    scope: common_1.MANAGER_NAME.TRANSACTION_MANAGER,
                    statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                    consumedCapacityData: response.ConsumedCapacity,
                });
            }
            // Items are always returned in the same as they were requested.
            // An ordered array of up to 25 ItemResponse objects, each of which corresponds to the
            // TransactGetItem object in the same position in the TransactItems array
            return (_a = response.Responses) === null || _a === void 0 ? void 0 : _a.map((response, index) => {
                if (!response.Item) {
                    // If a requested item could not be retrieved, the corresponding ItemResponse object is Null,
                    return null;
                }
                const originalRequest = transaction.items[index];
                return this._dcTransactionTransformer.fromDynamoEntity(originalRequest.get.item, response.Item, {
                    requestId,
                });
            });
        });
    }
    /**
     * Perhaps, you are looking for ".write" instead.
     *
     * Writes items to dynamodb over document client's transact write API without performing any pre transforming
     * You would almost never need to use this.
     */
    writeRaw(transactItems, metadataOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const transactionInput = {
                TransactItems: transactItems,
                ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            };
            this.connection.logger.logInfo({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                scope: common_1.MANAGER_NAME.TRANSACTION_MANAGER,
                log: `Running a transaction write request for ${transactItems.length} items.`,
            });
            const response = yield this.connection.documentClient.transactWrite(transactionInput);
            // log stats
            if (response === null || response === void 0 ? void 0 : response.ConsumedCapacity) {
                this.connection.logger.logStats({
                    requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                    scope: common_1.MANAGER_NAME.TRANSACTION_MANAGER,
                    statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                    consumedCapacityData: response.ConsumedCapacity,
                });
            }
            // return success when successfully processed all items in a transaction
            return { success: true };
        });
    }
}
exports.TransactionManager = TransactionManager;
//# sourceMappingURL=data:application/json;base64,