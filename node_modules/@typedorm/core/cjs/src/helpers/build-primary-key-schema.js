"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPrimaryKeySchema = void 0;
const common_1 = require("@typedorm/common");
const get_interpolated_keys_1 = require("./get-interpolated-keys");
const validate_key_1 = require("./validate-key");
function buildPrimaryKeySchema({ table, primaryKey, attributes, }) {
    var _a;
    const partitionKeyInterpolations = (0, get_interpolated_keys_1.getInterpolatedKeys)(primaryKey.partitionKey);
    const tablePartitionKeyName = table.partitionKey;
    if ((0, common_1.IsCompositePrimaryKey)(primaryKey)) {
        // validate primary key signature
        if (!table.usesCompositeKey()) {
            throw new Error(`Table "${table.name}" does not use composite key, thus sort key "${primaryKey.sortKey}" should not exist.`);
        }
        (0, validate_key_1.validateKey)(primaryKey.partitionKey, attributes);
        (0, validate_key_1.validateKey)(primaryKey.sortKey, attributes);
        // build primary key
        const tableSortKeyName = (_a = table.sortKey) !== null && _a !== void 0 ? _a : '';
        const sortKeyInterpolations = (0, get_interpolated_keys_1.getInterpolatedKeys)(primaryKey.sortKey);
        return {
            attributes: {
                [tablePartitionKeyName]: primaryKey.partitionKey,
                [tableSortKeyName]: primaryKey.sortKey,
            },
            metadata: {
                _interpolations: {
                    [tablePartitionKeyName]: partitionKeyInterpolations,
                    [tableSortKeyName]: sortKeyInterpolations,
                },
            },
        };
        // when current primary key is a simple key
    }
    else {
        // validate signature
        if (table.usesCompositeKey()) {
            throw new Error(`Table "${table.name}" uses composite key as a primary key, thus sort key is required`);
        }
        (0, validate_key_1.validateKey)(primaryKey.partitionKey, attributes);
        // build primary key
        return {
            attributes: {
                [tablePartitionKeyName]: primaryKey.partitionKey,
            },
            metadata: {
                _interpolations: {
                    [tablePartitionKeyName]: partitionKeyInterpolations,
                },
            },
        };
    }
}
exports.buildPrimaryKeySchema = buildPrimaryKeySchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtcHJpbWFyeS1rZXktc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaGVscGVycy9idWlsZC1wcmltYXJ5LWtleS1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBSzBCO0FBQzFCLG1FQUE0RDtBQUM1RCxpREFBMkM7QUFFM0MsU0FBZ0IscUJBQXFCLENBQUMsRUFDcEMsS0FBSyxFQUNMLFVBQVUsRUFDVixVQUFVLEdBS1g7O0lBTUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFBLDJDQUFtQixFQUNwRCxVQUFVLENBQUMsWUFBWSxDQUN4QixDQUFDO0lBRUYsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0lBQ2pELElBQUksSUFBQSw4QkFBcUIsRUFBQyxVQUFVLENBQUMsRUFBRTtRQUNyQyxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQ2IsVUFBVSxLQUFLLENBQUMsSUFBSSxnREFBZ0QsVUFBVSxDQUFDLE9BQU8scUJBQXFCLENBQzVHLENBQUM7U0FDSDtRQUVELElBQUEsMEJBQVcsRUFBQyxVQUFVLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pELElBQUEsMEJBQVcsRUFBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRTVDLG9CQUFvQjtRQUNwQixNQUFNLGdCQUFnQixHQUFHLE1BQUEsS0FBSyxDQUFDLE9BQU8sbUNBQUksRUFBRSxDQUFDO1FBQzdDLE1BQU0scUJBQXFCLEdBQUcsSUFBQSwyQ0FBbUIsRUFBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEUsT0FBTztZQUNMLFVBQVUsRUFBRTtnQkFDVixDQUFDLHFCQUFxQixDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVk7Z0JBQ2hELENBQUMsZ0JBQWdCLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTzthQUN2QztZQUNELFFBQVEsRUFBRTtnQkFDUixlQUFlLEVBQUU7b0JBQ2YsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLDBCQUEwQjtvQkFDbkQsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLHFCQUFxQjtpQkFDMUM7YUFDRjtTQUNGLENBQUM7UUFDRiwyQ0FBMkM7S0FDNUM7U0FBTTtRQUNMLHFCQUFxQjtRQUNyQixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQ2IsVUFBVSxLQUFLLENBQUMsSUFBSSxrRUFBa0UsQ0FDdkYsQ0FBQztTQUNIO1FBQ0QsSUFBQSwwQkFBVyxFQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFakQsb0JBQW9CO1FBQ3BCLE9BQU87WUFDTCxVQUFVLEVBQUU7Z0JBQ1YsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxZQUFZO2FBQ2pEO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLGVBQWUsRUFBRTtvQkFDZixDQUFDLHFCQUFxQixDQUFDLEVBQUUsMEJBQTBCO2lCQUNwRDthQUNGO1NBQ0YsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQW5FRCxzREFtRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBUYWJsZSxcbiAgUHJpbWFyeUtleSxcbiAgSXNDb21wb3NpdGVQcmltYXJ5S2V5LFxuICBFbnRpdHlBbGlhc09yU3RyaW5nLFxufSBmcm9tICdAdHlwZWRvcm0vY29tbW9uJztcbmltcG9ydCB7Z2V0SW50ZXJwb2xhdGVkS2V5c30gZnJvbSAnLi9nZXQtaW50ZXJwb2xhdGVkLWtleXMnO1xuaW1wb3J0IHt2YWxpZGF0ZUtleX0gZnJvbSAnLi92YWxpZGF0ZS1rZXknO1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRQcmltYXJ5S2V5U2NoZW1hKHtcbiAgdGFibGUsXG4gIHByaW1hcnlLZXksXG4gIGF0dHJpYnV0ZXMsXG59OiB7XG4gIHRhYmxlOiBUYWJsZTtcbiAgcHJpbWFyeUtleTogUHJpbWFyeUtleTtcbiAgYXR0cmlidXRlczoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG59KToge1xuICBhdHRyaWJ1dGVzOiB7W2tleTogc3RyaW5nXTogRW50aXR5QWxpYXNPclN0cmluZzxhbnk+fTtcbiAgbWV0YWRhdGE6IHtcbiAgICBfaW50ZXJwb2xhdGlvbnM6IHtba2V5OiBzdHJpbmddOiBhbnl9O1xuICB9O1xufSB7XG4gIGNvbnN0IHBhcnRpdGlvbktleUludGVycG9sYXRpb25zID0gZ2V0SW50ZXJwb2xhdGVkS2V5cyhcbiAgICBwcmltYXJ5S2V5LnBhcnRpdGlvbktleVxuICApO1xuXG4gIGNvbnN0IHRhYmxlUGFydGl0aW9uS2V5TmFtZSA9IHRhYmxlLnBhcnRpdGlvbktleTtcbiAgaWYgKElzQ29tcG9zaXRlUHJpbWFyeUtleShwcmltYXJ5S2V5KSkge1xuICAgIC8vIHZhbGlkYXRlIHByaW1hcnkga2V5IHNpZ25hdHVyZVxuICAgIGlmICghdGFibGUudXNlc0NvbXBvc2l0ZUtleSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUYWJsZSBcIiR7dGFibGUubmFtZX1cIiBkb2VzIG5vdCB1c2UgY29tcG9zaXRlIGtleSwgdGh1cyBzb3J0IGtleSBcIiR7cHJpbWFyeUtleS5zb3J0S2V5fVwiIHNob3VsZCBub3QgZXhpc3QuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZUtleShwcmltYXJ5S2V5LnBhcnRpdGlvbktleSwgYXR0cmlidXRlcyk7XG4gICAgdmFsaWRhdGVLZXkocHJpbWFyeUtleS5zb3J0S2V5LCBhdHRyaWJ1dGVzKTtcblxuICAgIC8vIGJ1aWxkIHByaW1hcnkga2V5XG4gICAgY29uc3QgdGFibGVTb3J0S2V5TmFtZSA9IHRhYmxlLnNvcnRLZXkgPz8gJyc7XG4gICAgY29uc3Qgc29ydEtleUludGVycG9sYXRpb25zID0gZ2V0SW50ZXJwb2xhdGVkS2V5cyhwcmltYXJ5S2V5LnNvcnRLZXkpO1xuICAgIHJldHVybiB7XG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIFt0YWJsZVBhcnRpdGlvbktleU5hbWVdOiBwcmltYXJ5S2V5LnBhcnRpdGlvbktleSxcbiAgICAgICAgW3RhYmxlU29ydEtleU5hbWVdOiBwcmltYXJ5S2V5LnNvcnRLZXksXG4gICAgICB9LFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgX2ludGVycG9sYXRpb25zOiB7XG4gICAgICAgICAgW3RhYmxlUGFydGl0aW9uS2V5TmFtZV06IHBhcnRpdGlvbktleUludGVycG9sYXRpb25zLFxuICAgICAgICAgIFt0YWJsZVNvcnRLZXlOYW1lXTogc29ydEtleUludGVycG9sYXRpb25zLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIC8vIHdoZW4gY3VycmVudCBwcmltYXJ5IGtleSBpcyBhIHNpbXBsZSBrZXlcbiAgfSBlbHNlIHtcbiAgICAvLyB2YWxpZGF0ZSBzaWduYXR1cmVcbiAgICBpZiAodGFibGUudXNlc0NvbXBvc2l0ZUtleSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUYWJsZSBcIiR7dGFibGUubmFtZX1cIiB1c2VzIGNvbXBvc2l0ZSBrZXkgYXMgYSBwcmltYXJ5IGtleSwgdGh1cyBzb3J0IGtleSBpcyByZXF1aXJlZGBcbiAgICAgICk7XG4gICAgfVxuICAgIHZhbGlkYXRlS2V5KHByaW1hcnlLZXkucGFydGl0aW9uS2V5LCBhdHRyaWJ1dGVzKTtcblxuICAgIC8vIGJ1aWxkIHByaW1hcnkga2V5XG4gICAgcmV0dXJuIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgW3RhYmxlUGFydGl0aW9uS2V5TmFtZV06IHByaW1hcnlLZXkucGFydGl0aW9uS2V5LFxuICAgICAgfSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIF9pbnRlcnBvbGF0aW9uczoge1xuICAgICAgICAgIFt0YWJsZVBhcnRpdGlvbktleU5hbWVdOiBwYXJ0aXRpb25LZXlJbnRlcnBvbGF0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19