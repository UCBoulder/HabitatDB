"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentClientV2 = void 0;
const exceptions_1 = require("../exceptions");
const base_document_client_1 = require("./base-document-client");
class DocumentClientV2 extends base_document_client_1.DocumentClient {
    constructor(dynamoDBClient) {
        super();
        this.version = 2;
        this.documentClient = dynamoDBClient;
    }
    put(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.put(input).promise();
        });
    }
    get(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.get(input).promise();
        });
    }
    query(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.query(input).promise();
        });
    }
    update(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.update(input).promise();
        });
    }
    delete(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.delete(input).promise();
        });
    }
    batchWrite(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.batchWrite(input).promise();
        });
    }
    batchGet(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.batchGet(input).promise();
        });
    }
    transactGet(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const transactionResult = this.transactGetRaw(input);
            return this.handleTransactionResult(transactionResult);
        });
    }
    transactWrite(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const transactionResult = this.transactWriteRaw(input);
            return this.handleTransactionResult(transactionResult);
        });
    }
    scan(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentClient.scan(input).promise();
        });
    }
    ///
    /// Private Methods
    ///
    transactGetRaw(input) {
        return this.documentClient.transactGet(input);
    }
    transactWriteRaw(input) {
        return this.documentClient.transactWrite(input);
    }
    handleTransactionResult(transactionRequest) {
        let cancellationReasons;
        transactionRequest.on('extractError', response => {
            try {
                cancellationReasons = JSON.parse(response.httpResponse.body.toString()).CancellationReasons;
            }
            catch (err) {
                // suppress this just in case some types of errors aren't JSON parsable
                console.error('Error extracting cancellation error', err);
            }
        });
        return new Promise((resolve, reject) => {
            transactionRequest.send((err, response) => {
                if (err) {
                    // pull all reasons from response and map them to errors
                    const reasons = cancellationReasons.map(reason => {
                        return {
                            code: reason.Code,
                            message: reason.Message,
                            item: reason.Item,
                        };
                    });
                    return reject(new exceptions_1.TransactionCancelledException(err.code, reasons));
                }
                return resolve(response);
            });
        });
    }
}
exports.DocumentClientV2 = DocumentClientV2;
//# sourceMappingURL=data:application/json;base64,