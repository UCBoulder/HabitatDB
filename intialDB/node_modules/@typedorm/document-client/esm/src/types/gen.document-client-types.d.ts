import { DocumentClientV2 } from '../classes/document-client-v2';
import AWS, { DynamoDB } from 'aws-sdk';
import DynamoDBClientV3 from '@aws-sdk/client-dynamodb';
/**
 * !!important!! Experiment with generics to provider stronger typing
 */
export declare namespace DocumentClientTypes {
    /**
     * General
     */
    type Key = {
        [key: string]: any;
    };
    type AttributeMap = {
        [key: string]: any;
    };
    type ItemList = AttributeMap[];
    type WriteRequest<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.WriteRequest : DynamoDBClientV3.WriteRequest;
    type Request<T> = AWS.Request<T, AWS.AWSError>;
    /**
     * Put
     */
    type PutItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.PutItemInput : DynamoDBClientV3.PutItemInput;
    type PutItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.PutItemOutput : DynamoDBClientV3.PutItemOutput;
    /**
     * Get
     */
    type GetItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.GetItemInput : DynamoDBClientV3.GetItemInput;
    type GetItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.GetItemOutput : DynamoDBClientV3.GetItemOutput;
    /**
     * Update
     */
    type Update<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.Update : DynamoDBClientV3.Update;
    type UpdateItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.UpdateItemInput : DynamoDBClientV3.UpdateItemInput;
    type UpdateItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.UpdateItemOutput : DynamoDBClientV3.UpdateItemOutput;
    /**
     * Delete
     */
    type DeleteItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.DeleteItemInput : DynamoDBClientV3.DeleteItemInput;
    type DeleteItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.DeleteItemOutput : DynamoDBClientV3.DeleteItemOutput;
    /**
     * Query
     */
    type QueryInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.QueryInput : DynamoDBClientV3.QueryInput;
    type QueryOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.QueryOutput : DynamoDBClientV3.QueryOutput;
    /**
     * BatchWrite
     */
    type BatchWriteItemRequestMap<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchWriteItemRequestMap : {
        [key: string]: DynamoDBClientV3.WriteRequest[];
    };
    type BatchWriteItemRequestMapList<T = DocumentClientV2> = BatchWriteItemRequestMap<T>[];
    type BatchWriteItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchWriteItemInput : DynamoDBClientV3.BatchWriteItemInput;
    type BatchWriteItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchWriteItemOutput : DynamoDBClientV3.BatchWriteItemOutput;
    type BatchWriteItemOutputList<T = DocumentClientV2> = BatchWriteItemOutput<T>[];
    /**
     * BatchGet
     */
    type BatchGetRequestMap<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchGetRequestMap : {
        [key: string]: DynamoDBClientV3.KeysAndAttributes;
    };
    type BatchGetRequestMapList<T = DocumentClientV2> = BatchGetRequestMap<T>[];
    type BatchGetItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchGetItemInput : DynamoDBClientV3.BatchGetItemInput;
    type BatchGetItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchGetItemOutput : DynamoDBClientV3.BatchGetItemOutput;
    type BatchGetItemOutputList<T = DocumentClientV2> = BatchGetItemOutput<T>[];
    type BatchGetResponseMap<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.BatchGetResponseMap : {
        [key: string]: ItemList;
    };
    /**
     * TransactWrite
     */
    type TransactWriteItem<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.TransactWriteItem : DynamoDBClientV3.TransactWriteItem;
    type TransactWriteItemList<T = DocumentClientV2> = TransactWriteItem<T>[];
    type TransactWriteItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.TransactWriteItemsInput : DynamoDBClientV3.TransactWriteItemsInput;
    type TransactWriteItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.TransactWriteItemsOutput : DynamoDBClientV3.TransactWriteItemsOutput;
    /**
     * TransactGet
     */
    type TransactGetItem<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.TransactGetItem : DynamoDBClientV3.TransactGetItem;
    type TransactGetItemList<T = DocumentClientV2> = TransactGetItem<T>[];
    type TransactGetItemInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.TransactGetItemsInput : DynamoDBClientV3.TransactGetItemsInput;
    type TransactGetItemOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.TransactGetItemsOutput : DynamoDBClientV3.TransactGetItemsOutput;
    /**
     * Scan
     */
    type ScanInput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.ScanInput : DynamoDBClientV3.ScanInput;
    type ScanOutput<T = DocumentClientV2> = T extends DocumentClientV2 ? DynamoDB.DocumentClient.ScanOutput : DynamoDBClientV3.ScanOutput;
}
