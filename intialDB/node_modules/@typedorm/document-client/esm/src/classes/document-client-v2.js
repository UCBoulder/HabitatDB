import { TransactionCancelledException } from '../exceptions';
import { DocumentClient } from './base-document-client';
export class DocumentClientV2 extends DocumentClient {
    documentClient;
    version = 2;
    constructor(dynamoDBClient) {
        super();
        this.documentClient = dynamoDBClient;
    }
    async put(input) {
        return this.documentClient.put(input).promise();
    }
    async get(input) {
        return this.documentClient.get(input).promise();
    }
    async query(input) {
        return this.documentClient.query(input).promise();
    }
    async update(input) {
        return this.documentClient.update(input).promise();
    }
    async delete(input) {
        return this.documentClient.delete(input).promise();
    }
    async batchWrite(input) {
        return this.documentClient.batchWrite(input).promise();
    }
    async batchGet(input) {
        return this.documentClient.batchGet(input).promise();
    }
    async transactGet(input) {
        const transactionResult = this.transactGetRaw(input);
        return this.handleTransactionResult(transactionResult);
    }
    async transactWrite(input) {
        const transactionResult = this.transactWriteRaw(input);
        return this.handleTransactionResult(transactionResult);
    }
    async scan(input) {
        return this.documentClient.scan(input).promise();
    }
    ///
    /// Private Methods
    ///
    transactGetRaw(input) {
        return this.documentClient.transactGet(input);
    }
    transactWriteRaw(input) {
        return this.documentClient.transactWrite(input);
    }
    handleTransactionResult(transactionRequest) {
        let cancellationReasons;
        transactionRequest.on('extractError', response => {
            try {
                cancellationReasons = JSON.parse(response.httpResponse.body.toString()).CancellationReasons;
            }
            catch (err) {
                // suppress this just in case some types of errors aren't JSON parsable
                console.error('Error extracting cancellation error', err);
            }
        });
        return new Promise((resolve, reject) => {
            transactionRequest.send((err, response) => {
                if (err) {
                    // pull all reasons from response and map them to errors
                    const reasons = cancellationReasons.map(reason => {
                        return {
                            code: reason.Code,
                            message: reason.Message,
                            item: reason.Item,
                        };
                    });
                    return reject(new TransactionCancelledException(err.code, reasons));
                }
                return resolve(response);
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,