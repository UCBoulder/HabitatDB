"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseKey = void 0;
const common_1 = require("@typedorm/common");
const is_key_of_type_alias_schema_1 = require("./is-key-of-type-alias-schema");
const regexExp = {
    interpolation: /\{{.+?\}}/g,
    interpolatedWord: /\{{(.+?)\}}/,
};
function parseKey(key, dict, { isSparseIndex } = { isSparseIndex: false }) {
    if ((0, is_key_of_type_alias_schema_1.isKeyOfTypeAliasSchema)(key)) {
        const aliasAttr = key.alias;
        const aliasValue = dict[aliasAttr];
        if (aliasValue) {
            return aliasValue;
        }
        if (!aliasValue) {
            const error = new Error(`"attribute alias ${key} was found but it's value could not be resolved.`);
            if (isSparseIndex) {
                throw new common_1.SparseIndexParseError(aliasAttr);
            }
            throw error;
        }
        return aliasValue;
    }
    else {
        return key.replace(regexExp.interpolation, substr => {
            const match = regexExp.interpolatedWord.exec(substr);
            let variable;
            if (match) {
                variable = match[1];
            }
            if (!match || !variable) {
                throw new Error(`Failed to parse expression: "${key}", could not find a variable inside "${substr}"`);
            }
            const valueToReplace = dict[variable];
            if (valueToReplace === undefined || valueToReplace === null) {
                const error = new Error(`"${variable}" was referenced in ${key} but it's value could not be resolved.`);
                // this is what tells transformer to ignore including parsed values
                if (isSparseIndex) {
                    throw new common_1.SparseIndexParseError(key);
                }
                throw error;
            }
            return valueToReplace.toString();
        });
    }
}
exports.parseKey = parseKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2Uta2V5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaGVscGVycy9wYXJzZS1rZXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTRFO0FBQzVFLCtFQUFxRTtBQUVyRSxNQUFNLFFBQVEsR0FBRztJQUNmLGFBQWEsRUFBRSxZQUFZO0lBQzNCLGdCQUFnQixFQUFFLGFBQWE7Q0FDaEMsQ0FBQztBQUVGLFNBQWdCLFFBQVEsQ0FDdEIsR0FBNkIsRUFDN0IsSUFBWSxFQUNaLEVBQUMsYUFBYSxLQUE4QixFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUM7SUFFbEUsSUFBSSxJQUFBLG9EQUFzQixFQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQy9CLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFlLENBQUM7UUFDdEMsTUFBTSxVQUFVLEdBQUksSUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksVUFBVSxFQUFFO1lBQ2QsT0FBTyxVQUFVLENBQUM7U0FDbkI7UUFFRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQ3JCLG9CQUFvQixHQUFHLGtEQUFrRCxDQUMxRSxDQUFDO1lBRUYsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLE1BQU0sSUFBSSw4QkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUM1QztZQUNELE1BQU0sS0FBSyxDQUFDO1NBQ2I7UUFDRCxPQUFPLFVBQVUsQ0FBQztLQUNuQjtTQUFNO1FBQ0wsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbEQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRCxJQUFJLFFBQWEsQ0FBQztZQUNsQixJQUFJLEtBQUssRUFBRTtnQkFDVCxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3JCO1lBQ0QsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDdkIsTUFBTSxJQUFJLEtBQUssQ0FDYixnQ0FBZ0MsR0FBRyx3Q0FBd0MsTUFBTSxHQUFHLENBQ3JGLENBQUM7YUFDSDtZQUVELE1BQU0sY0FBYyxHQUFJLElBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUUvQyxJQUFJLGNBQWMsS0FBSyxTQUFTLElBQUksY0FBYyxLQUFLLElBQUksRUFBRTtnQkFDM0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQ3JCLElBQUksUUFBUSx1QkFBdUIsR0FBRyx3Q0FBd0MsQ0FDL0UsQ0FBQztnQkFFRixtRUFBbUU7Z0JBQ25FLElBQUksYUFBYSxFQUFFO29CQUNqQixNQUFNLElBQUksOEJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3RDO2dCQUNELE1BQU0sS0FBSyxDQUFDO2FBQ2I7WUFFRCxPQUFPLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQXJERCw0QkFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VudGl0eUFsaWFzT3JTdHJpbmcsIFNwYXJzZUluZGV4UGFyc2VFcnJvcn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge2lzS2V5T2ZUeXBlQWxpYXNTY2hlbWF9IGZyb20gJy4vaXMta2V5LW9mLXR5cGUtYWxpYXMtc2NoZW1hJztcblxuY29uc3QgcmVnZXhFeHAgPSB7XG4gIGludGVycG9sYXRpb246IC9cXHt7Lis/XFx9fS9nLFxuICBpbnRlcnBvbGF0ZWRXb3JkOiAvXFx7eyguKz8pXFx9fS8sXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VLZXk8RW50aXR5PihcbiAga2V5OiBFbnRpdHlBbGlhc09yU3RyaW5nPGFueT4sXG4gIGRpY3Q6IEVudGl0eSxcbiAge2lzU3BhcnNlSW5kZXh9OiB7aXNTcGFyc2VJbmRleDogYm9vbGVhbn0gPSB7aXNTcGFyc2VJbmRleDogZmFsc2V9XG4pIHtcbiAgaWYgKGlzS2V5T2ZUeXBlQWxpYXNTY2hlbWEoa2V5KSkge1xuICAgIGNvbnN0IGFsaWFzQXR0ciA9IGtleS5hbGlhcyBhcyBzdHJpbmc7XG4gICAgY29uc3QgYWxpYXNWYWx1ZSA9IChkaWN0IGFzIGFueSlbYWxpYXNBdHRyXTtcbiAgICBpZiAoYWxpYXNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGFsaWFzVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKCFhbGlhc1ZhbHVlKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgYFwiYXR0cmlidXRlIGFsaWFzICR7a2V5fSB3YXMgZm91bmQgYnV0IGl0J3MgdmFsdWUgY291bGQgbm90IGJlIHJlc29sdmVkLmBcbiAgICAgICk7XG5cbiAgICAgIGlmIChpc1NwYXJzZUluZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBTcGFyc2VJbmRleFBhcnNlRXJyb3IoYWxpYXNBdHRyKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gYWxpYXNWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ga2V5LnJlcGxhY2UocmVnZXhFeHAuaW50ZXJwb2xhdGlvbiwgc3Vic3RyID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoID0gcmVnZXhFeHAuaW50ZXJwb2xhdGVkV29yZC5leGVjKHN1YnN0cik7XG4gICAgICBsZXQgdmFyaWFibGU6IGFueTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICB2YXJpYWJsZSA9IG1hdGNoWzFdO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXRjaCB8fCAhdmFyaWFibGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gcGFyc2UgZXhwcmVzc2lvbjogXCIke2tleX1cIiwgY291bGQgbm90IGZpbmQgYSB2YXJpYWJsZSBpbnNpZGUgXCIke3N1YnN0cn1cImBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsdWVUb1JlcGxhY2UgPSAoZGljdCBhcyBhbnkpW3ZhcmlhYmxlXTtcblxuICAgICAgaWYgKHZhbHVlVG9SZXBsYWNlID09PSB1bmRlZmluZWQgfHwgdmFsdWVUb1JlcGxhY2UgPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgYFwiJHt2YXJpYWJsZX1cIiB3YXMgcmVmZXJlbmNlZCBpbiAke2tleX0gYnV0IGl0J3MgdmFsdWUgY291bGQgbm90IGJlIHJlc29sdmVkLmBcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB0aGlzIGlzIHdoYXQgdGVsbHMgdHJhbnNmb3JtZXIgdG8gaWdub3JlIGluY2x1ZGluZyBwYXJzZWQgdmFsdWVzXG4gICAgICAgIGlmIChpc1NwYXJzZUluZGV4KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFNwYXJzZUluZGV4UGFyc2VFcnJvcihrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVUb1JlcGxhY2UudG9TdHJpbmcoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19