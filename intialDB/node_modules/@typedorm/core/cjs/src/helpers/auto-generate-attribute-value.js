"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoGenerateValue = exports.AutoGenerateAttributeValue = void 0;
const ksuid_1 = __importDefault(require("ksuid"));
const common_1 = require("@typedorm/common");
const uuid_1 = require("uuid");
class AutoGenerateAttributeValue {
    static get UUID4() {
        return autoGenerateValue(common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.UUID4);
    }
    static get KSUID() {
        return autoGenerateValue(common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.KSUID);
    }
    static get ISO_DATE() {
        return autoGenerateValue(common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.ISO_DATE);
    }
    static get EPOCH_DATE() {
        return autoGenerateValue(common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.EPOCH_DATE);
    }
}
exports.AutoGenerateAttributeValue = AutoGenerateAttributeValue;
function autoGenerateValue(strategy) {
    switch (strategy) {
        case common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.UUID4: {
            return (0, uuid_1.v4)();
        }
        case common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.KSUID: {
            return ksuid_1.default.randomSync(new Date()).string;
        }
        case common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.ISO_DATE: {
            return new Date().toISOString();
        }
        case common_1.AUTO_GENERATE_ATTRIBUTE_STRATEGY.EPOCH_DATE: {
            return Math.ceil(new Date().valueOf() / 1000);
        }
        default: {
            throw new common_1.UnknownAttributeValueGenerationStrategyError(strategy);
        }
    }
}
exports.autoGenerateValue = autoGenerateValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1nZW5lcmF0ZS1hdHRyaWJ1dGUtdmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9oZWxwZXJzL2F1dG8tZ2VuZXJhdGUtYXR0cmlidXRlLXZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQiw2Q0FHMEI7QUFDMUIsK0JBQXdCO0FBRXhCLE1BQWEsMEJBQTBCO0lBQ3JDLE1BQU0sS0FBSyxLQUFLO1FBQ2QsT0FBTyxpQkFBaUIsQ0FBQyx5Q0FBZ0MsQ0FBQyxLQUFLLENBQVcsQ0FBQztJQUM3RSxDQUFDO0lBRUQsTUFBTSxLQUFLLEtBQUs7UUFDZCxPQUFPLGlCQUFpQixDQUFDLHlDQUFnQyxDQUFDLEtBQUssQ0FBVyxDQUFDO0lBQzdFLENBQUM7SUFFRCxNQUFNLEtBQUssUUFBUTtRQUNqQixPQUFPLGlCQUFpQixDQUN0Qix5Q0FBZ0MsQ0FBQyxRQUFRLENBQ2hDLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxLQUFLLFVBQVU7UUFDbkIsT0FBTyxpQkFBaUIsQ0FDdEIseUNBQWdDLENBQUMsVUFBVSxDQUNsQyxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBcEJELGdFQW9CQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLFFBQTBDO0lBQzFFLFFBQVEsUUFBUSxFQUFFO1FBQ2hCLEtBQUsseUNBQWdDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0MsT0FBTyxJQUFBLFNBQUUsR0FBRSxDQUFDO1NBQ2I7UUFDRCxLQUFLLHlDQUFnQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDLE9BQU8sZUFBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1NBQzVDO1FBQ0QsS0FBSyx5Q0FBZ0MsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7UUFDRCxLQUFLLHlDQUFnQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2hELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxDQUFDLENBQUM7WUFDUCxNQUFNLElBQUkscURBQTRDLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbEU7S0FDRjtBQUNILENBQUM7QUFsQkQsOENBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEtTVUlEIGZyb20gJ2tzdWlkJztcbmltcG9ydCB7XG4gIEFVVE9fR0VORVJBVEVfQVRUUklCVVRFX1NUUkFURUdZLFxuICBVbmtub3duQXR0cmlidXRlVmFsdWVHZW5lcmF0aW9uU3RyYXRlZ3lFcnJvcixcbn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge3Y0fSBmcm9tICd1dWlkJztcblxuZXhwb3J0IGNsYXNzIEF1dG9HZW5lcmF0ZUF0dHJpYnV0ZVZhbHVlIHtcbiAgc3RhdGljIGdldCBVVUlENCgpIHtcbiAgICByZXR1cm4gYXV0b0dlbmVyYXRlVmFsdWUoQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1kuVVVJRDQpIGFzIHN0cmluZztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgS1NVSUQoKSB7XG4gICAgcmV0dXJuIGF1dG9HZW5lcmF0ZVZhbHVlKEFVVE9fR0VORVJBVEVfQVRUUklCVVRFX1NUUkFURUdZLktTVUlEKSBhcyBzdHJpbmc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IElTT19EQVRFKCkge1xuICAgIHJldHVybiBhdXRvR2VuZXJhdGVWYWx1ZShcbiAgICAgIEFVVE9fR0VORVJBVEVfQVRUUklCVVRFX1NUUkFURUdZLklTT19EQVRFXG4gICAgKSBhcyBzdHJpbmc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEVQT0NIX0RBVEUoKSB7XG4gICAgcmV0dXJuIGF1dG9HZW5lcmF0ZVZhbHVlKFxuICAgICAgQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1kuRVBPQ0hfREFURVxuICAgICkgYXMgbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRvR2VuZXJhdGVWYWx1ZShzdHJhdGVneTogQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1kpIHtcbiAgc3dpdGNoIChzdHJhdGVneSkge1xuICAgIGNhc2UgQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1kuVVVJRDQ6IHtcbiAgICAgIHJldHVybiB2NCgpO1xuICAgIH1cbiAgICBjYXNlIEFVVE9fR0VORVJBVEVfQVRUUklCVVRFX1NUUkFURUdZLktTVUlEOiB7XG4gICAgICByZXR1cm4gS1NVSUQucmFuZG9tU3luYyhuZXcgRGF0ZSgpKS5zdHJpbmc7XG4gICAgfVxuICAgIGNhc2UgQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1kuSVNPX0RBVEU6IHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIGNhc2UgQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1kuRVBPQ0hfREFURToge1xuICAgICAgcmV0dXJuIE1hdGguY2VpbChuZXcgRGF0ZSgpLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aHJvdyBuZXcgVW5rbm93bkF0dHJpYnV0ZVZhbHVlR2VuZXJhdGlvblN0cmF0ZWd5RXJyb3Ioc3RyYXRlZ3kpO1xuICAgIH1cbiAgfVxufVxuIl19