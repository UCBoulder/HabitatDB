"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUsedForPrimaryKey = void 0;
const common_1 = require("@typedorm/common");
const get_interpolated_keys_1 = require("./get-interpolated-keys");
const IsRawPrimaryKey = (key) => {
    return !!key.partitionKey;
};
function isUsedForPrimaryKey(primaryKey, attributeName) {
    var _a;
    let primaryKeyInterpolations = [];
    // if raw primary key was provided, resolve all the interpolations for it
    if (IsRawPrimaryKey(primaryKey)) {
        primaryKeyInterpolations = [
            ...primaryKeyInterpolations,
            ...(0, get_interpolated_keys_1.getInterpolatedKeys)(primaryKey.partitionKey),
        ];
        if ((0, common_1.IsCompositePrimaryKey)(primaryKey)) {
            primaryKeyInterpolations = [
                ...primaryKeyInterpolations,
                ...(0, get_interpolated_keys_1.getInterpolatedKeys)(primaryKey.sortKey),
            ];
        }
        // when parsed primary key is provided, flatten all interpolations to an array
    }
    else {
        const interpolationsToFlatten = (_a = primaryKey.metadata._interpolations) !== null && _a !== void 0 ? _a : {};
        primaryKeyInterpolations = [
            ...primaryKeyInterpolations,
            ...Object.keys(interpolationsToFlatten).flatMap(key => {
                const currInterpolation = interpolationsToFlatten[key];
                return currInterpolation;
            }),
        ];
    }
    // check if there is a matching attribute name
    return primaryKeyInterpolations.includes(attributeName);
}
exports.isUsedForPrimaryKey = isUsedForPrimaryKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtdXNlZC1mb3ItcHJpbWFyeS1rZXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9oZWxwZXJzL2lzLXVzZWQtZm9yLXByaW1hcnkta2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFtRTtBQUVuRSxtRUFBNEQ7QUFFNUQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFZLEVBQXFCLEVBQUU7SUFDMUQsT0FBTyxDQUFDLENBQUUsR0FBa0IsQ0FBQyxZQUFZLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBRUYsU0FBZ0IsbUJBQW1CLENBQ2pDLFVBQXFELEVBQ3JELGFBQXFCOztJQUVyQixJQUFJLHdCQUF3QixHQUFHLEVBQWMsQ0FBQztJQUU5Qyx5RUFBeUU7SUFDekUsSUFBSSxlQUFlLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDL0Isd0JBQXdCLEdBQUc7WUFDekIsR0FBRyx3QkFBd0I7WUFDM0IsR0FBRyxJQUFBLDJDQUFtQixFQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7U0FDaEQsQ0FBQztRQUVGLElBQUksSUFBQSw4QkFBcUIsRUFBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyx3QkFBd0IsR0FBRztnQkFDekIsR0FBRyx3QkFBd0I7Z0JBQzNCLEdBQUcsSUFBQSwyQ0FBbUIsRUFBQyxVQUFVLENBQUMsT0FBTyxDQUFDO2FBQzNDLENBQUM7U0FDSDtRQUNELDhFQUE4RTtLQUMvRTtTQUFNO1FBQ0wsTUFBTSx1QkFBdUIsR0FBRyxNQUFBLFVBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxtQ0FBSSxFQUFFLENBQUM7UUFDMUUsd0JBQXdCLEdBQUc7WUFDekIsR0FBRyx3QkFBd0I7WUFDM0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNwRCxNQUFNLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN2RCxPQUFPLGlCQUFpQixDQUFDO1lBQzNCLENBQUMsQ0FBQztTQUNILENBQUM7S0FDSDtJQUVELDhDQUE4QztJQUM5QyxPQUFPLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBakNELGtEQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SXNDb21wb3NpdGVQcmltYXJ5S2V5LCBQcmltYXJ5S2V5fSBmcm9tICdAdHlwZWRvcm0vY29tbW9uJztcbmltcG9ydCB7RHluYW1vRW50aXR5U2NoZW1hUHJpbWFyeUtleX0gZnJvbSAnLi4vY2xhc3Nlcy9tZXRhZGF0YS9lbnRpdHktbWV0YWRhdGEnO1xuaW1wb3J0IHtnZXRJbnRlcnBvbGF0ZWRLZXlzfSBmcm9tICcuL2dldC1pbnRlcnBvbGF0ZWQta2V5cyc7XG5cbmNvbnN0IElzUmF3UHJpbWFyeUtleSA9IChrZXk6IHVua25vd24pOiBrZXkgaXMgUHJpbWFyeUtleSA9PiB7XG4gIHJldHVybiAhIShrZXkgYXMgUHJpbWFyeUtleSkucGFydGl0aW9uS2V5O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXNlZEZvclByaW1hcnlLZXkoXG4gIHByaW1hcnlLZXk6IER5bmFtb0VudGl0eVNjaGVtYVByaW1hcnlLZXkgfCBQcmltYXJ5S2V5LFxuICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmdcbikge1xuICBsZXQgcHJpbWFyeUtleUludGVycG9sYXRpb25zID0gW10gYXMgc3RyaW5nW107XG5cbiAgLy8gaWYgcmF3IHByaW1hcnkga2V5IHdhcyBwcm92aWRlZCwgcmVzb2x2ZSBhbGwgdGhlIGludGVycG9sYXRpb25zIGZvciBpdFxuICBpZiAoSXNSYXdQcmltYXJ5S2V5KHByaW1hcnlLZXkpKSB7XG4gICAgcHJpbWFyeUtleUludGVycG9sYXRpb25zID0gW1xuICAgICAgLi4ucHJpbWFyeUtleUludGVycG9sYXRpb25zLFxuICAgICAgLi4uZ2V0SW50ZXJwb2xhdGVkS2V5cyhwcmltYXJ5S2V5LnBhcnRpdGlvbktleSksXG4gICAgXTtcblxuICAgIGlmIChJc0NvbXBvc2l0ZVByaW1hcnlLZXkocHJpbWFyeUtleSkpIHtcbiAgICAgIHByaW1hcnlLZXlJbnRlcnBvbGF0aW9ucyA9IFtcbiAgICAgICAgLi4ucHJpbWFyeUtleUludGVycG9sYXRpb25zLFxuICAgICAgICAuLi5nZXRJbnRlcnBvbGF0ZWRLZXlzKHByaW1hcnlLZXkuc29ydEtleSksXG4gICAgICBdO1xuICAgIH1cbiAgICAvLyB3aGVuIHBhcnNlZCBwcmltYXJ5IGtleSBpcyBwcm92aWRlZCwgZmxhdHRlbiBhbGwgaW50ZXJwb2xhdGlvbnMgdG8gYW4gYXJyYXlcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBpbnRlcnBvbGF0aW9uc1RvRmxhdHRlbiA9IHByaW1hcnlLZXkubWV0YWRhdGEuX2ludGVycG9sYXRpb25zID8/IHt9O1xuICAgIHByaW1hcnlLZXlJbnRlcnBvbGF0aW9ucyA9IFtcbiAgICAgIC4uLnByaW1hcnlLZXlJbnRlcnBvbGF0aW9ucyxcbiAgICAgIC4uLk9iamVjdC5rZXlzKGludGVycG9sYXRpb25zVG9GbGF0dGVuKS5mbGF0TWFwKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJJbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbnNUb0ZsYXR0ZW5ba2V5XTtcbiAgICAgICAgcmV0dXJuIGN1cnJJbnRlcnBvbGF0aW9uO1xuICAgICAgfSksXG4gICAgXTtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgbWF0Y2hpbmcgYXR0cmlidXRlIG5hbWVcbiAgcmV0dXJuIHByaW1hcnlLZXlJbnRlcnBvbGF0aW9ucy5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKTtcbn1cbiJdfQ==