"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInterpolatedKeys = void 0;
const constants_1 = require("./constants");
const is_key_of_type_alias_schema_1 = require("./is-key-of-type-alias-schema");
function getInterpolatedKeys(key) {
    // early return when referenced key is of type alias schema
    if ((0, is_key_of_type_alias_schema_1.isKeyOfTypeAliasSchema)(key)) {
        return [key.alias];
    }
    const matchIterator = key.matchAll(constants_1.regexInterpolatedWord);
    const interpolatedKeys = [];
    recursiveFindInterpolatedKeys(key, matchIterator, interpolatedKeys);
    // there shouldn't be any duplicates, still to be double sure remove duplicates if there are any
    return [...new Set(interpolatedKeys)];
}
exports.getInterpolatedKeys = getInterpolatedKeys;
function recursiveFindInterpolatedKeys(key, iterator, interpolatedKeys) {
    const next = iterator.next();
    if (next.done) {
        return;
    }
    // regex match returns [match, key]
    const variable = next.value[1];
    // push interpolated word to array
    interpolatedKeys.push(variable);
    recursiveFindInterpolatedKeys(key, iterator, interpolatedKeys);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWludGVycG9sYXRlZC1rZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaGVscGVycy9nZXQtaW50ZXJwb2xhdGVkLWtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkNBQWtEO0FBQ2xELCtFQUFxRTtBQUVyRSxTQUFnQixtQkFBbUIsQ0FBQyxHQUE2QjtJQUMvRCwyREFBMkQ7SUFDM0QsSUFBSSxJQUFBLG9EQUFzQixFQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBZSxDQUFDLENBQUM7S0FDOUI7SUFFRCxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLGlDQUFxQixDQUFDLENBQUM7SUFDMUQsTUFBTSxnQkFBZ0IsR0FBRyxFQUFjLENBQUM7SUFDeEMsNkJBQTZCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRXBFLGdHQUFnRztJQUNoRyxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQVpELGtEQVlDO0FBRUQsU0FBUyw2QkFBNkIsQ0FDcEMsR0FBVyxFQUNYLFFBQTRDLEVBQzVDLGdCQUEwQjtJQUUxQixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ2IsT0FBTztLQUNSO0lBRUQsbUNBQW1DO0lBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0Isa0NBQWtDO0lBQ2xDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyw2QkFBNkIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDakUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RW50aXR5QWxpYXNPclN0cmluZ30gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge3JlZ2V4SW50ZXJwb2xhdGVkV29yZH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHtpc0tleU9mVHlwZUFsaWFzU2NoZW1hfSBmcm9tICcuL2lzLWtleS1vZi10eXBlLWFsaWFzLXNjaGVtYSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZWRLZXlzKGtleTogRW50aXR5QWxpYXNPclN0cmluZzxhbnk+KSB7XG4gIC8vIGVhcmx5IHJldHVybiB3aGVuIHJlZmVyZW5jZWQga2V5IGlzIG9mIHR5cGUgYWxpYXMgc2NoZW1hXG4gIGlmIChpc0tleU9mVHlwZUFsaWFzU2NoZW1hKGtleSkpIHtcbiAgICByZXR1cm4gW2tleS5hbGlhcyBhcyBzdHJpbmddO1xuICB9XG5cbiAgY29uc3QgbWF0Y2hJdGVyYXRvciA9IGtleS5tYXRjaEFsbChyZWdleEludGVycG9sYXRlZFdvcmQpO1xuICBjb25zdCBpbnRlcnBvbGF0ZWRLZXlzID0gW10gYXMgc3RyaW5nW107XG4gIHJlY3Vyc2l2ZUZpbmRJbnRlcnBvbGF0ZWRLZXlzKGtleSwgbWF0Y2hJdGVyYXRvciwgaW50ZXJwb2xhdGVkS2V5cyk7XG5cbiAgLy8gdGhlcmUgc2hvdWxkbid0IGJlIGFueSBkdXBsaWNhdGVzLCBzdGlsbCB0byBiZSBkb3VibGUgc3VyZSByZW1vdmUgZHVwbGljYXRlcyBpZiB0aGVyZSBhcmUgYW55XG4gIHJldHVybiBbLi4ubmV3IFNldChpbnRlcnBvbGF0ZWRLZXlzKV07XG59XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZUZpbmRJbnRlcnBvbGF0ZWRLZXlzKFxuICBrZXk6IHN0cmluZyxcbiAgaXRlcmF0b3I6IEl0ZXJhYmxlSXRlcmF0b3I8UmVnRXhwTWF0Y2hBcnJheT4sXG4gIGludGVycG9sYXRlZEtleXM6IHN0cmluZ1tdXG4pIHtcbiAgY29uc3QgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgaWYgKG5leHQuZG9uZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHJlZ2V4IG1hdGNoIHJldHVybnMgW21hdGNoLCBrZXldXG4gIGNvbnN0IHZhcmlhYmxlID0gbmV4dC52YWx1ZVsxXTtcblxuICAvLyBwdXNoIGludGVycG9sYXRlZCB3b3JkIHRvIGFycmF5XG4gIGludGVycG9sYXRlZEtleXMucHVzaCh2YXJpYWJsZSk7XG4gIHJlY3Vyc2l2ZUZpbmRJbnRlcnBvbGF0ZWRLZXlzKGtleSwgaXRlcmF0b3IsIGludGVycG9sYXRlZEtleXMpO1xufVxuIl19