"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRegexForKeyMatch = void 0;
/**
 * Builds regex to be used to match generated keys
 * @param keySchema key schema to build regex for | i.e USER#{{id}}
 * @param interpolations list of interpolated words to match | i.e ['id']
 * @returns {
 *            exp: build regular expression
 *            keys: keys in order of match in regex
 *          }
 */
function buildRegexForKeyMatch(keySchema, interpolations) {
    const varsPattern = interpolations.join('|');
    const keysMatcher = new RegExp(`\\{{(${varsPattern})\\}}`, 'gm');
    const keys = [];
    keySchema = keySchema.replace(keysMatcher, substr => {
        var _a;
        const matchKey = ((_a = substr.match(/\{{(.+?)\}}/)) !== null && _a !== void 0 ? _a : [])[1];
        keys.push(matchKey);
        return '(.*)';
    });
    return {
        exp: new RegExp(`^${keySchema}`, 'gm'),
        keys,
    };
}
exports.buildRegexForKeyMatch = buildRegexForKeyMatch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtcmVnZXgtZm9yLWtleS1tYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2hlbHBlcnMvYnVpbGQtcmVnZXgtZm9yLWtleS1tYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLHFCQUFxQixDQUNuQyxTQUFpQixFQUNqQixjQUF3QjtJQUt4QixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsV0FBVyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFakUsTUFBTSxJQUFJLEdBQUcsRUFBYyxDQUFDO0lBQzVCLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRTs7UUFDbEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDLElBQUksU0FBUyxFQUFFLEVBQUUsSUFBSSxDQUFDO1FBQ3RDLElBQUk7S0FDTCxDQUFDO0FBQ0osQ0FBQztBQXJCRCxzREFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJ1aWxkcyByZWdleCB0byBiZSB1c2VkIHRvIG1hdGNoIGdlbmVyYXRlZCBrZXlzXG4gKiBAcGFyYW0ga2V5U2NoZW1hIGtleSBzY2hlbWEgdG8gYnVpbGQgcmVnZXggZm9yIHwgaS5lIFVTRVIje3tpZH19XG4gKiBAcGFyYW0gaW50ZXJwb2xhdGlvbnMgbGlzdCBvZiBpbnRlcnBvbGF0ZWQgd29yZHMgdG8gbWF0Y2ggfCBpLmUgWydpZCddXG4gKiBAcmV0dXJucyB7XG4gKiAgICAgICAgICAgIGV4cDogYnVpbGQgcmVndWxhciBleHByZXNzaW9uXG4gKiAgICAgICAgICAgIGtleXM6IGtleXMgaW4gb3JkZXIgb2YgbWF0Y2ggaW4gcmVnZXhcbiAqICAgICAgICAgIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUmVnZXhGb3JLZXlNYXRjaChcbiAga2V5U2NoZW1hOiBzdHJpbmcsXG4gIGludGVycG9sYXRpb25zOiBzdHJpbmdbXVxuKToge1xuICBleHA6IFJlZ0V4cDtcbiAga2V5czogc3RyaW5nW107XG59IHtcbiAgY29uc3QgdmFyc1BhdHRlcm4gPSBpbnRlcnBvbGF0aW9ucy5qb2luKCd8Jyk7XG4gIGNvbnN0IGtleXNNYXRjaGVyID0gbmV3IFJlZ0V4cChgXFxcXHt7KCR7dmFyc1BhdHRlcm59KVxcXFx9fWAsICdnbScpO1xuXG4gIGNvbnN0IGtleXMgPSBbXSBhcyBzdHJpbmdbXTtcbiAga2V5U2NoZW1hID0ga2V5U2NoZW1hLnJlcGxhY2Uoa2V5c01hdGNoZXIsIHN1YnN0ciA9PiB7XG4gICAgY29uc3QgbWF0Y2hLZXkgPSAoc3Vic3RyLm1hdGNoKC9cXHt7KC4rPylcXH19LykgPz8gW10pWzFdO1xuICAgIGtleXMucHVzaChtYXRjaEtleSk7XG4gICAgcmV0dXJuICcoLiopJztcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBleHA6IG5ldyBSZWdFeHAoYF4ke2tleVNjaGVtYX1gLCAnZ20nKSxcbiAgICBrZXlzLFxuICB9O1xufVxuIl19