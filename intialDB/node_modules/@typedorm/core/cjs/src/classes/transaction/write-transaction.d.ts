import { EntityTarget } from '@typedorm/common';
import { Connection } from '../connection/connection';
import { ConditionOptions } from '../expression/condition-options-type';
import { UpdateBody } from '../expression/update-body-type';
import { Transaction } from './transaction';
interface WriteTransactionCreateOptions<Entity> {
    /**
     * @default false
     */
    overwriteIfExists?: boolean;
    /**
     * Specify condition to apply
     */
    where?: ConditionOptions<Entity>;
}
export interface WriteTransactionCreate<Entity> {
    create: {
        item: Entity;
        options?: WriteTransactionCreateOptions<Entity>;
    };
}
interface WriteTransactionUpdateOptions<Entity> {
    /**
     * @default '.'
     */
    nestedKeySeparator?: string;
    /**
     * Specify condition to apply
     */
    where?: ConditionOptions<Entity>;
}
export interface WriteTransactionUpdate<Entity, PrimaryKey = Partial<Entity>, AdditionalProperties = Entity> {
    update: {
        item: EntityTarget<Entity>;
        primaryKey: PrimaryKey;
        body: UpdateBody<Entity, AdditionalProperties>;
        options?: WriteTransactionUpdateOptions<Entity>;
    };
}
interface WriteTransactionDeleteOptions<Entity> {
    /**
     * Specify condition to apply
     */
    where?: ConditionOptions<Entity>;
}
export interface WriteTransactionDelete<Entity, PrimaryKey> {
    delete: {
        item: EntityTarget<Entity>;
        primaryKey: PrimaryKey;
        options?: WriteTransactionDeleteOptions<Entity>;
    };
}
export type WriteTransactionItem<Entity, PrimaryKey, AdditionalProperties> = WriteTransactionCreate<Entity> | WriteTransactionUpdate<Entity, PrimaryKey, AdditionalProperties> | WriteTransactionDelete<Entity, PrimaryKey>;
export declare class WriteTransaction extends Transaction<WriteTransactionItem<any, any, any>> {
    constructor(
    /** only here for backwards compatibility
     * @deprecated
     * `WriteTransaction` does no longer need the connection object defined
     * at this level, it is now auto inferred by transaction transformer
     */
    connection?: Connection, 
    /**
     * only here for backwards compatibility
     * @deprecated use `.add` for appending bulk items
     */
    transactionItems?: WriteTransactionItem<any, any, any>[]);
    /**
     * @deprecated use operation specific method or `.add` instead
     */
    chian<Entity, PrimaryKey, AdditionalProperties = {}>(chainedItem: WriteTransactionItem<Entity, PrimaryKey, AdditionalProperties>): this;
    add(transactionItems: WriteTransactionItem<any, any, any>[]): this;
    addCreateItem<Entity>(item: Entity, options?: WriteTransactionCreateOptions<Entity>): this;
    addUpdateItem<Entity, PrimaryKey = Partial<Entity>, AdditionalProperties = Entity>(item: EntityTarget<Entity>, primaryKey: PrimaryKey, body: UpdateBody<Entity, AdditionalProperties>, options?: WriteTransactionUpdateOptions<Entity>): this;
    addDeleteItem<Entity, PrimaryKey = Partial<Entity>>(item: EntityTarget<Entity>, primaryKey: PrimaryKey, options?: WriteTransactionDeleteOptions<Entity>): this;
}
export {};
