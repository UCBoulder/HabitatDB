"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentClientRequestTransformer = void 0;
const common_1 = require("@typedorm/common");
const drop_prop_1 = require("../../helpers/drop-prop");
const get_constructor_for_instance_1 = require("../../helpers/get-constructor-for-instance");
const is_empty_object_1 = require("../../helpers/is-empty-object");
const parse_key_1 = require("../../helpers/parse-key");
const key_condition_1 = require("../expression/key-condition");
const expression_builder_1 = require("../expression/expression-builder");
const base_transformer_1 = require("./base-transformer");
const is_object_1 = require("../../helpers/is-object");
const auto_generate_attribute_value_1 = require("../../helpers/auto-generate-attribute-value");
class DocumentClientRequestTransformer extends base_transformer_1.BaseTransformer {
    constructor(connection) {
        super(connection);
        this._expressionBuilder = new expression_builder_1.ExpressionBuilder();
    }
    get expressionBuilder() {
        return this._expressionBuilder;
    }
    get expressionInputParser() {
        return this._expressionInputParser;
    }
    toDynamoPutItem(entity, options, metadataOptions) {
        const entityClass = (0, get_constructor_for_instance_1.getConstructorForInstance)(entity);
        const { table, internalAttributes, name } = this.connection.getEntityByTarget(entityClass);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.PUT,
            prefix: 'Before',
            entityName: name,
            primaryKey: null,
            body: entity,
            options,
        });
        const uniqueAttributes = this.connection.getUniqueAttributesForEntity(entityClass);
        // include attributes with default values in
        const dynamoEntity = this.toDynamoEntity(entity);
        const entityInternalAttributes = internalAttributes.reduce((acc, attr) => {
            acc[attr.name] = attr.value;
            return acc;
        }, {});
        let dynamoPutItem = {
            Item: Object.assign(Object.assign({}, entityInternalAttributes), dynamoEntity),
            TableName: table.name,
            ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
        };
        // apply attribute not exist condition when creating unique
        const uniqueRecordConditionExpression = this.expressionBuilder.buildUniqueRecordConditionExpression(table);
        // always prevent overwriting data until explicitly told to do otherwise
        if (!(options === null || options === void 0 ? void 0 : options.overwriteIfExists)) {
            dynamoPutItem = Object.assign(Object.assign({}, dynamoPutItem), uniqueRecordConditionExpression);
        }
        // if there is `where` condition options exists, build condition expression
        if ((options === null || options === void 0 ? void 0 : options.where) && !(0, is_empty_object_1.isEmptyObject)(options === null || options === void 0 ? void 0 : options.where)) {
            const condition = this.expressionInputParser.parseToCondition(options === null || options === void 0 ? void 0 : options.where);
            if (!condition) {
                throw new Error(`Failed to build condition expression for input: ${JSON.stringify(options === null || options === void 0 ? void 0 : options.where)}`);
            }
            const { ConditionExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildConditionExpression(condition);
            // by default, entity manger appends unique record condition expression to avoid overwriting items if they already exist
            // so handle that
            const mergedExp = this._expressionBuilder.andMergeConditionExpressions({
                ConditionExpression: dynamoPutItem.ConditionExpression,
                ExpressionAttributeNames: dynamoPutItem.ExpressionAttributeNames,
                ExpressionAttributeValues: dynamoPutItem.ExpressionAttributeValues,
            }, {
                ConditionExpression,
                ExpressionAttributeNames,
                ExpressionAttributeValues,
            });
            dynamoPutItem.ConditionExpression = mergedExp.ConditionExpression;
            dynamoPutItem.ExpressionAttributeNames =
                mergedExp.ExpressionAttributeNames;
            dynamoPutItem.ExpressionAttributeValues =
                mergedExp.ExpressionAttributeValues;
        }
        // no unique attributes exist, so return early
        if (!uniqueAttributes.length) {
            this.connection.logger.logTransform({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                operation: common_1.TRANSFORM_TYPE.PUT,
                prefix: 'After',
                entityName: name,
                primaryKey: null,
                body: dynamoPutItem,
            });
            return dynamoPutItem;
        }
        // if there are unique attributes, return transaction list item
        let uniqueAttributePutItems = [];
        if (uniqueAttributes.length) {
            uniqueAttributePutItems = uniqueAttributes.map(attr => {
                const attributeValue = entity[attr.name];
                if (!attributeValue) {
                    throw new Error(`All unique attributes are required, Could not resolve value for unique attribute "${attr.name}."`);
                }
                if (!attr.unique) {
                    throw new Error('All unique attributes metadata must be marked unique.');
                }
                const uniqueItemPrimaryKey = this.getParsedPrimaryKey(table, attr.unique, entity);
                return {
                    Put: Object.assign({ Item: uniqueItemPrimaryKey, TableName: table.name }, uniqueRecordConditionExpression),
                };
            });
        }
        const uniqueAttributesPutItems = [
            { Put: dynamoPutItem },
            ...uniqueAttributePutItems,
        ];
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.PUT,
            prefix: 'After',
            entityName: name,
            primaryKey: null,
            body: uniqueAttributesPutItems,
        });
        return uniqueAttributesPutItems;
    }
    toDynamoGetItem(entityClass, primaryKey, options, metadataOptions) {
        var _a;
        const metadata = this.connection.getEntityByTarget(entityClass);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.GET,
            prefix: 'Before',
            entityName: metadata.name,
            primaryKey,
        });
        const tableName = this.getTableNameForEntity(entityClass);
        const parsedPrimaryKey = this.getParsedPrimaryKey(metadata.table, metadata.schema.primaryKey, primaryKey);
        if ((0, is_empty_object_1.isEmptyObject)(parsedPrimaryKey)) {
            throw new Error('Primary could not be resolved');
        }
        let transformBody = {
            TableName: tableName,
            Key: Object.assign({}, parsedPrimaryKey),
            ConsistentRead: options === null || options === void 0 ? void 0 : options.consistentRead,
            ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
        };
        // if restricted item projection was requested
        if ((_a = options === null || options === void 0 ? void 0 : options.select) === null || _a === void 0 ? void 0 : _a.length) {
            const projection = this.expressionInputParser.parseToProjection(options.select);
            if (!projection) {
                throw new Error(`Failed to build projection expression for input: ${JSON.stringify(options.select)}`);
            }
            const { ProjectionExpression, ExpressionAttributeNames } = this.expressionBuilder.buildProjectionExpression(projection);
            transformBody = Object.assign(Object.assign({}, transformBody), { ProjectionExpression, ExpressionAttributeNames: Object.assign(Object.assign({}, transformBody.ExpressionAttributeNames), ExpressionAttributeNames) });
        }
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.GET,
            prefix: 'After',
            entityName: metadata.name,
            primaryKey: null,
            body: transformBody,
        });
        return transformBody;
    }
    toDynamoUpdateItem(entityClass, primaryKeyAttributes, body, options = {}, metadataOptions) {
        // default values
        const { nestedKeySeparator = '.' } = options;
        if (!this.connection.hasMetadata(entityClass)) {
            throw new Error(`No metadata found for class "${entityClass.name}".`);
        }
        const metadata = this.connection.getEntityByTarget(entityClass);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.UPDATE,
            prefix: 'Before',
            entityName: metadata.name,
            primaryKey: primaryKeyAttributes,
            body,
            options,
        });
        const tableName = metadata.table.name;
        // FIXME: correctly apply decorated transformations on the primary key attributes
        // apply class transformation on attributes before further processing
        // primaryKeyAttributes = this.applyClassTransformerFormations(
        //   primaryKeyAttributes
        // ) as PrimaryKey;
        const parsedPrimaryKey = this.getParsedPrimaryKey(metadata.table, metadata.schema.primaryKey, primaryKeyAttributes);
        if ((0, is_empty_object_1.isEmptyObject)(parsedPrimaryKey)) {
            throw new Error('Primary could not be resolved');
        }
        // get all the attributes for entity that are marked as to be auto update
        const autoUpdateAttributes = this.connection.getAutoUpdateAttributes(entityClass);
        // check if auto update attributes are not referenced by primary key
        const formattedAutoUpdateAttributes = autoUpdateAttributes.reduce((acc, attr) => {
            acc[attr.name] = (0, auto_generate_attribute_value_1.autoGenerateValue)(attr.strategy);
            return acc;
        }, {});
        const rawAttributesToUpdate = Object.assign(Object.assign({}, body), formattedAutoUpdateAttributes);
        /**
         * 1.0 - analyze attributes' value type (static/dynamic)
         *
         * Here we parse all attributes to it's update value and determine
         * if it's value can be statically inferred
         * and also omit all attributes
         * from body that has the same defined in primary key
         *
         */
        const staticOrDynamicUpdateAttributesWithMetadata = Object.entries(Object.assign({}, rawAttributesToUpdate)).reduce((acc, [attrName, attrValue]) => {
            const valueWithType = this.expressionInputParser.parseAttributeToUpdateValue(attrName, attrValue);
            acc.transformed[attrName] = valueWithType.value;
            acc.typeMetadata[attrName] = valueWithType.type;
            return acc;
        }, { transformed: {}, typeMetadata: {} });
        /**
         * 2.0 - apply custom class transformation on static attributes
         *
         * we manually need to replace the constructor of the attributes to update
         * with the entity class, so that we can pass it through to class-transformer
         * to have all transformer metadata applied.
         */
        const onlyStaticAttributes = Object.entries(staticOrDynamicUpdateAttributesWithMetadata.transformed).reduce((acc, [attrKey, attrValue]) => {
            if (staticOrDynamicUpdateAttributesWithMetadata.typeMetadata[attrKey] ===
                'static') {
                acc[attrKey] = attrValue;
            }
            return acc;
        }, {});
        onlyStaticAttributes.constructor = entityClass;
        const classTransformedStaticAttributes = this.applyClassTransformerFormations(onlyStaticAttributes);
        staticOrDynamicUpdateAttributesWithMetadata.transformed = Object.assign(Object.assign({}, staticOrDynamicUpdateAttributesWithMetadata.transformed), classTransformedStaticAttributes);
        /**
         * 3.0 - Get referenced unique attributes and validate that current update body can be safely applied
         */
        const uniqueAttributesToUpdate = this.connection
            .getUniqueAttributesForEntity(entityClass)
            .filter(attr => !!body[attr.name])
            .map(attr => {
            // TODO: support updating unique attributes with dynamic exp
            // we can't allow updating unique attributes when they contain dynamic update value
            if (staticOrDynamicUpdateAttributesWithMetadata.typeMetadata[attr.name] === 'dynamic') {
                throw new common_1.InvalidDynamicUpdateAttributeValueError(attr.name, staticOrDynamicUpdateAttributesWithMetadata.transformed[attr.name]);
            }
            return attr;
        });
        /**
         * 3.1 - Get referenced primary key attributes and validate that current update body can be safely applied
         */
        const explicitAttributesToUpdate = Object.entries(Object.assign({}, staticOrDynamicUpdateAttributesWithMetadata.transformed)).reduce((acc, [attrKey, attrValue]) => {
            // Attribute in Body that are in primary key attributes and have the do not require any updates
            if (primaryKeyAttributes[attrKey] !== attrValue) {
                acc[attrKey] = attrValue;
            }
            return acc;
        }, {});
        const affectedPrimaryKeyAttributes = this.getAffectedPrimaryKeyAttributes(entityClass, explicitAttributesToUpdate, staticOrDynamicUpdateAttributesWithMetadata.typeMetadata, {
            additionalAttributesDict: staticOrDynamicUpdateAttributesWithMetadata.transformed,
        });
        // validate primary key attributes
        if (!(0, is_empty_object_1.isEmptyObject)(affectedPrimaryKeyAttributes)) {
            // updates are not allowed for attributes that unique and also references primary key.
            if (uniqueAttributesToUpdate.length) {
                throw new common_1.InvalidUniqueAttributeUpdateError(affectedPrimaryKeyAttributes, uniqueAttributesToUpdate.map(attr => attr.name));
            }
        }
        /**
         * 3.2 - Get referenced indexes' attributes and validate that current update body can be safely applied
         */
        const affectedIndexes = this.getAffectedIndexesForAttributes(entityClass, staticOrDynamicUpdateAttributesWithMetadata.transformed, staticOrDynamicUpdateAttributesWithMetadata.typeMetadata, {
            nestedKeySeparator,
            additionalAttributesDict: Object.assign({}, primaryKeyAttributes),
        });
        /**
         * 4.0 - Build update Item body with given condition and options
         */
        const itemToUpdate = {
            TableName: tableName,
            Key: Object.assign({}, parsedPrimaryKey),
            ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            // request all new attributes
            ReturnValues: common_1.RETURN_VALUES.ALL_NEW,
        };
        /**
         * 4.1 - if 'where' was provided, build condition expression
         */
        if (options.where && !(0, is_empty_object_1.isEmptyObject)(options.where)) {
            const condition = this.expressionInputParser.parseToCondition(options.where);
            if (!condition) {
                throw new Error(`Failed to build condition expression for input: ${JSON.stringify(options.where)}`);
            }
            const { ConditionExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildConditionExpression(condition);
            // append condition expression if one was built
            itemToUpdate.ConditionExpression = ConditionExpression;
            itemToUpdate.ExpressionAttributeNames = Object.assign(Object.assign({}, ExpressionAttributeNames), itemToUpdate.ExpressionAttributeNames);
            itemToUpdate.ExpressionAttributeValues = Object.assign(Object.assign({}, ExpressionAttributeValues), itemToUpdate.ExpressionAttributeValues);
        }
        /**
         * 5.0 - update contains primary key attributes so it must be lazily updated
         * This requires deleting old item and writing new item to the table both in a transaction
         */
        if ((0, is_object_1.isObject)(affectedPrimaryKeyAttributes) &&
            !(0, is_empty_object_1.isEmptyObject)(affectedPrimaryKeyAttributes)) {
            const lazyLoadTransactionWriteItems = this.lazyToDynamoUpdatePrimaryKeyFactory(metadata.table, metadata.name, metadata.schema.primaryKey, {
                Item: Object.assign(Object.assign(Object.assign({}, affectedPrimaryKeyAttributes), affectedIndexes), staticOrDynamicUpdateAttributesWithMetadata.transformed),
                TableName: metadata.table.name,
                ReturnConsumedCapacity: itemToUpdate.ReturnConsumedCapacity,
                ReturnValues: itemToUpdate.ReturnValues,
                ConditionExpression: itemToUpdate.ConditionExpression,
                ExpressionAttributeNames: itemToUpdate.ExpressionAttributeNames,
                ExpressionAttributeValues: itemToUpdate.ExpressionAttributeValues,
            }, metadataOptions);
            return {
                primaryKeyAttributes,
                entityClass,
                lazyLoadTransactionWriteItems,
            };
        }
        /**
         * 5.0.1 - build update expression with user provided body and all other auto transformation
         */
        const update = this.expressionInputParser.parseToUpdate(Object.assign(Object.assign({}, rawAttributesToUpdate), affectedIndexes), staticOrDynamicUpdateAttributesWithMetadata.transformed);
        const { UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildUpdateExpression(update);
        itemToUpdate.UpdateExpression = UpdateExpression;
        itemToUpdate.ExpressionAttributeNames = Object.assign(Object.assign({}, ExpressionAttributeNames), itemToUpdate.ExpressionAttributeNames);
        itemToUpdate.ExpressionAttributeValues = Object.assign(Object.assign({}, ExpressionAttributeValues), itemToUpdate.ExpressionAttributeValues);
        /**
         * 5.1 - Update contains unique attributes, build a lazy unique attributes loader and return
         */
        if (uniqueAttributesToUpdate.length) {
            // if there are unique attributes, return a lazy loader, which will return write item list
            const lazyLoadTransactionWriteItems = this.lazyToDynamoUpdateUniqueItemFactory(metadata.table, metadata.name, uniqueAttributesToUpdate, (0, drop_prop_1.dropProp)(itemToUpdate, 'ReturnValues'), staticOrDynamicUpdateAttributesWithMetadata.transformed, metadataOptions);
            return {
                primaryKeyAttributes,
                entityClass,
                lazyLoadTransactionWriteItems,
            };
        }
        /**
         * 5.2 - return simple update body
         */
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.UPDATE,
            prefix: 'After',
            entityName: metadata.name,
            primaryKey: null,
            body: itemToUpdate,
        });
        return itemToUpdate;
    }
    toDynamoDeleteItem(entityClass, primaryKey, options, metadataOptions) {
        const metadata = this.connection.getEntityByTarget(entityClass);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.DELETE,
            prefix: 'Before',
            entityName: metadata.name,
            primaryKey,
        });
        const tableName = metadata.table.name;
        const parsedPrimaryKey = this.getParsedPrimaryKey(metadata.table, metadata.schema.primaryKey, primaryKey);
        if ((0, is_empty_object_1.isEmptyObject)(parsedPrimaryKey)) {
            throw new Error('Primary could not be resolved');
        }
        const uniqueAttributesToRemove = this.connection.getUniqueAttributesForEntity(entityClass);
        const mainItemToRemove = {
            TableName: tableName,
            Key: Object.assign({}, parsedPrimaryKey),
            ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
        };
        if ((options === null || options === void 0 ? void 0 : options.where) && !(0, is_empty_object_1.isEmptyObject)(options.where)) {
            const condition = this.expressionInputParser.parseToCondition(options === null || options === void 0 ? void 0 : options.where);
            if (!condition) {
                throw new Error(`Failed to build condition expression for input: ${JSON.stringify(options === null || options === void 0 ? void 0 : options.where)}`);
            }
            const { ConditionExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildConditionExpression(condition);
            mainItemToRemove.ConditionExpression = ConditionExpression;
            mainItemToRemove.ExpressionAttributeNames = Object.assign(Object.assign({}, mainItemToRemove.ExpressionAttributeNames), ExpressionAttributeNames);
            mainItemToRemove.ExpressionAttributeValues = Object.assign(Object.assign({}, mainItemToRemove.ExpressionAttributeValues), ExpressionAttributeValues);
        }
        if (!(uniqueAttributesToRemove === null || uniqueAttributesToRemove === void 0 ? void 0 : uniqueAttributesToRemove.length)) {
            // if item does not have any unique attributes return it as is
            this.connection.logger.logTransform({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                operation: common_1.TRANSFORM_TYPE.DELETE,
                prefix: 'After',
                entityName: metadata.name,
                primaryKey,
            });
            return mainItemToRemove;
        }
        // or return lazy resolver
        const lazyLoadTransactionWriteItems = this.lazyToDynamoRemoveItemFactory(metadata.table, metadata.name, uniqueAttributesToRemove, mainItemToRemove, metadataOptions);
        return {
            primaryKeyAttributes: primaryKey,
            entityClass,
            lazyLoadTransactionWriteItems,
        };
    }
    toDynamoQueryItem(entityClass, partitionKeyAttributes, queryOptions, metadataOptions) {
        var _a;
        const { table, schema, name } = this.connection.getEntityByTarget(entityClass);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.QUERY,
            prefix: 'Before',
            entityName: name,
            primaryKey: partitionKeyAttributes,
            options: queryOptions,
        });
        const queryIndexName = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryIndex;
        let indexToQuery;
        if (queryIndexName) {
            const matchingIndex = table.getIndexByKey(queryIndexName);
            if (!matchingIndex) {
                throw new common_1.NoSuchIndexFoundError(table.name, queryIndexName);
            }
            const matchingIndexOnEntity = schema.indexes && schema.indexes[queryIndexName];
            if (!matchingIndexOnEntity) {
                throw new Error(`Requested to query items from index "${queryIndexName}", but no such index exists on entity.`);
            }
            indexToQuery = matchingIndex;
        }
        // query will be executed against main table or
        // if querying local  index, then partition key will be same as main table
        const parsedPartitionKey = {};
        if (!queryIndexName ||
            !indexToQuery ||
            (indexToQuery === null || indexToQuery === void 0 ? void 0 : indexToQuery.type) === common_1.INDEX_TYPE.LSI) {
            parsedPartitionKey.name = table.partitionKey;
            parsedPartitionKey.value =
                typeof partitionKeyAttributes === 'string'
                    ? partitionKeyAttributes
                    : (0, parse_key_1.parseKey)(schema.primaryKey.attributes[table.partitionKey], partitionKeyAttributes);
        }
        else {
            // query is to be executed against global secondary index
            parsedPartitionKey.name = indexToQuery.partitionKey;
            const schemaForIndexToQuery = ((_a = schema.indexes) !== null && _a !== void 0 ? _a : {})[queryIndexName];
            parsedPartitionKey.value =
                typeof partitionKeyAttributes === 'string'
                    ? partitionKeyAttributes
                    : (0, parse_key_1.parseKey)(schemaForIndexToQuery.attributes[indexToQuery.partitionKey], partitionKeyAttributes);
        }
        const partitionKeyCondition = new key_condition_1.KeyCondition().equals(parsedPartitionKey.name, parsedPartitionKey.value);
        const partitionKeyConditionExpression = this.expressionBuilder.buildKeyConditionExpression(partitionKeyCondition);
        const parsedSortKey = {};
        // if no we are not querying against index, validate if table is using composite key
        if (!indexToQuery) {
            if (!table.usesCompositeKey()) {
                throw new Error(`Table ${table.name} does not use composite key, thus querying a sort key is not allowed`);
            }
            parsedSortKey.name = table.sortKey;
        }
        else {
            parsedSortKey.name = indexToQuery.sortKey;
        }
        // at this point we have resolved partition key and table to query
        let queryInputParams = Object.assign({ TableName: table.name, IndexName: queryIndexName, ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity }, partitionKeyConditionExpression);
        if (queryOptions && !(0, is_empty_object_1.isEmptyObject)(queryOptions)) {
            const { orderBy: order, limit, keyCondition, where, select, onlyCount, consistentRead, } = queryOptions;
            queryInputParams = Object.assign(Object.assign({}, queryInputParams), { Limit: limit, ConsistentRead: consistentRead });
            if (order) {
                queryInputParams.ScanIndexForward = order === common_1.QUERY_ORDER.ASC;
            }
            // if key condition was provided
            if (keyCondition && !(0, is_empty_object_1.isEmptyObject)(keyCondition)) {
                // build sort key condition
                const sortKeyCondition = this.expressionInputParser.parseToKeyCondition(parsedSortKey.name, keyCondition);
                // if condition resolution was successful, we can merge both partition and sort key conditions now
                const { KeyConditionExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildKeyConditionExpression(partitionKeyCondition.merge(sortKeyCondition));
                queryInputParams = Object.assign(Object.assign({}, queryInputParams), { KeyConditionExpression, ExpressionAttributeNames: Object.assign(Object.assign({}, queryInputParams.ExpressionAttributeNames), ExpressionAttributeNames), ExpressionAttributeValues: Object.assign(Object.assign({}, queryInputParams.ExpressionAttributeValues), ExpressionAttributeValues) });
            }
            // when filter conditions are given generate filter expression
            if (where && !(0, is_empty_object_1.isEmptyObject)(where)) {
                const filter = this.expressionInputParser.parseToFilter(where);
                if (!filter) {
                    throw new common_1.InvalidFilterInputError(where);
                }
                const { FilterExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildFilterExpression(filter);
                queryInputParams = Object.assign(Object.assign({}, queryInputParams), { FilterExpression, ExpressionAttributeNames: Object.assign(Object.assign({}, queryInputParams.ExpressionAttributeNames), ExpressionAttributeNames), ExpressionAttributeValues: Object.assign(Object.assign({}, queryInputParams.ExpressionAttributeValues), ExpressionAttributeValues) });
            }
            // check if only the count was requested
            if (onlyCount) {
                if (select === null || select === void 0 ? void 0 : select.length) {
                    throw new Error('Attributes projection and count can not be used together');
                }
                // count and projection selection can not be used together
                queryInputParams.Select = common_1.QUERY_SELECT_TYPE.COUNT;
            }
            // when projection keys are provided
            if (select && select.length) {
                const projection = this.expressionInputParser.parseToProjection(select);
                if (!projection) {
                    throw new common_1.InvalidSelectInputError(select);
                }
                const { ProjectionExpression, ExpressionAttributeNames } = this.expressionBuilder.buildProjectionExpression(projection);
                queryInputParams = Object.assign(Object.assign({}, queryInputParams), { ProjectionExpression, ExpressionAttributeNames: Object.assign(Object.assign({}, queryInputParams.ExpressionAttributeNames), ExpressionAttributeNames) });
            }
        }
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.QUERY,
            prefix: 'After',
            entityName: name,
            primaryKey: partitionKeyAttributes,
            body: queryInputParams,
        });
        return queryInputParams;
    }
    lazyToDynamoUpdatePrimaryKeyFactory(table, entityName, primaryKeySchema, newItemBody, metadataOptions) {
        return (previousItemBody) => {
            const updateTransactionItems = [
                {
                    Put: Object.assign(Object.assign({}, newItemBody), { 
                        // import existing current item
                        Item: Object.assign(Object.assign({}, previousItemBody), newItemBody.Item) }),
                },
            ];
            // if there was a previous existing item, basically remove it as part of this transaction
            if (previousItemBody && !(0, is_empty_object_1.isEmptyObject)(previousItemBody)) {
                updateTransactionItems.push({
                    Delete: {
                        TableName: table.name,
                        Key: Object.assign({}, this.getParsedPrimaryKey(table, primaryKeySchema, previousItemBody)),
                    },
                });
            }
            this.connection.logger.logTransform({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                operation: common_1.TRANSFORM_TYPE.UPDATE,
                prefix: 'After',
                entityName,
                primaryKey: null,
                body: updateTransactionItems,
            });
            return updateTransactionItems;
        };
    }
    /**
     * Lazy build update item input
     * This is helpful in cases where we don't you have all the attributes to build item input, and the caller will need to
     * to perform some sort of async call in order to fetch attributes and proceed with build
     *
     */
    lazyToDynamoUpdateUniqueItemFactory(table, entityName, uniqueAttributesToUpdate, mainItem, newBody, metadataOptions) {
        // returns transact write item list
        return (previousItemBody) => {
            // updating unique attributes also require checking if new value exists
            const uniqueRecordConditionExpression = this.expressionBuilder.buildUniqueRecordConditionExpression(table);
            // map all unique attributes to [put, delete] item tuple
            const uniqueAttributeInputs = uniqueAttributesToUpdate.flatMap(attr => {
                const uniqueAttributeWriteItems = [
                    {
                        Put: Object.assign({ TableName: table.name, Item: Object.assign({}, this.getParsedPrimaryKey(table, attr.unique, newBody)) }, uniqueRecordConditionExpression),
                    },
                ];
                // if unique attribute previously existed, remove it as part of the same transaction
                if (previousItemBody && previousItemBody[attr.name]) {
                    uniqueAttributeWriteItems.push({
                        Delete: {
                            TableName: table.name,
                            Key: Object.assign({}, this.getParsedPrimaryKey(table, attr.unique, previousItemBody)),
                        },
                    });
                }
                return uniqueAttributeWriteItems;
            });
            // in order for update express to succeed, all listed must succeed in a transaction
            const updateTransactionItems = [
                { Update: mainItem },
                ...uniqueAttributeInputs,
            ];
            this.connection.logger.logTransform({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                operation: common_1.TRANSFORM_TYPE.UPDATE,
                prefix: 'After',
                entityName,
                primaryKey: null,
                body: updateTransactionItems,
            });
            return updateTransactionItems;
        };
    }
    /**
     * lazily resolve all unique attribute items to remove
     * @param table
     * @param uniqueAttributesToRemove
     * @param mainItem
     */
    lazyToDynamoRemoveItemFactory(table, entityName, uniqueAttributesToRemove, mainItem, metadataOptions) {
        return (existingItemBody) => {
            let uniqueAttributeInputs = [];
            if (existingItemBody) {
                uniqueAttributeInputs = uniqueAttributesToRemove.map(attr => {
                    return {
                        Delete: {
                            TableName: table.name,
                            Key: Object.assign({}, this.getParsedPrimaryKey(table, attr.unique, existingItemBody)),
                        },
                    };
                });
            }
            const deleteTransactionItems = [
                {
                    Delete: mainItem,
                },
                ...uniqueAttributeInputs,
            ];
            this.connection.logger.logTransform({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                operation: common_1.TRANSFORM_TYPE.DELETE,
                prefix: 'After',
                entityName,
                primaryKey: null,
                body: deleteTransactionItems,
            });
            return deleteTransactionItems;
        };
    }
}
exports.DocumentClientRequestTransformer = DocumentClientRequestTransformer;
//# sourceMappingURL=data:application/json;base64,