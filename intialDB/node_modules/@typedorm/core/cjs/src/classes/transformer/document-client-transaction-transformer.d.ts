import { LazyTransactionWriteItemListLoader } from './is-lazy-transaction-write-item-list-loader';
import { WriteTransaction } from './../transaction/write-transaction';
import { Connection } from '../connection/connection';
import { LowOrderTransformers } from './low-order-transformers';
import { ReadTransaction } from '../transaction/read-transaction';
import { MetadataOptions } from './base-transformer';
import { DocumentClientTypes } from '@typedorm/document-client';
export declare class DocumentClientTransactionTransformer extends LowOrderTransformers {
    constructor(connection: Connection);
    toDynamoWriteTransactionItems(writeTransaction: WriteTransaction, metadataOptions?: MetadataOptions): {
        transactionItemList: DocumentClientTypes.TransactWriteItemList;
        lazyTransactionWriteItemListLoader: LazyTransactionWriteItemListLoader[];
    };
    toDynamoReadTransactionItems(readTransaction: ReadTransaction, metadataOptions?: MetadataOptions): {
        transactionItemList: DocumentClientTypes.TransactGetItemList;
    };
    /**
     * Parse each item in the request to be in one of the following collections
     * - transactionItemList: items that must be processed in a transaction
     */
    private innerTransformTransactionReadItems;
    /**
     * Parse each item in the request to be in one of the following collections
     * - transactionItemList: items that must be processed in a transaction
     * - lazyTransactionWriteItemListLoaderItems: items that are must be processed in transaction but also requires other requests to be made first (i.e delete of unique items)
     */
    private innerTransformTransactionWriteItems;
}
