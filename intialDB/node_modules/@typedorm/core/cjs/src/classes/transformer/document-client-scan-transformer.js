"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentClientScanTransformer = void 0;
const common_1 = require("@typedorm/common");
const is_empty_object_1 = require("../../helpers/is-empty-object");
const base_expression_input_1 = require("../expression/base-expression-input");
const filter_1 = require("../expression/filter");
const low_order_transformers_1 = require("./low-order-transformers");
class DocumentClientScanTransformer extends low_order_transformers_1.LowOrderTransformers {
    constructor(connection) {
        super(connection);
    }
    /**
     * Transforms TypeDORM input into dynamo scan operation input
     */
    toDynamoScanItem(scanOptions, metadataOptions) {
        var _a;
        this.connection.logger.logTransformScan({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_SCAN_TYPE.SCAN,
            prefix: 'Before',
            options: scanOptions,
        });
        const tableToScan = (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.entity)
            ? (_a = this.connection.getEntityByTarget(scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.entity)) === null || _a === void 0 ? void 0 : _a.table
            : this.connection.table;
        let verifiedIndexToScan;
        // validate if index requested to scan belongs to current resolved table
        if (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.scanIndex) {
            const scanIndexOptions = tableToScan.getIndexByKey(scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.scanIndex);
            if (!scanIndexOptions) {
                throw new common_1.NoSuchIndexFoundError(tableToScan.name, scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.scanIndex);
            }
        }
        let transformedScanInput = {
            TableName: tableToScan.name,
            IndexName: verifiedIndexToScan,
            ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
        };
        // transform additional options
        if (scanOptions && !(0, is_empty_object_1.isEmptyObject)(scanOptions)) {
            const { cursor, limit, where, onlyCount, select, entity } = scanOptions;
            transformedScanInput.Limit = limit;
            transformedScanInput.ExclusiveStartKey = cursor;
            // check if only the count was requested
            if (onlyCount) {
                if (select === null || select === void 0 ? void 0 : select.length) {
                    throw new Error('Attributes projection and count can not be used together');
                }
                // count and projection selection can not be used together
                transformedScanInput.Select = common_1.QUERY_SELECT_TYPE.COUNT;
            }
            // entity filter
            let entityFilter = undefined;
            if (entity) {
                const metadata = this.connection.getEntityByTarget(entity);
                if (!metadata) {
                    throw new common_1.NoSuchEntityExistsError(entity.name);
                }
                // build current entity filter
                entityFilter = this.expressionInputParser.parseToFilter({
                    [common_1.INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME]: {
                        EQ: metadata.name,
                    },
                });
            }
            // build filter expression
            let optionsFilter = undefined;
            if (where && !(0, is_empty_object_1.isEmptyObject)(where)) {
                const inputFilter = this.expressionInputParser.parseToFilter(where);
                if (!inputFilter) {
                    throw new common_1.InvalidFilterInputError(where);
                }
                optionsFilter = inputFilter;
            }
            // merge filters of fall back to none
            let filter;
            if (entityFilter && optionsFilter) {
                filter = new filter_1.Filter().mergeMany([entityFilter, optionsFilter], base_expression_input_1.MERGE_STRATEGY.AND);
            }
            else {
                filter = entityFilter || optionsFilter || null; // if non of the condition skip it all together
            }
            // if at least one condition was truthy, parse it and include it in the input
            if (filter) {
                const { FilterExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = this.expressionBuilder.buildFilterExpression(filter);
                transformedScanInput = Object.assign(Object.assign({}, transformedScanInput), { FilterExpression, ExpressionAttributeNames: Object.assign(Object.assign({}, transformedScanInput.ExpressionAttributeNames), ExpressionAttributeNames), ExpressionAttributeValues: Object.assign(Object.assign({}, transformedScanInput.ExpressionAttributeValues), ExpressionAttributeValues) });
            }
            // projection builder
            if (select === null || select === void 0 ? void 0 : select.length) {
                const projection = this.expressionInputParser.parseToProjection(select);
                if (!projection) {
                    throw new common_1.InvalidSelectInputError(select);
                }
                const { ProjectionExpression, ExpressionAttributeNames } = this.expressionBuilder.buildProjectionExpression(projection);
                transformedScanInput = Object.assign(Object.assign({}, transformedScanInput), { ProjectionExpression, ExpressionAttributeNames: Object.assign(Object.assign({}, transformedScanInput.ExpressionAttributeNames), ExpressionAttributeNames) });
            }
        }
        // validate value for segment and totalSegment before appending
        if ((scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments) !== undefined &&
            (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments) !== null) {
            if ((scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments) === 0) {
                throw new Error(`Invalid scan option totalSegment: ${scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments}.
        totalSegments is optional, but when provided it's value must be greater than 0.`);
            }
            if ((scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.segment) === undefined || (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.segment) === null) {
                throw new Error(`Invalid scan option segment: ${scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.segment}.
        When totalSegments value is defined, value for option 'segment' must also be defined.`);
            }
            if ((scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.segment) >= (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments)) {
                throw new Error(`Invalid scan option segment: ${scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.segment}.
        When totalSegments value is defined, value for option 'segment' must be one less than totalSegment size.`);
            }
            transformedScanInput.TotalSegments = scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments;
            transformedScanInput.Segment = scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.segment;
        }
        this.connection.logger.logTransformScan({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            prefix: 'After',
            operation: common_1.TRANSFORM_SCAN_TYPE.SCAN,
            body: transformedScanInput,
        });
        return transformedScanInput;
    }
    /**
     * Transforms DynamoDB scan output into entities
     */
    fromDynamoScanResponseItemList(itemList, metadataOptions) {
        const initialResponse = {
            items: [],
            unknownItems: [],
        };
        if (!itemList.length) {
            return initialResponse;
        }
        return itemList.reduce((acc, responseItem) => {
            const entityPhysicalName = responseItem[common_1.INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME];
            // early return if no entity metadata was found on item
            if (!entityPhysicalName) {
                acc.unknownItems.push(responseItem);
                return acc;
            }
            const entityMetadata = this.connection.getEntityByPhysicalName(entityPhysicalName);
            const reverseTransformedItem = this.fromDynamoEntity(entityMetadata.target, responseItem, metadataOptions);
            acc.items.push(reverseTransformedItem);
            return acc;
        }, initialResponse);
    }
}
exports.DocumentClientScanTransformer = DocumentClientScanTransformer;
//# sourceMappingURL=data:application/json;base64,