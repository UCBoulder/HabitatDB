import { DynamoEntityIndexesSchema } from './../metadata/entity-metadata';
import { EntityTarget, Table, CONSUMED_CAPACITY_TYPE } from '@typedorm/common';
import { Connection } from '../connection/connection';
import { DynamoEntitySchemaPrimaryKey } from '../metadata/entity-metadata';
import { ExpressionInputParser } from '../expression/expression-input-parser';
export interface MetadataOptions {
    requestId?: string;
    returnConsumedCapacity?: CONSUMED_CAPACITY_TYPE;
}
export interface MetadataOptions {
    requestId?: string;
    returnConsumedCapacity?: CONSUMED_CAPACITY_TYPE;
}
export declare abstract class BaseTransformer {
    protected connection: Connection;
    protected _expressionInputParser: ExpressionInputParser;
    constructor(connection: Connection);
    /**
     * Returns table name decorated for given entity class
     * @param entityClass Entity Class
     */
    getTableNameForEntity<Entity>(entityClass: EntityTarget<Entity>): string;
    applyClassTransformerFormations<Entity>(entity: Entity): Entity;
    /**
     * Transforms entity to dynamo db entity schema
     * @param entity Entity to transform to DynamoDB entity type
     */
    toDynamoEntity<Entity>(entity: Entity): any;
    getAffectedPrimaryKeyAttributes<Entity>(entityClass: EntityTarget<Entity>, attributes: Record<string, any>, attributesTypeMetadata: Record<string, 'static' | 'dynamic'>, options?: {
        additionalAttributesDict?: Record<string, any>;
    }): Record<string, string> | undefined;
    /**
     * Returns all affected indexes for given attributes
     * @param entityClass Entity class
     * @param attributes Attributes to check affected indexes for
     * @param options
     */
    getAffectedIndexesForAttributes<Entity>(entityClass: EntityTarget<Entity>, attributes: Record<string, any>, attributesTypeMetadata: Record<string, 'static' | 'dynamic'>, options?: {
        nestedKeySeparator?: string;
        additionalAttributesDict?: Record<string, any>;
    }): any;
    /**
     * Returns a primary key of an entity
     * @param entityClass Class of entity
     * @param attributes Attributes to parse into primary key
     */
    getParsedPrimaryKey<Entity>(table: Table, primaryKey: DynamoEntitySchemaPrimaryKey, attributes: Partial<Entity>): any;
    /**
     * Recursively parses all keys of given object and replaces placeholders with matching values
     * @private
     * @param schema schema to resolve
     * @param entity entity to resolve schema against
     */
    protected recursiveParseEntity<Entity = any>(schema: DynamoEntitySchemaPrimaryKey | DynamoEntityIndexesSchema, entity: Entity, isSparse?: boolean): any;
}
