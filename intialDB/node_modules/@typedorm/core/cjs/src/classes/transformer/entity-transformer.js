"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityTransformer = void 0;
const common_1 = require("@typedorm/common");
const class_transformer_1 = require("class-transformer");
const unparse_key_1 = require("../../helpers/unparse-key");
const base_transformer_1 = require("./base-transformer");
/**
 * Note: To use any of the base transformer methods, this default entity transformer should be used
 */
class EntityTransformer extends base_transformer_1.BaseTransformer {
    constructor(connection) {
        super(connection);
    }
    /**
     * Converts dynamodb entity to model defined in entities
     * @param entityClass - Target class to look metadata off
     * @param dynamoEntity
     */
    fromDynamoEntity(entityClass, dynamoEntity, metadataOptions) {
        var _a;
        const entityMetadata = this.connection.getEntityByTarget(entityClass);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.RESPONSE,
            prefix: 'Before',
            entityName: entityMetadata.name,
            primaryKey: null,
            body: dynamoEntity,
        });
        const vanillaAttributesToInclude = entityMetadata.attributes
            .filter(attr => !attr.hidden)
            .map(attr => attr.name);
        const primaryKeyAttributesToInclude = Object.keys(entityMetadata.schema.primaryKey.attributes).filter(attr => !vanillaAttributesToInclude.includes(attr));
        const entityInternalAttributeKeys = entityMetadata.internalAttributes.map(attr => attr.name);
        const entityHiddenAttributeKeys = entityMetadata.attributes
            .filter(attr => attr.hidden)
            .map(attr => attr.name);
        const entityMetadataSchemaIndexes = (_a = entityMetadata.schema.indexes) !== null && _a !== void 0 ? _a : {};
        const indexAttributesToInclude = Object.keys(entityMetadataSchemaIndexes)
            .map(key => {
            var _a;
            return Object.keys((_a = entityMetadataSchemaIndexes[key].attributes) !== null && _a !== void 0 ? _a : {});
        })
            .flat()
            .filter(attr => !vanillaAttributesToInclude.includes(attr));
        const plainEntityAttributes = Object.keys(dynamoEntity).reduce((acc, key) => {
            // if any of the below conditions are true, skip adding given attribute from returning response
            if (primaryKeyAttributesToInclude.includes(key) ||
                indexAttributesToInclude.includes(key) ||
                entityInternalAttributeKeys.includes(key) ||
                entityHiddenAttributeKeys.includes(key)) {
                return acc;
            }
            acc[key] = dynamoEntity[key];
            return acc;
        }, {});
        // get reflected constructor to avoid initialization issues with custom constructor
        const reflectedConstructor = Reflect.construct(Object, [], entityClass);
        // Perform a deep-copy of item returned by Document client to drop all the custom function types
        // Custom types are emitted by the document client in cases where dynamodb item was created outside the js ecosystem.
        // To correctly deserialize the returned values to the relevant Entity, it needs to be in a plain JSON structure.
        // i.e DynamoDB itself supports `StringSet` type but since js doesn't have a `StringSet` as a native type,
        // Therefore, DocumentClient wraps it as a custom `Set` type which must be turned into its JSON form before it can
        // be correctly deserialized by `class-transformer`.
        const deserializedEntityAttributes = JSON.parse(JSON.stringify(plainEntityAttributes));
        const transformedEntity = (0, class_transformer_1.plainToClassFromExist)(reflectedConstructor, deserializedEntityAttributes);
        this.connection.logger.logTransform({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TYPE.RESPONSE,
            prefix: 'After',
            entityName: entityMetadata.name,
            primaryKey: null,
            body: transformedEntity,
        });
        return transformedEntity;
    }
    fromDynamoKeyToAttributes(entityClass, dynamoKey) {
        var _a, _b, _c;
        const entityMetadata = this.connection.getEntityByTarget(entityClass);
        const primaryKeyAttributes = entityMetadata.schema.primaryKey.attributes;
        const interpolations = (_c = (_b = (_a = entityMetadata.schema.primaryKey) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b._interpolations) !== null && _c !== void 0 ? _c : {};
        const rawAttributes = Object.entries(primaryKeyAttributes).reduce((acc, [keyName, keyPattern]) => {
            var _a;
            const unParsed = (0, unparse_key_1.unParseKey)(keyPattern, dynamoKey[keyName], (_a = interpolations[keyName]) !== null && _a !== void 0 ? _a : []);
            acc = Object.assign(Object.assign({}, acc), unParsed);
            return acc;
        }, {});
        // like compare actual key with the schema and pull out variable name an it's values
        // then return those as key value pair
        const attributes = Object.entries(rawAttributes).reduce((acc, [attrName, value]) => {
            const attrMetadata = entityMetadata.attributes.find(attr => attr.name === attrName);
            if (!attrMetadata) {
                throw new Error(`Failed to reverse transform attribute ${attrName}, it was referenced in schema but it is not known to entity ${entityClass.name}`);
            }
            if ((attrMetadata.type === 'Boolean' || attrMetadata.type === 'Number') &&
                value) {
                acc[attrName] = JSON.parse(value);
            }
            else {
                acc[attrName] = value;
            }
            return acc;
        }, {});
        return attributes;
    }
}
exports.EntityTransformer = EntityTransformer;
//# sourceMappingURL=data:application/json;base64,