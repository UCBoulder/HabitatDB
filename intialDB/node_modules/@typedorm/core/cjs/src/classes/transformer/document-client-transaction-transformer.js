"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentClientTransactionTransformer = void 0;
const is_lazy_transaction_write_item_list_loader_1 = require("./is-lazy-transaction-write-item-list-loader");
const type_guards_1 = require("./../transaction/type-guards");
const common_1 = require("@typedorm/common");
const low_order_transformers_1 = require("./low-order-transformers");
const type_guards_2 = require("../transaction/type-guards");
const drop_prop_1 = require("../../helpers/drop-prop");
class DocumentClientTransactionTransformer extends low_order_transformers_1.LowOrderTransformers {
    constructor(connection) {
        super(connection);
    }
    toDynamoWriteTransactionItems(writeTransaction, metadataOptions) {
        const { items } = writeTransaction;
        this.connection.logger.logTransformTransaction({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TRANSACTION_TYPE.TRANSACTION_WRITE,
            prefix: 'Before',
            body: items,
        });
        const transformed = this.innerTransformTransactionWriteItems(items);
        this.connection.logger.logTransformTransaction({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TRANSACTION_TYPE.TRANSACTION_WRITE,
            prefix: 'After',
            body: transformed,
        });
        return transformed;
    }
    toDynamoReadTransactionItems(readTransaction, metadataOptions) {
        const { items } = readTransaction;
        this.connection.logger.logTransformTransaction({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TRANSACTION_TYPE.TRANSACTION_READ,
            prefix: 'Before',
            body: items,
        });
        const transformed = this.innerTransformTransactionReadItems(items);
        this.connection.logger.logTransformTransaction({
            requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
            operation: common_1.TRANSFORM_TRANSACTION_TYPE.TRANSACTION_READ,
            prefix: 'After',
            body: transformed,
        });
        return transformed;
    }
    /**
     * Parse each item in the request to be in one of the following collections
     * - transactionItemList: items that must be processed in a transaction
     */
    innerTransformTransactionReadItems(transactionItems, metadataOptions) {
        return transactionItems.reduce((acc, transactionItem) => {
            if ((0, type_guards_1.isTransactionAddGetItem)(transactionItem)) {
                const { get: { item, primaryKey, options }, } = transactionItem;
                const dynamoGetItemInput = this.toDynamoGetItem(item, primaryKey, options, metadataOptions);
                acc.transactionItemList.push({
                    Get: dynamoGetItemInput,
                });
            }
            else {
                throw new common_1.InvalidTransactionReadItemError(transactionItem);
            }
            return acc;
        }, {
            transactionItemList: [],
        });
    }
    /**
     * Parse each item in the request to be in one of the following collections
     * - transactionItemList: items that must be processed in a transaction
     * - lazyTransactionWriteItemListLoaderItems: items that are must be processed in transaction but also requires other requests to be made first (i.e delete of unique items)
     */
    innerTransformTransactionWriteItems(transactionItems, metadataOptions) {
        return transactionItems.reduce((acc, transactionItem) => {
            if ((0, type_guards_2.isTransactionAddCreateItem)(transactionItem)) {
                const { create: { item, options }, } = transactionItem;
                const dynamoPutItemInput = this.toDynamoPutItem(item, options, metadataOptions); // update
                if (!(0, type_guards_1.isWriteTransactionItemList)(dynamoPutItemInput)) {
                    acc.transactionItemList.push({
                        Put: dynamoPutItemInput,
                    });
                }
                else {
                    acc.transactionItemList.push(...dynamoPutItemInput);
                }
            }
            else if ((0, type_guards_1.isTransactionAddUpdateItem)(transactionItem)) {
                const { update: { item, primaryKey, body, options }, } = transactionItem;
                const dynamoUpdateItemInput = this.toDynamoUpdateItem(item, primaryKey, body, options, metadataOptions);
                if (!(0, is_lazy_transaction_write_item_list_loader_1.isLazyTransactionWriteItemListLoader)(dynamoUpdateItemInput)) {
                    acc.transactionItemList.push({
                        Update: (0, drop_prop_1.dropProp)(dynamoUpdateItemInput, 'ReturnValues'),
                    });
                }
                else {
                    acc.lazyTransactionWriteItemListLoader.push(dynamoUpdateItemInput);
                }
            }
            else if ((0, type_guards_1.isTransactionAddDeleteItem)(transactionItem)) {
                const { delete: { item, primaryKey, options }, } = transactionItem;
                const dynamoDeleteItemInput = this.toDynamoDeleteItem(item, primaryKey, options, metadataOptions);
                if (!(0, is_lazy_transaction_write_item_list_loader_1.isLazyTransactionWriteItemListLoader)(dynamoDeleteItemInput)) {
                    acc.transactionItemList.push({
                        Delete: dynamoDeleteItemInput,
                    });
                }
                else {
                    acc.lazyTransactionWriteItemListLoader.push(dynamoDeleteItemInput);
                }
            }
            else {
                throw new common_1.InvalidTransactionWriteItemError(transactionItem);
            }
            return acc;
        }, {
            transactionItemList: [],
            lazyTransactionWriteItemListLoader: [],
        });
    }
}
exports.DocumentClientTransactionTransformer = DocumentClientTransactionTransformer;
//# sourceMappingURL=data:application/json;base64,