"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributesMetadataBuilder = void 0;
const common_1 = require("@typedorm/common");
const is_used_for_primary_key_1 = require("../../helpers/is-used-for-primary-key");
const attribute_metadata_1 = require("../metadata/attribute-metadata");
const auto_generated_attribute_metadata_1 = require("../metadata/auto-generated-attribute-metadata");
class AttributesMetadataBuilder {
    constructor() { }
    build(table, attributeTargetEntityClass, decoratedEntityClass) {
        const getRawAttributesForEntity = common_1.MetadataManager.metadataStorage.getRawAttributesForEntity(attributeTargetEntityClass);
        return getRawAttributesForEntity.map(attr => {
            var _a, _b, _c, _d;
            const entityMetadata = this.tryGetEntityMetadata(attributeTargetEntityClass, decoratedEntityClass);
            // validate attribute names for primary key conflicts
            if ([
                (_a = entityMetadata.table) === null || _a === void 0 ? void 0 : _a.partitionKey,
                ((_b = entityMetadata.table) === null || _b === void 0 ? void 0 : _b.usesCompositeKey()) &&
                    ((_c = entityMetadata.table) === null || _c === void 0 ? void 0 : _c.sortKey),
            ]
                .filter(Boolean)
                .includes(attr.name)) {
                throw new common_1.ConflictingAttributeNameError({
                    attributeName: attr.name,
                    entity: entityMetadata.name,
                    tableName: ((_d = entityMetadata.table) === null || _d === void 0 ? void 0 : _d.name) || '',
                });
            }
            if ((0, common_1.IsAutoGenerateAttributeRawMetadataOptions)(attr)) {
                return this.validateAndBuildAutoGeneratedAttributeMetadata(attr, entityMetadata);
            }
            return new attribute_metadata_1.AttributeMetadata(Object.assign({ table, 
                // when working with entity with multiple inheritance, use class with @Entity() if available
                entityClass: decoratedEntityClass !== null && decoratedEntityClass !== void 0 ? decoratedEntityClass : attributeTargetEntityClass }, attr));
        });
    }
    validateAndBuildAutoGeneratedAttributeMetadata(attr, entityMetadata) {
        if (attr.autoUpdate) {
            if ((0, is_used_for_primary_key_1.isUsedForPrimaryKey)(entityMetadata.primaryKey, attr.name)) {
                throw new Error(`Failed to build metadata for "${attr.name}", attributes referenced in primary key cannot be auto updated.`);
            }
        }
        return new auto_generated_attribute_metadata_1.AutoGeneratedAttributeMetadata(Object.assign({}, attr));
    }
    tryGetEntityMetadata(attributeTargetEntityClass, decoratedEntityClass) {
        let entityMetadata;
        try {
            // check if attribute target entity has metadata
            entityMetadata = common_1.MetadataManager.metadataStorage.getRawEntityByTarget(attributeTargetEntityClass);
        }
        catch (err) {
            // fall back to using derived class metadata
            entityMetadata =
                common_1.MetadataManager.metadataStorage.getRawEntityByTarget(decoratedEntityClass);
        }
        return entityMetadata;
    }
}
exports.AttributesMetadataBuilder = AttributesMetadataBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLW1ldGFkYXRhLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jbGFzc2VzL2Nvbm5lY3Rpb24vYXR0cmlidXRlLW1ldGFkYXRhLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBTzBCO0FBQzFCLG1GQUEwRTtBQUMxRSx1RUFBaUU7QUFDakUscUdBQTZGO0FBRTdGLE1BQWEseUJBQXlCO0lBQ3BDLGdCQUFlLENBQUM7SUFFaEIsS0FBSyxDQUNILEtBQVksRUFDWiwwQkFBb0MsRUFDcEMsb0JBQThCO1FBRTlCLE1BQU0seUJBQXlCLEdBQzdCLHdCQUFlLENBQUMsZUFBZSxDQUFDLHlCQUF5QixDQUN2RCwwQkFBMEIsQ0FDM0IsQ0FBQztRQUVKLE9BQU8seUJBQXlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFOztZQUMxQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQzlDLDBCQUEwQixFQUMxQixvQkFBb0IsQ0FDckIsQ0FBQztZQUVGLHFEQUFxRDtZQUNyRCxJQUNFO2dCQUNFLE1BQUEsY0FBYyxDQUFDLEtBQUssMENBQUUsWUFBWTtnQkFDbEMsQ0FBQSxNQUFBLGNBQWMsQ0FBQyxLQUFLLDBDQUFFLGdCQUFnQixFQUFFO3FCQUN0QyxNQUFBLGNBQWMsQ0FBQyxLQUFLLDBDQUFFLE9BQU8sQ0FBQTthQUNoQztpQkFDRSxNQUFNLENBQUMsT0FBTyxDQUFDO2lCQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3RCO2dCQUNBLE1BQU0sSUFBSSxzQ0FBNkIsQ0FBQztvQkFDdEMsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUN4QixNQUFNLEVBQUUsY0FBYyxDQUFDLElBQUk7b0JBQzNCLFNBQVMsRUFBRSxDQUFBLE1BQUEsY0FBYyxDQUFDLEtBQUssMENBQUUsSUFBSSxLQUFJLEVBQUU7aUJBQzVDLENBQUMsQ0FBQzthQUNKO1lBRUQsSUFBSSxJQUFBLGtEQUF5QyxFQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNuRCxPQUFPLElBQUksQ0FBQyw4Q0FBOEMsQ0FDeEQsSUFBSSxFQUNKLGNBQWMsQ0FDZixDQUFDO2FBQ0g7WUFFRCxPQUFPLElBQUksc0NBQWlCLGlCQUMxQixLQUFLO2dCQUNMLDRGQUE0RjtnQkFDNUYsV0FBVyxFQUFFLG9CQUFvQixhQUFwQixvQkFBb0IsY0FBcEIsb0JBQW9CLEdBQUksMEJBQTBCLElBQzVELElBQUksRUFDUCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sOENBQThDLENBQ3BELElBQTZDLEVBQzdDLGNBQXdDO1FBRXhDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLElBQUEsNkNBQW1CLEVBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzdELE1BQU0sSUFBSSxLQUFLLENBQ2IsaUNBQWlDLElBQUksQ0FBQyxJQUFJLGlFQUFpRSxDQUM1RyxDQUFDO2FBQ0g7U0FDRjtRQUVELE9BQU8sSUFBSSxrRUFBOEIsbUJBQ3BDLElBQUksRUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9CQUFvQixDQUMxQiwwQkFBb0MsRUFDcEMsb0JBQThCO1FBRTlCLElBQUksY0FBd0MsQ0FBQztRQUU3QyxJQUFJO1lBQ0YsZ0RBQWdEO1lBQ2hELGNBQWMsR0FBRyx3QkFBZSxDQUFDLGVBQWUsQ0FBQyxvQkFBb0IsQ0FDbkUsMEJBQTBCLENBQzNCLENBQUM7U0FDSDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osNENBQTRDO1lBQzVDLGNBQWM7Z0JBQ1osd0JBQWUsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQ2xELG9CQUFvQixDQUNyQixDQUFDO1NBQ0w7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUExRkQsOERBMEZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXV0b0dlbmVyYXRlQXR0cmlidXRlUmF3TWV0YWRhdGFPcHRpb25zLFxuICBDb25mbGljdGluZ0F0dHJpYnV0ZU5hbWVFcnJvcixcbiAgRW50aXR5UmF3TWV0YWRhdGFPcHRpb25zLFxuICBJc0F1dG9HZW5lcmF0ZUF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9ucyxcbiAgTWV0YWRhdGFNYW5hZ2VyLFxuICBUYWJsZSxcbn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge2lzVXNlZEZvclByaW1hcnlLZXl9IGZyb20gJy4uLy4uL2hlbHBlcnMvaXMtdXNlZC1mb3ItcHJpbWFyeS1rZXknO1xuaW1wb3J0IHtBdHRyaWJ1dGVNZXRhZGF0YX0gZnJvbSAnLi4vbWV0YWRhdGEvYXR0cmlidXRlLW1ldGFkYXRhJztcbmltcG9ydCB7QXV0b0dlbmVyYXRlZEF0dHJpYnV0ZU1ldGFkYXRhfSBmcm9tICcuLi9tZXRhZGF0YS9hdXRvLWdlbmVyYXRlZC1hdHRyaWJ1dGUtbWV0YWRhdGEnO1xuXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlc01ldGFkYXRhQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBidWlsZChcbiAgICB0YWJsZTogVGFibGUsXG4gICAgYXR0cmlidXRlVGFyZ2V0RW50aXR5Q2xhc3M6IEZ1bmN0aW9uLFxuICAgIGRlY29yYXRlZEVudGl0eUNsYXNzOiBGdW5jdGlvblxuICApIHtcbiAgICBjb25zdCBnZXRSYXdBdHRyaWJ1dGVzRm9yRW50aXR5ID1cbiAgICAgIE1ldGFkYXRhTWFuYWdlci5tZXRhZGF0YVN0b3JhZ2UuZ2V0UmF3QXR0cmlidXRlc0ZvckVudGl0eShcbiAgICAgICAgYXR0cmlidXRlVGFyZ2V0RW50aXR5Q2xhc3NcbiAgICAgICk7XG5cbiAgICByZXR1cm4gZ2V0UmF3QXR0cmlidXRlc0ZvckVudGl0eS5tYXAoYXR0ciA9PiB7XG4gICAgICBjb25zdCBlbnRpdHlNZXRhZGF0YSA9IHRoaXMudHJ5R2V0RW50aXR5TWV0YWRhdGEoXG4gICAgICAgIGF0dHJpYnV0ZVRhcmdldEVudGl0eUNsYXNzLFxuICAgICAgICBkZWNvcmF0ZWRFbnRpdHlDbGFzc1xuICAgICAgKTtcblxuICAgICAgLy8gdmFsaWRhdGUgYXR0cmlidXRlIG5hbWVzIGZvciBwcmltYXJ5IGtleSBjb25mbGljdHNcbiAgICAgIGlmIChcbiAgICAgICAgW1xuICAgICAgICAgIGVudGl0eU1ldGFkYXRhLnRhYmxlPy5wYXJ0aXRpb25LZXksXG4gICAgICAgICAgZW50aXR5TWV0YWRhdGEudGFibGU/LnVzZXNDb21wb3NpdGVLZXkoKSAmJlxuICAgICAgICAgICAgZW50aXR5TWV0YWRhdGEudGFibGU/LnNvcnRLZXksXG4gICAgICAgIF1cbiAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgLmluY2x1ZGVzKGF0dHIubmFtZSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdBdHRyaWJ1dGVOYW1lRXJyb3Ioe1xuICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IGF0dHIubmFtZSxcbiAgICAgICAgICBlbnRpdHk6IGVudGl0eU1ldGFkYXRhLm5hbWUsXG4gICAgICAgICAgdGFibGVOYW1lOiBlbnRpdHlNZXRhZGF0YS50YWJsZT8ubmFtZSB8fCAnJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChJc0F1dG9HZW5lcmF0ZUF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9ucyhhdHRyKSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUFuZEJ1aWxkQXV0b0dlbmVyYXRlZEF0dHJpYnV0ZU1ldGFkYXRhKFxuICAgICAgICAgIGF0dHIsXG4gICAgICAgICAgZW50aXR5TWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVNZXRhZGF0YSh7XG4gICAgICAgIHRhYmxlLFxuICAgICAgICAvLyB3aGVuIHdvcmtpbmcgd2l0aCBlbnRpdHkgd2l0aCBtdWx0aXBsZSBpbmhlcml0YW5jZSwgdXNlIGNsYXNzIHdpdGggQEVudGl0eSgpIGlmIGF2YWlsYWJsZVxuICAgICAgICBlbnRpdHlDbGFzczogZGVjb3JhdGVkRW50aXR5Q2xhc3MgPz8gYXR0cmlidXRlVGFyZ2V0RW50aXR5Q2xhc3MsXG4gICAgICAgIC4uLmF0dHIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVBbmRCdWlsZEF1dG9HZW5lcmF0ZWRBdHRyaWJ1dGVNZXRhZGF0YShcbiAgICBhdHRyOiBBdXRvR2VuZXJhdGVBdHRyaWJ1dGVSYXdNZXRhZGF0YU9wdGlvbnMsXG4gICAgZW50aXR5TWV0YWRhdGE6IEVudGl0eVJhd01ldGFkYXRhT3B0aW9uc1xuICApIHtcbiAgICBpZiAoYXR0ci5hdXRvVXBkYXRlKSB7XG4gICAgICBpZiAoaXNVc2VkRm9yUHJpbWFyeUtleShlbnRpdHlNZXRhZGF0YS5wcmltYXJ5S2V5LCBhdHRyLm5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRmFpbGVkIHRvIGJ1aWxkIG1ldGFkYXRhIGZvciBcIiR7YXR0ci5uYW1lfVwiLCBhdHRyaWJ1dGVzIHJlZmVyZW5jZWQgaW4gcHJpbWFyeSBrZXkgY2Fubm90IGJlIGF1dG8gdXBkYXRlZC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBdXRvR2VuZXJhdGVkQXR0cmlidXRlTWV0YWRhdGEoe1xuICAgICAgLi4uYXR0cixcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdHJ5R2V0RW50aXR5TWV0YWRhdGEoXG4gICAgYXR0cmlidXRlVGFyZ2V0RW50aXR5Q2xhc3M6IEZ1bmN0aW9uLFxuICAgIGRlY29yYXRlZEVudGl0eUNsYXNzOiBGdW5jdGlvblxuICApIHtcbiAgICBsZXQgZW50aXR5TWV0YWRhdGE6IEVudGl0eVJhd01ldGFkYXRhT3B0aW9ucztcblxuICAgIHRyeSB7XG4gICAgICAvLyBjaGVjayBpZiBhdHRyaWJ1dGUgdGFyZ2V0IGVudGl0eSBoYXMgbWV0YWRhdGFcbiAgICAgIGVudGl0eU1ldGFkYXRhID0gTWV0YWRhdGFNYW5hZ2VyLm1ldGFkYXRhU3RvcmFnZS5nZXRSYXdFbnRpdHlCeVRhcmdldChcbiAgICAgICAgYXR0cmlidXRlVGFyZ2V0RW50aXR5Q2xhc3NcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBmYWxsIGJhY2sgdG8gdXNpbmcgZGVyaXZlZCBjbGFzcyBtZXRhZGF0YVxuICAgICAgZW50aXR5TWV0YWRhdGEgPVxuICAgICAgICBNZXRhZGF0YU1hbmFnZXIubWV0YWRhdGFTdG9yYWdlLmdldFJhd0VudGl0eUJ5VGFyZ2V0KFxuICAgICAgICAgIGRlY29yYXRlZEVudGl0eUNsYXNzXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudGl0eU1ldGFkYXRhO1xuICB9XG59XG4iXX0=