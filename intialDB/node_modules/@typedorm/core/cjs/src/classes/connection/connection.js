"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
const common_1 = require("@typedorm/common");
const common_2 = require("@typedorm/common");
const document_client_1 = require("@typedorm/document-client");
const is_used_for_primary_key_1 = require("../../helpers/is-used-for-primary-key");
const batch_manager_1 = require("../manager/batch-manager");
const entity_manager_1 = require("../manager/entity-manager");
const scan_manager_1 = require("../manager/scan-manager");
const transaction_manager_1 = require("../manager/transaction-manager");
const connection_metadata_builder_1 = require("./connection-metadata-builder");
class Connection {
    constructor(options, destroySelf) {
        var _a;
        this.options = options;
        this.destroySelf = destroySelf;
        const { table, name = 'default' } = options;
        if (table) {
            this.table = table;
        }
        this.name = name;
        this.entityManager = new entity_manager_1.EntityManager(this);
        this.batchManager = new batch_manager_1.BatchManager(this);
        this.transactionManger = new transaction_manager_1.TransactionManager(this);
        this.scanManager = new scan_manager_1.ScanManager(this);
        this.defaultConfig = {
            queryItemsImplicitLimit: (_a = options.dynamoQueryItemsImplicitLimit) !== null && _a !== void 0 ? _a : common_1.DYNAMO_QUERY_ITEMS_IMPLICIT_LIMIT,
        };
        this.documentClient = this.loadOrInitiateDocumentClient(options.documentClient);
        /**
         * This makes sure that we only ever build entity metadatas once per connection
         */
        this.isConnected = false;
        this.logger = new common_1.DebugLogger();
    }
    connect() {
        if (this.isConnected) {
            throw new Error('There is already an active connection, Connect should only be called once per application.');
        }
        try {
            this._entityMetadatas = new Map(this.buildMetadatas().map(entityMeta => [
                entityMeta.target.name,
                entityMeta,
            ]));
            this.isConnected = true;
            return this;
        }
        catch (err) {
            // Failed to connect to connection, clear self from connection manager
            this.destroySelf(this.name);
            throw err;
        }
    }
    get entityMetadatas() {
        return Array.from(this._entityMetadatas.values());
    }
    hasMetadata(entityClass) {
        return !!this.getEntityByTarget(entityClass);
    }
    getAttributesForEntity(entityClass) {
        const attributesMap = this._entityMetadatas.get(entityClass.name);
        if (!attributesMap) {
            throw new Error(`Cannot find attributes for entity "${entityClass.name}".`);
        }
        return attributesMap.attributes;
    }
    get globalTable() {
        return this.table;
    }
    /**
     * Returns any attributes marked as unique
     * If attribute used in a primary key is marked as unique, it is ignored, since all primary key are always unique
     * @param entityClass
     */
    getUniqueAttributesForEntity(entityClass) {
        const entityMetadata = this.getEntityByTarget(entityClass);
        return this.getAttributesForEntity(entityClass).filter(attr => {
            // only attributes that are not part of primary key should be included
            return ((attr === null || attr === void 0 ? void 0 : attr.unique) &&
                !(0, is_used_for_primary_key_1.isUsedForPrimaryKey)(entityMetadata.schema.primaryKey, attr.name));
        });
    }
    /**
     * Returns a list of attribute names that are referenced in primary key
     * @param entityClass Entity to get primary key attributes for
     * @returns
     */
    getPrimaryKeyAttributeInterpolationsForEntity(entityClass) {
        var _a;
        const entityMetadata = this.getEntityByTarget(entityClass);
        return [
            ...new Set(Object.values((_a = entityMetadata.schema.primaryKey.metadata._interpolations) !== null && _a !== void 0 ? _a : {}).flat()),
        ];
    }
    getEntityByTarget(entityClass) {
        const metadata = this._entityMetadatas.get(entityClass.name);
        if (!metadata) {
            throw new Error(`No such entity named "${entityClass.name}" is known to TypeDORM, make sure it is declared at the connection creation time.`);
        }
        return metadata;
    }
    getEntityByPhysicalName(name) {
        const entitySpec = (0, common_1.getEntityDefinition)(name);
        if (!entitySpec) {
            throw new common_1.NoSuchEntityExistsError(name);
        }
        return this.getEntityByTarget(entitySpec.target);
    }
    getAutoUpdateAttributes(entityClass) {
        return this.getAttributesForEntity(entityClass).filter(attr => attr === null || attr === void 0 ? void 0 : attr.autoUpdate);
    }
    isUsedForPrimaryKey(primaryKey, attributeName) {
        var _a;
        const primaryKeyInterpolations = (_a = primaryKey.metadata._interpolations) !== null && _a !== void 0 ? _a : {};
        return Object.keys(primaryKeyInterpolations).some(key => {
            const currInterpolation = primaryKeyInterpolations[key];
            return currInterpolation.includes(attributeName);
        });
    }
    buildMetadatas() {
        return new connection_metadata_builder_1.ConnectionMetadataBuilder(this).buildEntityMetadatas(this.options.entities);
    }
    loadOrInitiateDocumentClient(documentClient) {
        if (!documentClient) {
            const AWSModule = (0, common_2.loadPackage)('aws-sdk');
            return new document_client_1.DocumentClientV2(new AWSModule.DynamoDB.DocumentClient());
        }
        if (documentClient instanceof document_client_1.DocumentClientV2) {
            return documentClient;
        }
        else if (documentClient instanceof document_client_1.DocumentClientV3) {
            return documentClient;
        }
        else {
            return new document_client_1.DocumentClientV2(documentClient);
        }
    }
}
exports.Connection = Connection;
//# sourceMappingURL=data:application/json;base64,