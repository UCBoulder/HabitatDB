"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityMetadataBuilder = void 0;
const common_1 = require("@typedorm/common");
const entity_metadata_1 = require("../metadata/entity-metadata");
const attribute_metadata_builder_1 = require("./attribute-metadata-builder");
class EntityMetadataBuilder {
    constructor(connection) {
        this.connection = connection;
        this.attributesMetadataBuilder = new attribute_metadata_builder_1.AttributesMetadataBuilder();
    }
    build(entityClasses) {
        return entityClasses.map(decoratedEntityClass => {
            const { target, table, name, primaryKey, indexes } = common_1.MetadataManager.metadataStorage.getRawEntityByTarget(decoratedEntityClass);
            if (table) {
                // if no entity level table is defined fallback to global connection table
                this.table = table;
            }
            else {
                this.table = this.connection.table;
            }
            if (!this.table) {
                throw new common_1.MissingRequiredTableConfig(decoratedEntityClass.name);
            }
            const inheritedClasses = this.recursiveGetInheritanceTree(decoratedEntityClass);
            // metadata are sorted by [very base class] -> [very derived class]
            const inheritedEntitiesAttributesMetadata = inheritedClasses
                .map(derivedClass => this.attributesMetadataBuilder.build(this.table, derivedClass, decoratedEntityClass))
                .reverse();
            const deNormalizedAttributesMap = inheritedEntitiesAttributesMetadata
                .flat()
                .reduce((acc, current) => {
                // when inherited class defined same attribute again with different config, it should be used over base class
                // attribute definition on child class take precedence over base class
                acc.set(current.name, current);
                return acc;
            }, new Map());
            // reverse to return [very derived class] -> [very base class] attributes
            const allAttributesForEntity = Array.from(deNormalizedAttributesMap.values()).reverse();
            // At the moment we do simple store metadata and retrieve for entities,
            // this however needs to support extending Entity
            return new entity_metadata_1.EntityMetadata({
                connection: this.connection,
                table: this.table,
                target,
                attributes: allAttributesForEntity,
                name,
                primaryKey,
                indexes,
            });
        });
    }
    /**
     * Returns inheritance tree of given entity
     * Inheritance tree includes entities from current -> very child -> very parent
     * @param entityClass
     * @param tree
     * @returns [originalEntity, parent of originalEntity as parent1, parent of parent1 as parent2]
     */
    recursiveGetInheritanceTree(entityClass, tree = []) {
        tree.push(entityClass);
        const proto = Object.getPrototypeOf(entityClass);
        if (proto && proto.name) {
            return this.recursiveGetInheritanceTree(proto, tree);
        }
        return tree;
    }
}
exports.EntityMetadataBuilder = EntityMetadataBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LW1ldGFkYXRhLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9jbGFzc2VzL2Nvbm5lY3Rpb24vZW50aXR5LW1ldGFkYXRhLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBSTBCO0FBQzFCLGlFQUdxQztBQUNyQyw2RUFBdUU7QUFHdkUsTUFBYSxxQkFBcUI7SUFHaEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN4QyxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxzREFBeUIsRUFBRSxDQUFDO0lBQ25FLENBQUM7SUFDRCxLQUFLLENBQUMsYUFBeUI7UUFDN0IsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDOUMsTUFBTSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUMsR0FDOUMsd0JBQWUsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQ2xELG9CQUFvQixDQUNyQixDQUFDO1lBRUosSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsMEVBQTBFO2dCQUMxRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUNwQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO2FBQ3BDO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLG1DQUEwQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pFO1lBRUQsTUFBTSxnQkFBZ0IsR0FDcEIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFFekQsbUVBQW1FO1lBQ25FLE1BQU0sbUNBQW1DLEdBQUcsZ0JBQWdCO2lCQUN6RCxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FDbEIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FDbEMsSUFBSSxDQUFDLEtBQUssRUFDVixZQUFZLEVBQ1osb0JBQW9CLENBQ3JCLENBQ0Y7aUJBQ0EsT0FBTyxFQUFFLENBQUM7WUFFYixNQUFNLHlCQUF5QixHQUFHLG1DQUFtQztpQkFDbEUsSUFBSSxFQUFFO2lCQUNOLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRTtnQkFDdkIsNkdBQTZHO2dCQUM3RyxzRUFBc0U7Z0JBQ3RFLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDL0IsT0FBTyxHQUFHLENBQUM7WUFDYixDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQWlDLENBQUMsQ0FBQztZQUUvQyx5RUFBeUU7WUFDekUsTUFBTSxzQkFBc0IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUN2Qyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsQ0FDbkMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUVaLHVFQUF1RTtZQUN2RSxpREFBaUQ7WUFFakQsT0FBTyxJQUFJLGdDQUFjLENBQUM7Z0JBQ3hCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDM0IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNqQixNQUFNO2dCQUNOLFVBQVUsRUFBRSxzQkFBc0I7Z0JBQ2xDLElBQUk7Z0JBQ0osVUFBVTtnQkFDVixPQUFPO2FBQ1IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ssMkJBQTJCLENBQ2pDLFdBQXFCLEVBQ3JCLE9BQW1CLEVBQUU7UUFFckIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFyRkQsc0RBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTWV0YWRhdGFNYW5hZ2VyLFxuICBNaXNzaW5nUmVxdWlyZWRUYWJsZUNvbmZpZyxcbiAgVGFibGUsXG59IGZyb20gJ0B0eXBlZG9ybS9jb21tb24nO1xuaW1wb3J0IHtcbiAgQXR0cmlidXRlTWV0YWRhdGFUeXBlLFxuICBFbnRpdHlNZXRhZGF0YSxcbn0gZnJvbSAnLi4vbWV0YWRhdGEvZW50aXR5LW1ldGFkYXRhJztcbmltcG9ydCB7QXR0cmlidXRlc01ldGFkYXRhQnVpbGRlcn0gZnJvbSAnLi9hdHRyaWJ1dGUtbWV0YWRhdGEtYnVpbGRlcic7XG5pbXBvcnQge0Nvbm5lY3Rpb259IGZyb20gJy4vY29ubmVjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlNZXRhZGF0YUJ1aWxkZXIge1xuICB0YWJsZTogVGFibGU7XG4gIHByaXZhdGUgYXR0cmlidXRlc01ldGFkYXRhQnVpbGRlcjogQXR0cmlidXRlc01ldGFkYXRhQnVpbGRlcjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25uZWN0aW9uOiBDb25uZWN0aW9uKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzTWV0YWRhdGFCdWlsZGVyID0gbmV3IEF0dHJpYnV0ZXNNZXRhZGF0YUJ1aWxkZXIoKTtcbiAgfVxuICBidWlsZChlbnRpdHlDbGFzc2VzOiBGdW5jdGlvbltdKTogRW50aXR5TWV0YWRhdGFbXSB7XG4gICAgcmV0dXJuIGVudGl0eUNsYXNzZXMubWFwKGRlY29yYXRlZEVudGl0eUNsYXNzID0+IHtcbiAgICAgIGNvbnN0IHt0YXJnZXQsIHRhYmxlLCBuYW1lLCBwcmltYXJ5S2V5LCBpbmRleGVzfSA9XG4gICAgICAgIE1ldGFkYXRhTWFuYWdlci5tZXRhZGF0YVN0b3JhZ2UuZ2V0UmF3RW50aXR5QnlUYXJnZXQoXG4gICAgICAgICAgZGVjb3JhdGVkRW50aXR5Q2xhc3NcbiAgICAgICAgKTtcblxuICAgICAgaWYgKHRhYmxlKSB7XG4gICAgICAgIC8vIGlmIG5vIGVudGl0eSBsZXZlbCB0YWJsZSBpcyBkZWZpbmVkIGZhbGxiYWNrIHRvIGdsb2JhbCBjb25uZWN0aW9uIHRhYmxlXG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGFibGUgPSB0aGlzLmNvbm5lY3Rpb24udGFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy50YWJsZSkge1xuICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1JlcXVpcmVkVGFibGVDb25maWcoZGVjb3JhdGVkRW50aXR5Q2xhc3MubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGluaGVyaXRlZENsYXNzZXMgPVxuICAgICAgICB0aGlzLnJlY3Vyc2l2ZUdldEluaGVyaXRhbmNlVHJlZShkZWNvcmF0ZWRFbnRpdHlDbGFzcyk7XG5cbiAgICAgIC8vIG1ldGFkYXRhIGFyZSBzb3J0ZWQgYnkgW3ZlcnkgYmFzZSBjbGFzc10gLT4gW3ZlcnkgZGVyaXZlZCBjbGFzc11cbiAgICAgIGNvbnN0IGluaGVyaXRlZEVudGl0aWVzQXR0cmlidXRlc01ldGFkYXRhID0gaW5oZXJpdGVkQ2xhc3Nlc1xuICAgICAgICAubWFwKGRlcml2ZWRDbGFzcyA9PlxuICAgICAgICAgIHRoaXMuYXR0cmlidXRlc01ldGFkYXRhQnVpbGRlci5idWlsZChcbiAgICAgICAgICAgIHRoaXMudGFibGUsXG4gICAgICAgICAgICBkZXJpdmVkQ2xhc3MsXG4gICAgICAgICAgICBkZWNvcmF0ZWRFbnRpdHlDbGFzc1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICAucmV2ZXJzZSgpO1xuXG4gICAgICBjb25zdCBkZU5vcm1hbGl6ZWRBdHRyaWJ1dGVzTWFwID0gaW5oZXJpdGVkRW50aXRpZXNBdHRyaWJ1dGVzTWV0YWRhdGFcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAucmVkdWNlKChhY2MsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAvLyB3aGVuIGluaGVyaXRlZCBjbGFzcyBkZWZpbmVkIHNhbWUgYXR0cmlidXRlIGFnYWluIHdpdGggZGlmZmVyZW50IGNvbmZpZywgaXQgc2hvdWxkIGJlIHVzZWQgb3ZlciBiYXNlIGNsYXNzXG4gICAgICAgICAgLy8gYXR0cmlidXRlIGRlZmluaXRpb24gb24gY2hpbGQgY2xhc3MgdGFrZSBwcmVjZWRlbmNlIG92ZXIgYmFzZSBjbGFzc1xuICAgICAgICAgIGFjYy5zZXQoY3VycmVudC5uYW1lLCBjdXJyZW50KTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCBuZXcgTWFwPHN0cmluZywgQXR0cmlidXRlTWV0YWRhdGFUeXBlPigpKTtcblxuICAgICAgLy8gcmV2ZXJzZSB0byByZXR1cm4gW3ZlcnkgZGVyaXZlZCBjbGFzc10gLT4gW3ZlcnkgYmFzZSBjbGFzc10gYXR0cmlidXRlc1xuICAgICAgY29uc3QgYWxsQXR0cmlidXRlc0ZvckVudGl0eSA9IEFycmF5LmZyb20oXG4gICAgICAgIGRlTm9ybWFsaXplZEF0dHJpYnV0ZXNNYXAudmFsdWVzKClcbiAgICAgICkucmV2ZXJzZSgpO1xuXG4gICAgICAvLyBBdCB0aGUgbW9tZW50IHdlIGRvIHNpbXBsZSBzdG9yZSBtZXRhZGF0YSBhbmQgcmV0cmlldmUgZm9yIGVudGl0aWVzLFxuICAgICAgLy8gdGhpcyBob3dldmVyIG5lZWRzIHRvIHN1cHBvcnQgZXh0ZW5kaW5nIEVudGl0eVxuXG4gICAgICByZXR1cm4gbmV3IEVudGl0eU1ldGFkYXRhKHtcbiAgICAgICAgY29ubmVjdGlvbjogdGhpcy5jb25uZWN0aW9uLFxuICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBhdHRyaWJ1dGVzOiBhbGxBdHRyaWJ1dGVzRm9yRW50aXR5LFxuICAgICAgICBuYW1lLFxuICAgICAgICBwcmltYXJ5S2V5LFxuICAgICAgICBpbmRleGVzLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpbmhlcml0YW5jZSB0cmVlIG9mIGdpdmVuIGVudGl0eVxuICAgKiBJbmhlcml0YW5jZSB0cmVlIGluY2x1ZGVzIGVudGl0aWVzIGZyb20gY3VycmVudCAtPiB2ZXJ5IGNoaWxkIC0+IHZlcnkgcGFyZW50XG4gICAqIEBwYXJhbSBlbnRpdHlDbGFzc1xuICAgKiBAcGFyYW0gdHJlZVxuICAgKiBAcmV0dXJucyBbb3JpZ2luYWxFbnRpdHksIHBhcmVudCBvZiBvcmlnaW5hbEVudGl0eSBhcyBwYXJlbnQxLCBwYXJlbnQgb2YgcGFyZW50MSBhcyBwYXJlbnQyXVxuICAgKi9cbiAgcHJpdmF0ZSByZWN1cnNpdmVHZXRJbmhlcml0YW5jZVRyZWUoXG4gICAgZW50aXR5Q2xhc3M6IEZ1bmN0aW9uLFxuICAgIHRyZWU6IEZ1bmN0aW9uW10gPSBbXVxuICApOiBGdW5jdGlvbltdIHtcbiAgICB0cmVlLnB1c2goZW50aXR5Q2xhc3MpO1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGVudGl0eUNsYXNzKTtcbiAgICBpZiAocHJvdG8gJiYgcHJvdG8ubmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVjdXJzaXZlR2V0SW5oZXJpdGFuY2VUcmVlKHByb3RvLCB0cmVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyZWU7XG4gIH1cbn1cbiJdfQ==