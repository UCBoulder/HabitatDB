"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeMetadata = void 0;
const is_scalar_type_1 = require("./../../helpers/is-scalar-type");
const common_1 = require("@typedorm/common");
const build_primary_key_schema_1 = require("../../helpers/build-primary-key-schema");
const base_attribute_metadata_1 = require("./base-attribute-metadata");
class AttributeMetadata extends base_attribute_metadata_1.BaseAttributeMetadata {
    constructor(options) {
        const { name, entityClass, unique, table } = options;
        super(options);
        this.entityClass = entityClass;
        this.table = table;
        this.default = this.getDefaultValueProvider(name, options.default);
        if (unique) {
            this.unique = this.buildUniqueAttributesPrimaryKey(unique);
        }
    }
    getDefaultValueProvider(attrName, defaultValue) {
        if (!defaultValue) {
            return;
        }
        if ((0, is_scalar_type_1.isScalarTypeProvider)(defaultValue)) {
            return defaultValue;
        }
        else {
            return () => defaultValue;
        }
    }
    buildUniqueAttributesPrimaryKey(unique) {
        if ((0, common_1.IsPrimaryKey)(unique)) {
            return (0, build_primary_key_schema_1.buildPrimaryKeySchema)({
                table: this.table,
                primaryKey: unique,
                attributes: {
                    [this.name]: this.type,
                },
            });
        }
        else {
            return this.autoGeneratedPrimaryKeySchema();
        }
    }
    autoGeneratedPrimaryKeySchema() {
        const primaryKey = {};
        const uniqueKeyValue = `${common_1.DYNAMO_ATTRIBUTE_PREFIX}_${this.entityClass.name.toUpperCase()}.${this.name.toUpperCase()}#{{${this.name}}}`;
        if (this.table.usesCompositeKey()) {
            primaryKey.partitionKey = uniqueKeyValue;
            primaryKey.sortKey = uniqueKeyValue;
        }
        else {
            primaryKey.partitionKey = uniqueKeyValue;
        }
        return (0, build_primary_key_schema_1.buildPrimaryKeySchema)({
            table: this.table,
            primaryKey,
            attributes: {
                [this.name]: this.type,
            },
        });
    }
}
exports.AttributeMetadata = AttributeMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLW1ldGFkYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY2xhc3Nlcy9tZXRhZGF0YS9hdHRyaWJ1dGUtbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUVBQW9FO0FBQ3BFLDZDQVUwQjtBQUMxQixxRkFBNkU7QUFFN0UsdUVBR21DO0FBU25DLE1BQWEsaUJBQWtCLFNBQVEsK0NBQXFCO0lBSzFELFlBQVksT0FBaUM7UUFDM0MsTUFBTSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxHQUFHLE9BQU8sQ0FBQztRQUNuRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5FLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsK0JBQStCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUQ7SUFDSCxDQUFDO0lBRU8sdUJBQXVCLENBQzdCLFFBQWdCLEVBQ2hCLFlBQWlEO1FBRWpELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBRUQsSUFBSSxJQUFBLHFDQUFvQixFQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO2FBQU07WUFDTCxPQUFPLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFTywrQkFBK0IsQ0FBQyxNQUFrQztRQUN4RSxJQUFJLElBQUEscUJBQVksRUFBQyxNQUFNLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUEsZ0RBQXFCLEVBQUM7Z0JBQzNCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsVUFBVSxFQUFFLE1BQU07Z0JBQ2xCLFVBQVUsRUFBRTtvQkFDVixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSTtpQkFDdkI7YUFDRixDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFTyw2QkFBNkI7UUFDbkMsTUFBTSxVQUFVLEdBQUcsRUFBZ0IsQ0FBQztRQUVwQyxNQUFNLGNBQWMsR0FBRyxHQUFHLGdDQUF1QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQ2pILElBQUksQ0FBQyxJQUNQLElBQUksQ0FBQztRQUVMLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQ2hDLFVBQWtDLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQztZQUNqRSxVQUFrQyxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUM7U0FDOUQ7YUFBTTtZQUNKLFVBQStCLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQztTQUNoRTtRQUVELE9BQU8sSUFBQSxnREFBcUIsRUFBQztZQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsVUFBVTtZQUNWLFVBQVUsRUFBRTtnQkFDVixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSTthQUN2QjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXBFRCw4Q0FvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzU2NhbGFyVHlwZVByb3ZpZGVyfSBmcm9tICcuLy4uLy4uL2hlbHBlcnMvaXMtc2NhbGFyLXR5cGUnO1xuaW1wb3J0IHtcbiAgQXR0cmlidXRlT3B0aW9uc1VuaXF1ZVR5cGUsXG4gIENvbXBvc2l0ZVByaW1hcnlLZXksXG4gIERZTkFNT19BVFRSSUJVVEVfUFJFRklYLFxuICBFbnRpdHlUYXJnZXQsXG4gIFByaW1hcnlLZXksXG4gIFNpbXBsZVByaW1hcnlLZXksXG4gIFRhYmxlLFxuICBJc1ByaW1hcnlLZXksXG4gIFNjYWxhclR5cGUsXG59IGZyb20gJ0B0eXBlZG9ybS9jb21tb24nO1xuaW1wb3J0IHtidWlsZFByaW1hcnlLZXlTY2hlbWF9IGZyb20gJy4uLy4uL2hlbHBlcnMvYnVpbGQtcHJpbWFyeS1rZXktc2NoZW1hJztcbmltcG9ydCB7RHluYW1vRW50aXR5U2NoZW1hUHJpbWFyeUtleX0gZnJvbSAnLi9lbnRpdHktbWV0YWRhdGEnO1xuaW1wb3J0IHtcbiAgQmFzZUF0dHJpYnV0ZU1ldGFkYXRhT3B0aW9ucyxcbiAgQmFzZUF0dHJpYnV0ZU1ldGFkYXRhLFxufSBmcm9tICcuL2Jhc2UtYXR0cmlidXRlLW1ldGFkYXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGVNZXRhZGF0YU9wdGlvbnMgZXh0ZW5kcyBCYXNlQXR0cmlidXRlTWV0YWRhdGFPcHRpb25zIHtcbiAgdGFibGU6IFRhYmxlO1xuICBlbnRpdHlDbGFzczogRW50aXR5VGFyZ2V0PGFueT47XG4gIHVuaXF1ZT86IEF0dHJpYnV0ZU9wdGlvbnNVbmlxdWVUeXBlO1xuICBkZWZhdWx0PzogU2NhbGFyVHlwZSB8ICgoKSA9PiBTY2FsYXJUeXBlKTtcbn1cblxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZU1ldGFkYXRhIGV4dGVuZHMgQmFzZUF0dHJpYnV0ZU1ldGFkYXRhIHtcbiAgcmVhZG9ubHkgdW5pcXVlPzogRHluYW1vRW50aXR5U2NoZW1hUHJpbWFyeUtleTtcbiAgcmVhZG9ubHkgZGVmYXVsdD86IChlbnRpdHk6IGFueSkgPT4gU2NhbGFyVHlwZTtcbiAgcmVhZG9ubHkgdGFibGU6IFRhYmxlO1xuICByZWFkb25seSBlbnRpdHlDbGFzczogRW50aXR5VGFyZ2V0PGFueT47XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEF0dHJpYnV0ZU1ldGFkYXRhT3B0aW9ucykge1xuICAgIGNvbnN0IHtuYW1lLCBlbnRpdHlDbGFzcywgdW5pcXVlLCB0YWJsZX0gPSBvcHRpb25zO1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuZW50aXR5Q2xhc3MgPSBlbnRpdHlDbGFzcztcbiAgICB0aGlzLnRhYmxlID0gdGFibGU7XG4gICAgdGhpcy5kZWZhdWx0ID0gdGhpcy5nZXREZWZhdWx0VmFsdWVQcm92aWRlcihuYW1lLCBvcHRpb25zLmRlZmF1bHQpO1xuXG4gICAgaWYgKHVuaXF1ZSkge1xuICAgICAgdGhpcy51bmlxdWUgPSB0aGlzLmJ1aWxkVW5pcXVlQXR0cmlidXRlc1ByaW1hcnlLZXkodW5pcXVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHRWYWx1ZVByb3ZpZGVyKFxuICAgIGF0dHJOYW1lOiBzdHJpbmcsXG4gICAgZGVmYXVsdFZhbHVlOiBBdHRyaWJ1dGVNZXRhZGF0YU9wdGlvbnNbJ2RlZmF1bHQnXVxuICApIHtcbiAgICBpZiAoIWRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1NjYWxhclR5cGVQcm92aWRlcihkZWZhdWx0VmFsdWUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKCkgPT4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRVbmlxdWVBdHRyaWJ1dGVzUHJpbWFyeUtleSh1bmlxdWU6IEF0dHJpYnV0ZU9wdGlvbnNVbmlxdWVUeXBlKSB7XG4gICAgaWYgKElzUHJpbWFyeUtleSh1bmlxdWUpKSB7XG4gICAgICByZXR1cm4gYnVpbGRQcmltYXJ5S2V5U2NoZW1hKHtcbiAgICAgICAgdGFibGU6IHRoaXMudGFibGUsXG4gICAgICAgIHByaW1hcnlLZXk6IHVuaXF1ZSxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIFt0aGlzLm5hbWVdOiB0aGlzLnR5cGUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYXV0b0dlbmVyYXRlZFByaW1hcnlLZXlTY2hlbWEoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGF1dG9HZW5lcmF0ZWRQcmltYXJ5S2V5U2NoZW1hKCkge1xuICAgIGNvbnN0IHByaW1hcnlLZXkgPSB7fSBhcyBQcmltYXJ5S2V5O1xuXG4gICAgY29uc3QgdW5pcXVlS2V5VmFsdWUgPSBgJHtEWU5BTU9fQVRUUklCVVRFX1BSRUZJWH1fJHt0aGlzLmVudGl0eUNsYXNzLm5hbWUudG9VcHBlckNhc2UoKX0uJHt0aGlzLm5hbWUudG9VcHBlckNhc2UoKX0je3ske1xuICAgICAgdGhpcy5uYW1lXG4gICAgfX19YDtcblxuICAgIGlmICh0aGlzLnRhYmxlLnVzZXNDb21wb3NpdGVLZXkoKSkge1xuICAgICAgKHByaW1hcnlLZXkgYXMgQ29tcG9zaXRlUHJpbWFyeUtleSkucGFydGl0aW9uS2V5ID0gdW5pcXVlS2V5VmFsdWU7XG4gICAgICAocHJpbWFyeUtleSBhcyBDb21wb3NpdGVQcmltYXJ5S2V5KS5zb3J0S2V5ID0gdW5pcXVlS2V5VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIChwcmltYXJ5S2V5IGFzIFNpbXBsZVByaW1hcnlLZXkpLnBhcnRpdGlvbktleSA9IHVuaXF1ZUtleVZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBidWlsZFByaW1hcnlLZXlTY2hlbWEoe1xuICAgICAgdGFibGU6IHRoaXMudGFibGUsXG4gICAgICBwcmltYXJ5S2V5LFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBbdGhpcy5uYW1lXTogdGhpcy50eXBlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIl19