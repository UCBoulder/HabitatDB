"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityMetadata = void 0;
const common_1 = require("@typedorm/common");
const build_primary_key_schema_1 = require("../../helpers/build-primary-key-schema");
const get_interpolated_keys_1 = require("../../helpers/get-interpolated-keys");
const validate_key_1 = require("../../helpers/validate-key");
const base_metadata_1 = require("./base-metadata");
const internal_attribute_metadata_1 = require("./internal-attribute-metadata");
class EntityMetadata extends base_metadata_1.BaseMetadata {
    constructor({ connection, table, name, target, primaryKey, indexes, attributes, }) {
        super(connection);
        this.name = name;
        this.target = target;
        this.attributes = attributes;
        this.table = table;
        // auto persist internal attributes
        this.internalAttributes = [
            new internal_attribute_metadata_1.InternalAttributeMetadata({
                name: common_1.INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME,
                type: 'String',
                value: this.name,
            }),
        ];
        // validate attributes and key type pair
        const attributesKeyTypePair = this.attributes.reduce((acc, attr) => {
            this.validateAttributeMetadata(attr);
            acc[attr.name] = attr.type;
            return acc;
        }, {});
        this.schema = {
            primaryKey: (0, build_primary_key_schema_1.buildPrimaryKeySchema)({
                table: this.table,
                primaryKey,
                attributes: attributesKeyTypePair,
            }),
            indexes: this.buildIndexesSchema({
                table: this.table,
                indexes: Object.assign({}, indexes),
                attributes: attributesKeyTypePair,
            }),
        };
    }
    validateAttributeMetadata(attributeToValidate) {
        this.internalAttributes.forEach(internalAttr => {
            if (attributeToValidate.name === internalAttr.name) {
                throw new Error(`Attribute name "${attributeToValidate.name}" is reserved by TypeDORM and cannot be used.`);
            }
        });
    }
    buildIndexesSchema({ table, indexes, attributes, }) {
        return Object.keys(indexes).reduce((acc, key) => {
            const tableIndexSignature = table.getIndexByKey(key);
            if (!tableIndexSignature) {
                throw new Error(`No matching index signature found for index "${key}" in table "${table.name}"`);
            }
            const currentIndex = indexes[key];
            (0, validate_key_1.validateKey)(currentIndex.sortKey, attributes, this.name);
            // validates and gets and fill set indexes interpolations of sort key
            const sortKeyInterpolations = (0, get_interpolated_keys_1.getInterpolatedKeys)(currentIndex.sortKey);
            if (tableIndexSignature.type === common_1.INDEX_TYPE.LSI) {
                if (currentIndex.type !== common_1.INDEX_TYPE.LSI) {
                    throw new Error('Index signature mismatch.');
                }
                acc[key] = {
                    attributes: {
                        [tableIndexSignature.sortKey]: currentIndex.sortKey,
                    },
                    metadata: {
                        type: tableIndexSignature.type,
                        isSparse: currentIndex.isSparse === undefined ||
                            currentIndex.isSparse === null
                            ? true // by default all indexes are sparse
                            : !!currentIndex.isSparse,
                        _name: key,
                        _interpolations: {
                            [tableIndexSignature.sortKey]: sortKeyInterpolations,
                        },
                    },
                };
                return acc;
            }
            else {
                if (currentIndex.type !== common_1.INDEX_TYPE.GSI) {
                    throw new Error('Index signature mismatch.');
                }
                (0, validate_key_1.validateKey)(currentIndex.partitionKey, attributes);
                // validates and gets and fill set indexes interpolations of partition key
                const partitionKeyInterpolations = (0, get_interpolated_keys_1.getInterpolatedKeys)(currentIndex.partitionKey);
                acc[key] = {
                    attributes: {
                        [tableIndexSignature.partitionKey]: currentIndex.partitionKey,
                        [tableIndexSignature.sortKey]: currentIndex.sortKey,
                    },
                    metadata: {
                        isSparse: currentIndex.isSparse === undefined ||
                            currentIndex.isSparse === null
                            ? true // by default all indexes are sparse
                            : !!currentIndex.isSparse,
                        type: tableIndexSignature.type,
                        _name: key,
                        // remove any duplicates from partition or sort keys
                        _interpolations: {
                            [tableIndexSignature.partitionKey]: partitionKeyInterpolations,
                            [tableIndexSignature.sortKey]: sortKeyInterpolations,
                        },
                    },
                };
                return acc;
            }
        }, {});
    }
}
exports.EntityMetadata = EntityMetadata;
//# sourceMappingURL=data:application/json;base64,