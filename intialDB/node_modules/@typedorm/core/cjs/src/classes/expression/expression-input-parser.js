"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressionInputParser = void 0;
const is_empty_object_1 = require("../../helpers/is-empty-object");
const key_condition_1 = require("./key-condition");
const filter_1 = require("./filter");
const base_expression_input_1 = require("./base-expression-input");
const is_scalar_type_1 = require("../../helpers/is-scalar-type");
const condition_1 = require("./condition");
const projection_1 = require("./projection");
const update_body_type_1 = require("./update-body-type");
const set_update_1 = require("./update/set-update");
const add_update_1 = require("./update/add-update");
const update_1 = require("./update/update");
const delete_update_1 = require("./update/delete-update");
const remove_update_1 = require("./update/remove-update");
const is_object_1 = require("../../helpers/is-object");
const constants_1 = require("../../helpers/constants");
/**
 * Parses expression input to expression instances
 */
class ExpressionInputParser {
    parseToKeyCondition(key, options) {
        return this.operatorToBaseExpression(key, options, new key_condition_1.KeyCondition());
    }
    parseToFilter(options) {
        return this.recursiveParseToBaseExpression(options, filter_1.Filter).pop();
    }
    parseToCondition(options) {
        return this.recursiveParseToBaseExpression(options, condition_1.Condition).pop();
    }
    parseToProjection(keys) {
        const projection = new projection_1.Projection();
        projection.addProjectionAttributes(keys);
        return projection;
    }
    parseToUpdate(body, attrValueOverrideMap = {}) {
        return this.parseToUpdateExpression(body, attrValueOverrideMap);
    }
    /**
     * Parses complex update object to a value and type
     */
    parseAttributeToUpdateValue(attr, value) {
        var _a;
        if ((0, is_object_1.isObject)(value) && !(0, is_empty_object_1.isEmptyObject)(value)) {
            const [operator, operatorValue] = Object.entries(value)[0];
            const parsedUpdate = this.parseValueToUpdateExp(attr, value, operator, operatorValue);
            const parsedValue = Object.values((_a = parsedUpdate.values) !== null && _a !== void 0 ? _a : {})[0];
            // if expression contains any dynamic operation such as value manipulation or nested attribute manipulation in a list
            if (!(parsedUpdate instanceof set_update_1.SetUpdate) ||
                parsedUpdate.expression.includes(' + ') ||
                parsedUpdate.expression.includes(' - ') ||
                constants_1.nestedKeyAccessRegex.test(parsedUpdate.expression)) {
                return {
                    value: parsedValue,
                    type: 'dynamic',
                };
            }
            // return static value
            return {
                type: 'static',
                value: parsedValue,
            };
        }
        else {
            // if tried to update nested value for key, it is considered dynamic, as we do not know full value of updating attribute
            if (constants_1.nestedKeyAccessRegex.test(attr)) {
                return {
                    type: 'dynamic',
                    value,
                };
            }
            // return value as a default value
            return { type: 'static', value };
        }
    }
    /**
     * Generic Recursive input parser
     * Recursively parses nested object to build expression of type ExpClass
     * @param options Complex options object to parse
     * @param ExpClass Type of expression to build, can be of type Filter, Condition etc.
     *
     */
    recursiveParseToBaseExpression(options, ExpClass) {
        return Object.entries(options).map(([operatorOrAttr, value]) => {
            // if top level key is one of the logical operators, rerun parse with it's values
            if (['AND', 'OR', 'NOT'].includes(operatorOrAttr)) {
                const parsedExpList = this.recursiveParseToBaseExpression(value, ExpClass);
                const base = parsedExpList.shift();
                if (!base) {
                    return new ExpClass();
                }
                switch (operatorOrAttr) {
                    case 'AND': {
                        if (!(parsedExpList === null || parsedExpList === void 0 ? void 0 : parsedExpList.length)) {
                            return base;
                        }
                        return base.mergeMany(parsedExpList, base_expression_input_1.MERGE_STRATEGY.AND);
                    }
                    case 'OR': {
                        if (!(parsedExpList === null || parsedExpList === void 0 ? void 0 : parsedExpList.length)) {
                            return base;
                        }
                        return base.mergeMany(parsedExpList, base_expression_input_1.MERGE_STRATEGY.OR);
                    }
                    case 'NOT': {
                        // not can not contain more than one items
                        if (parsedExpList === null || parsedExpList === void 0 ? void 0 : parsedExpList.length) {
                            throw new Error(`Value for operator "${operatorOrAttr}" can not contain more than 1 attributes.`);
                        }
                        return base.not();
                    }
                    default: {
                        throw new Error(`Unsupported logical operator "${operatorOrAttr}"`);
                    }
                }
            }
            else {
                // when top level attribute is something other than actual logical operators, try to parse it to expression
                return this.operatorToBaseExpression(operatorOrAttr, value, new ExpClass());
            }
        });
    }
    /**
     * Parses input to update expression
     * @param body body to parse
     */
    parseToUpdateExpression(body, attrValueOverrideMap) {
        return (Object.entries(body)
            .map(([attr, value]) => {
            if ((0, is_object_1.isObject)(value) && !(0, is_empty_object_1.isEmptyObject)(value)) {
                const [operator, operatorValue] = Object.entries(value)[0];
                return this.parseValueToUpdateExp(attr, value, operator, operatorValue, attrValueOverrideMap[attr] // get any override value if exists
                );
            }
            else {
                // fallback to default `SET` action based update
                return new set_update_1.SetUpdate().setTo(attr, attrValueOverrideMap[attr] || value);
            }
        })
            // merge all expressions with matching action
            .reduce((acc, currExp) => {
            acc
                .find(instance => instance.constructor === currExp.constructor)
                .merge(currExp);
            return acc;
        }, [
            new set_update_1.SetUpdate(),
            new add_update_1.AddUpdate(),
            new remove_update_1.RemoveUpdate(),
            new delete_update_1.DeleteUpdate(),
        ])
            // merge all expressions of different actions
            .reduce((acc, curr) => {
            acc.merge(curr);
            return acc;
        }, new update_1.Update()));
    }
    /**
     * Parses single attribute into update expression instance
     * @param attribute name/path of the attribute
     * @param attributeValue value to update
     */
    parseValueToUpdateExp(attribute, attributeValue, // attribute value to set
    operator, operatorValue, staticValueToOverride // value to override for attribute, this is set in cases where there was a custom property transform was requested
    ) {
        switch (operator) {
            case 'INCREMENT_BY':
            case 'DECREMENT_BY': {
                return new set_update_1.SetUpdate().setTo(attribute, operatorValue, operator);
            }
            case 'IF_NOT_EXISTS': {
                if ((0, update_body_type_1.isSetOperatorComplexValueType)(operatorValue)) {
                    return new set_update_1.SetUpdate().setToIfNotExists(attribute, staticValueToOverride || operatorValue.$VALUE, operatorValue.$PATH);
                }
                else {
                    return new set_update_1.SetUpdate().setToIfNotExists(attribute, operatorValue);
                }
            }
            case 'LIST_APPEND': {
                if ((0, update_body_type_1.isSetOperatorComplexValueType)(operatorValue)) {
                    return new set_update_1.SetUpdate().setOrAppendToList(attribute, operatorValue.$VALUE, operatorValue.$PATH);
                }
                else {
                    return new set_update_1.SetUpdate().setOrAppendToList(attribute, operatorValue);
                }
            }
            case 'SET': {
                /**
                 * aliased set support, this allows access patterns like
                 * {id: { SET: '1'}}
                 * behaves similar to {id: '1'}
                 */
                // handle explicit set exp
                if ((0, is_object_1.isObject)(operatorValue) && !(0, is_empty_object_1.isEmptyObject)(operatorValue)) {
                    const [nestedOperator, nestedOperatorValue] = Object.entries(operatorValue)[0];
                    return this.parseValueToUpdateExp(attribute, nestedOperatorValue, nestedOperator, nestedOperatorValue, staticValueToOverride);
                }
                else {
                    // handle attribute with map type
                    return new set_update_1.SetUpdate().setTo(attribute, staticValueToOverride || operatorValue);
                }
            }
            case 'ADD': {
                if ((0, is_empty_object_1.isEmptyObject)(operatorValue)) {
                    throw new Error(`Invalid value ${operatorValue} received for action "ADD", Only numbers and lists are supported.`);
                }
                return new add_update_1.AddUpdate().addTo(attribute, operatorValue);
            }
            case 'DELETE': {
                return new delete_update_1.DeleteUpdate().delete(attribute, operatorValue);
            }
            case 'REMOVE': {
                if (typeof operatorValue === 'boolean' && !!operatorValue) {
                    return new remove_update_1.RemoveUpdate().remove(attribute);
                }
                else if (!(0, is_empty_object_1.isEmptyObject)(operatorValue) &&
                    Array.isArray(operatorValue.$AT_INDEX)) {
                    return new remove_update_1.RemoveUpdate().remove(attribute, {
                        atIndexes: operatorValue.$AT_INDEX,
                    });
                }
                else {
                    throw new Error(`Invalid value ${operatorValue} received for action "REMOVE". Value must be set to boolean
            In addition, You may use special value type {$AT_INDEX: Array<number>} for attribute of type list..`);
                }
            }
            default: {
                // handle attribute with map type
                return new set_update_1.SetUpdate().setTo(attribute, staticValueToOverride || attributeValue);
            }
        }
    }
    /**
     * When this is run, it is assumed that attribute/value are validated to not have any nested objects,
     * therefor this function will not running in any recursion itself
     * @param attribute Attribute or path on entity to build comparison condition for
     * @param value value to expect
     * @param exp expression to append operators to
     */
    operatorToBaseExpression(attribute, value, exp) {
        switch (typeof value) {
            case 'string': {
                if (value === 'ATTRIBUTE_EXISTS') {
                    exp.attributeExists(attribute);
                    return exp;
                }
                else if (value === 'ATTRIBUTE_NOT_EXISTS') {
                    exp.attributeNotExists(attribute);
                    return exp;
                }
                else {
                    throw new Error(`Operator used must be one of "ATTRIBUTE_EXISTS", "ATTRIBUTE_NOT_EXISTS" for 
            attribute "${attribute}".`);
                }
            }
            case 'object': {
                if ((0, is_empty_object_1.isEmptyObject)(value)) {
                    throw new Error(`Value for attribute "${attribute}" can not be empty`);
                }
                const operatorAndValue = Object.entries(value);
                if (operatorAndValue.length !== 1) {
                    throw new Error(`Invalid value "${JSON.stringify(value)}" found for attribute: ${attribute}`);
                }
                const [innerOp, innerVal] = operatorAndValue[0];
                if ((0, is_scalar_type_1.isScalarType)(innerVal)) {
                    return this.parseScalarValueToExp(innerOp, attribute, innerVal, exp);
                }
                else {
                    return this.parseNonScalarValueToExp(innerOp, attribute, innerVal, exp);
                }
            }
            default: {
                throw new Error(`Value for attribute "${attribute}" must be of type object or string`);
            }
        }
    }
    /**
     * Builds comparison expression for operators with scalar values
     * @param operator operator that supports scalar values
     * @param attrPath attribute path to include in built expression
     * @param value value to expect in expression
     * @param exp expression type
     */
    parseScalarValueToExp(operator, attrPath, value, exp) {
        switch (operator) {
            case 'EQ': {
                exp.equals(attrPath, value);
                return exp;
            }
            case 'LT': {
                exp.lessThan(attrPath, value);
                return exp;
            }
            case 'LE': {
                exp.lessThanAndEqualTo(attrPath, value);
                return exp;
            }
            case 'GT': {
                exp.greaterThan(attrPath, value);
                return exp;
            }
            case 'GE': {
                exp.greaterThanAndEqualTo(attrPath, value);
                return exp;
            }
            case 'NE': {
                exp.notEquals(attrPath, value);
                return exp;
            }
            case 'BEGINS_WITH': {
                exp.beginsWith(attrPath, value);
                return exp;
            }
            case 'CONTAINS': {
                exp.contains(attrPath, value);
                return exp;
            }
            case 'ATTRIBUTE_TYPE': {
                exp.attributeType(attrPath, value);
                return exp;
            }
            default: {
                throw new Error(`Unsupported operator: ${operator}`);
            }
        }
    }
    /**
     * Builds comparison expression for operators with Non scalar values, i.e ranges and size
     * @param operator operator that supports scalar values
     * @param attrPath attribute path to include in built expression
     * @param value value to expect in expression
     * @param exp expression type
     */
    parseNonScalarValueToExp(operator, attrPath, value, exp) {
        switch (operator) {
            case 'BETWEEN': {
                if (!Array.isArray(value) || value.length !== 2) {
                    throw new Error(`Value for operator ${operator} must be of type array with exact two items.`);
                }
                exp.between(attrPath, value);
                return exp;
            }
            case 'IN': {
                if (!Array.isArray(value) || value.length < 1) {
                    throw new Error(`Value for operator ${operator} must be of type array with at least one item.`);
                }
                exp.in(attrPath, value);
                return exp;
            }
            case 'SIZE': {
                const operatorAndValue = Object.entries(value);
                if (operatorAndValue.length !== 1) {
                    throw new Error(`Invalid value "${JSON.stringify(value)}" found for operator: ${operator}`);
                }
                const [innerOp, innerVal] = operatorAndValue[0];
                const parsedExp = this.parseScalarValueToExp(innerOp, attrPath, innerVal, exp);
                // once operator condition has applied, pass it through size
                parsedExp.size(attrPath);
                return parsedExp;
            }
            default: {
                throw new Error(`Unsupported operator: ${operator}`);
            }
        }
    }
}
exports.ExpressionInputParser = ExpressionInputParser;
//# sourceMappingURL=data:application/json;base64,