"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressionBuilder = void 0;
const is_empty_object_1 = require("../../helpers/is-empty-object");
const base_expression_input_1 = require("./base-expression-input");
const condition_1 = require("./condition");
class ExpressionBuilder {
    andMergeConditionExpressions(existingExp, newExp) {
        if (existingExp.ConditionExpression && !newExp.ConditionExpression) {
            return this.removeEmptyFieldsAndReturn(existingExp);
        }
        if (newExp.ConditionExpression && !existingExp.ConditionExpression) {
            return this.removeEmptyFieldsAndReturn(newExp);
        }
        if (!newExp && !existingExp) {
            return {};
        }
        const mergedExp = {
            ConditionExpression: `(${existingExp.ConditionExpression}) AND (${newExp.ConditionExpression})`,
            ExpressionAttributeNames: Object.assign(Object.assign({}, existingExp.ExpressionAttributeNames), newExp.ExpressionAttributeNames),
            ExpressionAttributeValues: Object.assign(Object.assign({}, existingExp.ExpressionAttributeValues), newExp.ExpressionAttributeValues),
        };
        return this.removeEmptyFieldsAndReturn(mergedExp);
    }
    /**
     * Higher level function to build unique record condition expression
     * @param table table to build unique record expression for
     */
    buildUniqueRecordConditionExpression(table) {
        const uniqueRecordCondition = table.usesCompositeKey()
            ? new condition_1.Condition()
                .attributeNotExist(table.partitionKey)
                .merge(new condition_1.Condition().attributeNotExist(table.sortKey), base_expression_input_1.MERGE_STRATEGY.AND)
            : new condition_1.Condition().attributeNotExist(table.partitionKey);
        const expression = this.buildConditionExpression(uniqueRecordCondition);
        return this.removeEmptyFieldsAndReturn(expression);
    }
    buildConditionExpression(condition) {
        if (!condition.expression) {
            return {};
        }
        const expression = {
            ConditionExpression: condition.expression.trim(),
            ExpressionAttributeNames: condition.names,
            ExpressionAttributeValues: condition.values,
        };
        return this.removeEmptyFieldsAndReturn(expression);
    }
    buildProjectionExpression(projection) {
        if (!projection.expression) {
            return {};
        }
        const expression = {
            ProjectionExpression: projection.expression.trim(),
            ExpressionAttributeNames: projection.names,
        };
        return this.removeEmptyFieldsAndReturn(expression);
    }
    buildUpdateExpression(update) {
        if (!update.expression) {
            return {};
        }
        const expression = {
            UpdateExpression: update.expression.trim(),
            ExpressionAttributeNames: update.names,
            ExpressionAttributeValues: update.values,
        };
        return this.removeEmptyFieldsAndReturn(expression);
    }
    buildKeyConditionExpression(condition) {
        if (!condition.expression) {
            return {};
        }
        const expression = {
            KeyConditionExpression: condition.expression.trim(),
            ExpressionAttributeNames: condition.names,
            ExpressionAttributeValues: condition.values,
        };
        return this.removeEmptyFieldsAndReturn(expression);
    }
    buildFilterExpression(filter) {
        if (!filter.expression) {
            return {};
        }
        const expression = {
            FilterExpression: filter.expression.trim(),
            ExpressionAttributeNames: filter.names,
            ExpressionAttributeValues: filter.values,
        };
        return this.removeEmptyFieldsAndReturn(expression);
    }
    removeEmptyFieldsAndReturn(expression) {
        if ((0, is_empty_object_1.isEmptyObject)(expression.ExpressionAttributeNames)) {
            delete expression.ExpressionAttributeNames;
        }
        if ((0, is_empty_object_1.isEmptyObject)(expression.ExpressionAttributeValues)) {
            delete expression.ExpressionAttributeValues;
        }
        return expression;
    }
}
exports.ExpressionBuilder = ExpressionBuilder;
//# sourceMappingURL=data:application/json;base64,