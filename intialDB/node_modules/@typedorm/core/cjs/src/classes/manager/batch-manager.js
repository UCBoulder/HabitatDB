"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchManager = exports.REQUEST_TYPE = void 0;
const document_client_batch_transformer_1 = require("../transformer/document-client-batch-transformer");
const p_limit_1 = __importDefault(require("p-limit"));
const common_1 = require("@typedorm/common");
const is_empty_object_1 = require("../../helpers/is-empty-object");
const get_unique_request_id_1 = require("../../helpers/get-unique-request-id");
var REQUEST_TYPE;
(function (REQUEST_TYPE) {
    REQUEST_TYPE["TRANSACT_WRITE"] = "TRANSACT_WRITE";
    REQUEST_TYPE["BATCH_WRITE"] = "BATCH_WRITE";
    REQUEST_TYPE["BATCH_READ"] = "BATCH_READ";
})(REQUEST_TYPE = exports.REQUEST_TYPE || (exports.REQUEST_TYPE = {}));
class BatchManager {
    constructor(connection) {
        this.connection = connection;
        this.limit = (0, p_limit_1.default)(common_1.BATCH_WRITE_CONCURRENCY_LIMIT);
        this._dcBatchTransformer = new document_client_batch_transformer_1.DocumentClientBatchTransformer(connection);
        this.resetErrorQueue();
    }
    /**
     * Writes all given items to dynamodb using either batch or transaction api.
     * _Note_: Transaction api is always used when item being written is using a unique attribute
     * @param batch
     */
    write(batch, options, metadataOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resetErrorQueue();
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            if (options === null || options === void 0 ? void 0 : options.requestsConcurrencyLimit) {
                this.limit = (0, p_limit_1.default)(options === null || options === void 0 ? void 0 : options.requestsConcurrencyLimit);
            }
            this.connection.logger.logInfo({
                requestId,
                scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                log: `Running a batch write request for ${batch.items.length} items`,
            });
            // 0. transform batch request
            const { batchWriteRequestMapItems, lazyTransactionWriteItemListLoaderItems, transactionListItems, metadata, } = this._dcBatchTransformer.toDynamoWriteBatchItems(batch, {
                requestId,
            });
            // 1.1. get transaction write items limits
            const transactionRequests = transactionListItems.map(({ rawInput, transformedInput }) => {
                // make all promises in pLimitable so their concurrency can be controlled properly
                return this.toLimited(() => this.connection.transactionManger.writeRaw(transformedInput, {
                    requestId,
                    returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                }), 
                // return original item when failed to process
                rawInput, REQUEST_TYPE.TRANSACT_WRITE);
            });
            // 1.2. get all the lazy loaded promises
            // these are basically all the delete requests that uses unique keys
            const lazyTransactionRequests = lazyTransactionWriteItemListLoaderItems.map(({ rawInput, transformedInput }) => {
                return this.toLimited(() => __awaiter(this, void 0, void 0, function* () {
                    const existingItem = yield this.connection.entityManager.findOne(transformedInput.entityClass, transformedInput.primaryKeyAttributes, undefined, {
                        requestId,
                        returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    });
                    const deleteTransactionItemList = transformedInput.lazyLoadTransactionWriteItems(existingItem);
                    return this.connection.transactionManger.writeRaw(deleteTransactionItemList, {
                        requestId,
                        returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    });
                }), 
                // default item to return if failed to process
                rawInput, REQUEST_TYPE.TRANSACT_WRITE);
            });
            // 1.3. get all batch toLimited promises
            const batchRequests = batchWriteRequestMapItems.map(batchRequestMap => {
                return this.toLimited(() => __awaiter(this, void 0, void 0, function* () {
                    return this.connection.documentClient.batchWrite({
                        RequestItems: Object.assign({}, batchRequestMap),
                        ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    });
                }), 
                // for batch requests this returning item will be transformed to
                // original input items later
                batchRequestMap, REQUEST_TYPE.BATCH_WRITE);
            });
            const allRequests = [
                ...transactionRequests,
                ...lazyTransactionRequests,
                ...batchRequests,
            ];
            // 2. wait for all promises to finish
            const responses = yield Promise.all(allRequests);
            // log stats
            responses.forEach((response, index) => {
                if (response.ConsumedCapacity) {
                    this.connection.logger.logStats({
                        scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                        requestId,
                        requestSegment: index,
                        statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                        consumedCapacityData: response.ConsumedCapacity,
                    });
                }
            });
            // 3. run retry attempts
            // process all unprocessed items recursively until all are either done
            // or reached the retry limit
            const unprocessedItems = yield this.recursiveHandleBatchWriteItemsResponse(responses, 0, // initially set the attempts counter to 0,
            options, {
                requestId,
                returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            });
            // 4.1. reverse parse all failed inputs to original user inputs
            // filter or drop any empty values
            const transformedUnprocessedItems = unprocessedItems.flatMap((unprocessedItemInput) => this._dcBatchTransformer.toWriteBatchInputList(unprocessedItemInput, metadata));
            // 4.2. reverse parse all unprocessed inputs to original user inputs
            // parse failed items to original input
            const failedItemsOriginalInput = this._errorQueue.flatMap(item => {
                if (item.requestType === REQUEST_TYPE.BATCH_WRITE) {
                    return this._dcBatchTransformer.toWriteBatchInputList(item.requestInput, metadata);
                }
                else if (item.requestType === REQUEST_TYPE.TRANSACT_WRITE) {
                    return item.requestInput;
                }
                else {
                    throw new Error('Unsupported request type, if this continues please file an issue on github');
                }
            });
            // 5. return unProcessable or failed items to user
            return {
                unprocessedItems: transformedUnprocessedItems,
                failedItems: failedItemsOriginalInput,
            };
        });
    }
    /**
     * Reads all items given in batch with default eventually consistent read type
     * _Note_: Returned items are not guaranteed to be in the same sequence as requested
     */
    read(batch, options, metadataOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resetErrorQueue();
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            if (options === null || options === void 0 ? void 0 : options.requestsConcurrencyLimit) {
                this.limit = (0, p_limit_1.default)(options === null || options === void 0 ? void 0 : options.requestsConcurrencyLimit);
            }
            this.connection.logger.logInfo({
                requestId,
                scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                log: `Running a batch read request for ${batch.items.length} items`,
            });
            // 0. transform batch request
            const { batchRequestItemsList, metadata } = this._dcBatchTransformer.toDynamoReadBatchItems(batch, {
                requestId,
            });
            // 1. get items requests with concurrency applied
            const batchRequests = batchRequestItemsList.map(batchRequestItems => {
                return this.toLimited(() => __awaiter(this, void 0, void 0, function* () {
                    return this.connection.documentClient.batchGet({
                        RequestItems: Object.assign({}, batchRequestItems),
                        ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    });
                }), batchRequestItems, REQUEST_TYPE.BATCH_READ);
            });
            // 2. wait for all promises to finish, either failed or hit the limit
            const initialResponses = yield Promise.all(batchRequests);
            // log stats
            initialResponses.forEach((response, index) => {
                if (response.ConsumedCapacity) {
                    this.connection.logger.logStats({
                        scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                        requestId,
                        requestSegment: index,
                        statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                        consumedCapacityData: response.ConsumedCapacity,
                    });
                }
            });
            // 3. run retries
            const { items, unprocessedItemsList } = yield this.recursiveHandleBatchReadItemsResponse(initialResponses, 0, options, [], {
                requestId,
                returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            });
            // 4.1 transform responses to look like model
            const transformedItems = items.map(item => {
                const entityPhysicalName = item[common_1.INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME];
                if (!entityPhysicalName) {
                    this.connection.logger.logWarn({
                        requestId,
                        scope: common_1.MANAGER_NAME.ENTITY_MANAGER,
                        log: `Item ${JSON.stringify(item)} is not known to TypeDORM there for transform was not run`,
                    });
                    return item;
                }
                const { target } = this.connection.getEntityByPhysicalName(entityPhysicalName);
                return this._dcBatchTransformer.fromDynamoEntity(target, item, {
                    requestId,
                });
            });
            // 4.2 transform unprocessed items
            const unprocessedTransformedItems = unprocessedItemsList === null || unprocessedItemsList === void 0 ? void 0 : unprocessedItemsList.flatMap((item) => this._dcBatchTransformer.toReadBatchInputList(item, metadata));
            // 4.3 transform failed items
            const failedTransformedItems = this._errorQueue.flatMap(item => {
                this.connection.logger.logError({
                    requestId,
                    scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                    log: item.error,
                });
                return this._dcBatchTransformer.toReadBatchInputList(item.requestInput, metadata);
            });
            // 5. return all items
            return {
                items: transformedItems !== null && transformedItems !== void 0 ? transformedItems : [],
                unprocessedItems: unprocessedTransformedItems !== null && unprocessedTransformedItems !== void 0 ? unprocessedTransformedItems : [],
                failedItems: failedTransformedItems !== null && failedTransformedItems !== void 0 ? failedTransformedItems : [],
            };
        });
    }
    /**
     * Recursively parse batch requests until either all items are in or has reached retry limit
     * @param batchWriteItemOutputItems
     */
    recursiveHandleBatchWriteItemsResponse(batchWriteItemOutputItems, totalAttemptsSoFar, options, metadataOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const unProcessedListItems = batchWriteItemOutputItems
                .filter((response) => response.UnprocessedItems && !(0, is_empty_object_1.isEmptyObject)(response.UnprocessedItems))
                .map(item => item.UnprocessedItems);
            // if there are no unprocessed items, return
            if (!unProcessedListItems.length) {
                return unProcessedListItems;
            }
            // abort when reached max attempts count
            // if no retry attempts are given, use default attempts limit
            if (totalAttemptsSoFar ===
                ((_a = options === null || options === void 0 ? void 0 : options.maxRetryAttempts) !== null && _a !== void 0 ? _a : common_1.BATCH_WRITE_MAX_ALLOWED_ATTEMPTS)) {
                this.connection.logger.logInfo({
                    scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                    log: `Reached max allowed attempts ${totalAttemptsSoFar}, aborting...`,
                    requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                });
                return unProcessedListItems;
            }
            // backoff for x ms before retrying for unprocessed items
            yield this.waitForExponentialBackoff(totalAttemptsSoFar, undefined, metadataOptions);
            // organize unprocessed items into single "tableName-item" map
            const sortedUnprocessedItems = unProcessedListItems.reduce((acc, unprocessedItems) => {
                Object.entries(unprocessedItems).forEach(([tableName, unprocessedRequests]) => {
                    if (!acc[tableName]) {
                        acc[tableName] = [];
                    }
                    // merge all items by tableName
                    acc[tableName] = [...acc[tableName], ...unprocessedRequests];
                });
                return acc;
            }, {});
            const batchRequestsItems = this._dcBatchTransformer.mapTableWriteItemsToBatchWriteItems(sortedUnprocessedItems);
            // apply limit on all parallel requests
            const batchRequests = batchRequestsItems.map(batchRequestMap => {
                return this.toLimited(() => __awaiter(this, void 0, void 0, function* () {
                    return this.connection.documentClient.batchWrite({
                        RequestItems: Object.assign({}, batchRequestMap),
                        ReturnItemCollectionMetrics: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    });
                }), batchRequestMap, REQUEST_TYPE.BATCH_WRITE);
            });
            const batchRequestsResponses = (yield Promise.all(batchRequests));
            // log stats
            batchRequestsResponses.forEach((response, index) => {
                if (response.ConsumedCapacity) {
                    this.connection.logger.logStats({
                        requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                        scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                        requestSegment: index,
                        statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                        consumedCapacityData: response.ConsumedCapacity,
                    });
                }
            });
            return this.recursiveHandleBatchWriteItemsResponse(batchRequestsResponses, ++totalAttemptsSoFar, options, metadataOptions);
        });
    }
    recursiveHandleBatchReadItemsResponse(batchReadItemOutputList, totalAttemptsSoFar, options, responsesStore = [], metadataOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // save all responses from api to responses store
            const batchReadResponses = batchReadItemOutputList
                .filter((response) => response.Responses && !(0, is_empty_object_1.isEmptyObject)(response.Responses))
                .map((response) => response.Responses);
            if (batchReadResponses.length) {
                const mappedResponsesItemList = batchReadResponses.flatMap(batchGetResponse => this.mapBatchGetResponseToItemList(batchGetResponse));
                responsesStore.push(...mappedResponsesItemList);
            }
            // recursively process all unprocessed items
            const unprocessedItemsList = batchReadItemOutputList.filter((response) => response.UnprocessedKeys && !(0, is_empty_object_1.isEmptyObject)(response.UnprocessedKeys));
            // if all items were successfully processed, return
            if (!unprocessedItemsList.length) {
                return {
                    items: responsesStore,
                };
            }
            // abort when reached max attempt count
            // if no retries provided use default BATCH_READ_MAX_ALLOWED_ATTEMPTS
            if (totalAttemptsSoFar ===
                ((_a = options === null || options === void 0 ? void 0 : options.maxRetryAttempts) !== null && _a !== void 0 ? _a : common_1.BATCH_READ_MAX_ALLOWED_ATTEMPTS)) {
                this.connection.logger.logInfo({
                    requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                    scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                    log: `Reached max allowed attempts ${totalAttemptsSoFar}, aborting...`,
                });
                return {
                    items: responsesStore,
                    unprocessedItemsList: unprocessedItemsList.map(item => item.UnprocessedKeys),
                };
            }
            // backoff before retrying
            yield this.waitForExponentialBackoff(totalAttemptsSoFar, undefined, metadataOptions);
            // aggregate all requests by table name
            const sortedUnprocessedItems = unprocessedItemsList.reduce((acc, { UnprocessedKeys }) => {
                Object.entries(UnprocessedKeys).forEach(([tableName, unprocessedRequests]) => {
                    var _a;
                    if (!acc[tableName]) {
                        acc[tableName] = {
                            Keys: [],
                        };
                    }
                    (_a = acc[tableName].Keys) === null || _a === void 0 ? void 0 : _a.push(...unprocessedRequests.Keys);
                });
                return acc;
            }, {});
            const batchRequestsItemsList = this._dcBatchTransformer.mapTableReadItemsToBatchReadItems(sortedUnprocessedItems);
            // apply limit
            const batchRequests = batchRequestsItemsList.map(batchRequestMap => {
                return this.toLimited(() => __awaiter(this, void 0, void 0, function* () {
                    return this.connection.documentClient.batchGet({
                        RequestItems: Object.assign({}, batchRequestMap),
                        ReturnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    });
                }), batchRequestMap, REQUEST_TYPE.BATCH_READ);
            });
            const batchRequestsResponses = (yield Promise.all(batchRequests));
            // log stats
            batchRequestsResponses.forEach((response, index) => {
                if (response.ConsumedCapacity) {
                    this.connection.logger.logStats({
                        requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                        scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                        requestSegment: index,
                        statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                        consumedCapacityData: response.ConsumedCapacity,
                    });
                }
            });
            return this.recursiveHandleBatchReadItemsResponse(batchRequestsResponses, ++totalAttemptsSoFar, options, 
            // responses store containing responses from all requests
            responsesStore, metadataOptions);
        });
    }
    resetErrorQueue() {
        this._errorQueue = [];
    }
    mapBatchGetResponseToItemList(batchGetResponse) {
        return Object.entries(batchGetResponse).flatMap(([, batchResponse]) => batchResponse);
    }
    /**
     * Returns promise that is Promise.all safe and also can be managed by p-limit
     * @param anyPromiseFactory
     * @param requestItem // request item input
     * @param requestType // request type
     */
    toLimited(anyPromiseFactory, requestItem, requestType) {
        return this.limit(() => __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield anyPromiseFactory();
                return response;
            }
            catch (err) {
                this._errorQueue.push({
                    requestInput: requestItem,
                    error: err,
                    requestType,
                });
                // when any error is thrown while promises are running, return it
                // instead of throwing it to have other requests run as is without
                // interruptions
                return err;
            }
        }));
    }
    waitForExponentialBackoff(attempts, multiplicationFactor = 1, metadataOptions) {
        multiplicationFactor = multiplicationFactor < 1 ? 1 : multiplicationFactor;
        return new Promise(resolve => {
            const backoffTime = this.exponentialBackoff(attempts, multiplicationFactor);
            this.connection.logger.logInfo({
                requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                scope: common_1.MANAGER_NAME.BATCH_MANAGER,
                log: `${attempts} attempts so far, sleeping ${backoffTime}ms before retrying...`,
            });
            setTimeout(resolve, backoffTime);
        });
    }
    /**
     * @param attempts
     */
    exponentialBackoff(attempts, multiplicationFactor) {
        return Math.floor(Math.random() * 10 * Math.pow(2, attempts || 1) * multiplicationFactor);
    }
}
exports.BatchManager = BatchManager;
//# sourceMappingURL=data:application/json;base64,