"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScanManager = void 0;
const common_1 = require("@typedorm/common");
const p_limit_1 = __importDefault(require("p-limit"));
const get_unique_request_id_1 = require("../../helpers/get-unique-request-id");
const document_client_scan_transformer_1 = require("../transformer/document-client-scan-transformer");
class ScanManager {
    constructor(connection) {
        this.connection = connection;
        this.limit = (0, p_limit_1.default)(common_1.PARALLEL_SCAN_CONCURRENCY_LIMIT);
        this._dcScanTransformer = new document_client_scan_transformer_1.DocumentClientScanTransformer(connection);
        this.itemsFetchedSoFarTotalParallelCount = 0;
    }
    /**
     * Finds all the matching entity over document client scan operation
     * @param entityClass Entity to find
     * @param findOptions find query options
     * @param metadataOptions Other metadata options
     */
    find(entityClass, findOptions, metadataOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            let response;
            if (findOptions === null || findOptions === void 0 ? void 0 : findOptions.totalSegments) {
                (response = yield this.parallelScan(Object.assign(Object.assign({}, findOptions), { entity: entityClass }))),
                    {
                        requestId,
                        returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                    };
            }
            else {
                response = yield this.scan(Object.assign(Object.assign({}, findOptions), { entity: entityClass }), {
                    requestId,
                    returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                });
            }
            if ((_a = response.unknownItems) === null || _a === void 0 ? void 0 : _a.length) {
                // log warning for items that were skipped form the response
                // These are items that had __en attribute on them but TypeDORM does no longer know about them
                this.connection.logger.logWarn({
                    requestId,
                    scope: common_1.MANAGER_NAME.SCAN_MANAGER,
                    log: `"${response.unknownItems.length}" items were skipped from the response because TypDORM failed to resolve them.`,
                });
            }
            return {
                items: response.items,
                cursor: response.cursor,
            };
        });
    }
    /**
     * Returns total count of all matching items for current entity
     * @param entityClass Entity to count
     * @param scanOptions Extra scan options
     * @param metadataOptions Other metadata options
     */
    count(entityClass, scanOptions, metadataOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            const dynamoScanInput = this._dcScanTransformer.toDynamoScanItem(Object.assign(Object.assign({}, scanOptions), { entity: entityClass, onlyCount: true, select: undefined }), // select projection and count can not be used together
            {
                requestId,
                returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            });
            const count = yield this._internalRecursiveCount({
                scanInput: dynamoScanInput,
                metadataOptions: {
                    requestId,
                    returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                },
            });
            return count;
        });
    }
    /**
     * Scans all items from dynamo table in parallel while also respecting the max provisioned concurrency
     * @param scanOptions Options for parallel scan
     * @param metadataOptions Additional metadata options
     */
    parallelScan(scanOptions, metadataOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            // start with 0
            this.itemsFetchedSoFarTotalParallelCount = 0;
            const concurrencyLimit = common_1.PARALLEL_SCAN_CONCURRENCY_LIMIT || scanOptions.requestsConcurrencyLimit;
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            if (scanOptions.requestsConcurrencyLimit) {
                this.limit = (0, p_limit_1.default)(scanOptions.requestsConcurrencyLimit);
            }
            const parallelScanOptions = [];
            if ((scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limit) &&
                (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limitPerSegment) &&
                (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limit) < (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limitPerSegment)) {
                throw new common_1.InvalidParallelScanLimitOptionError(scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limit, scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limitPerSegment);
            }
            for (let index = 0; index < scanOptions.totalSegments; index++) {
                // only the cursor for same segment can be applied
                const cursorForSegment = scanOptions.cursor
                    ? scanOptions.cursor[index]
                    : undefined;
                parallelScanOptions.push(Object.assign(Object.assign({}, scanOptions), { cursor: cursorForSegment, segment: index }));
            }
            this.connection.logger.logInfo({
                requestId,
                scope: common_1.MANAGER_NAME.SCAN_MANAGER,
                log: `Running scan in parallel with ${scanOptions.totalSegments} segments.`,
            });
            if (concurrencyLimit < scanOptions.totalSegments) {
                this.connection.logger.logInfo({
                    requestId,
                    scope: common_1.MANAGER_NAME.SCAN_MANAGER,
                    log: `Current request concurrency limit ${concurrencyLimit} is lower than requested segments count ${scanOptions.totalSegments}
        So requests will be run in a batch of ${concurrencyLimit} at a time until all segments ${scanOptions.totalSegments} have processed.`,
                });
            }
            const allPromisesResponse = yield Promise.all(parallelScanOptions.map(options => this.toLimited(this.scan(options, metadataOptions))));
            // merge all responses
            const response = allPromisesResponse.reduce((acc, current, index) => {
                var _a, _b;
                if ((_a = current.items) === null || _a === void 0 ? void 0 : _a.length) {
                    if (!acc.items) {
                        acc.items = [];
                    }
                    acc.items = [...acc.items, ...current.items];
                }
                if ((_b = current.unknownItems) === null || _b === void 0 ? void 0 : _b.length) {
                    if (!acc.unknownItems) {
                        acc.unknownItems = [];
                    }
                    acc.unknownItems = [...acc.unknownItems, ...current.unknownItems];
                }
                if (current.cursor) {
                    if (!acc.cursor) {
                        acc.cursor = {};
                    }
                    acc.cursor = Object.assign(Object.assign({}, acc.cursor), { [index]: current.cursor });
                }
                return acc;
            }, {});
            return response;
        });
    }
    /**
     * Low level scan operation.
     *
     * Perhaps you are looking for higher level ScanManager.find or ScanManager.parallelScan operation
     * @param scanOptions scan options to run scan with
     * @param metadataOptions any other metadata options
     */
    scan(scanOptions, metadataOptions) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const requestId = (0, get_unique_request_id_1.getUniqueRequestId)(metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId);
            const dynamoScanInput = this._dcScanTransformer.toDynamoScanItem(Object.assign(Object.assign({}, scanOptions), { 
                // if requested segmented scan, then apply segment limit or default to limit operator
                limit: (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.totalSegments)
                    ? scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limitPerSegment
                    : scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limit }), {
                requestId,
                returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
            });
            const response = yield this._internalRecursiveScan({
                scanInput: dynamoScanInput,
                limit: scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.limit,
                cursor: scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.cursor,
                metadataOptions: {
                    requestId,
                    returnConsumedCapacity: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.returnConsumedCapacity,
                },
            });
            const entities = this._dcScanTransformer.fromDynamoScanResponseItemList(response.items);
            if ((scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.entity) && entities.unknownItems) {
                this.connection.logger.logWarn({
                    requestId,
                    scope: common_1.MANAGER_NAME.SCAN_MANAGER,
                    log: `
        There were some items that looked like ${scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.entity.name} but TypeDORM was unable to convert it back to entity type,
        This can happen when there are items in the table with "${common_1.INTERNAL_ENTITY_ATTRIBUTE.ENTITY_NAME} but was not created by TypeDORM.
        You should remove them or update it to something different."`,
                });
            }
            return {
                items: ((_a = entities.items) === null || _a === void 0 ? void 0 : _a.length) ? entities.items : undefined,
                unknownItems: ((_b = entities.unknownItems) === null || _b === void 0 ? void 0 : _b.length)
                    ? entities.unknownItems
                    : undefined,
                cursor: response.cursor,
            };
        });
    }
    /**
     * Recursively scans table with given options
     */
    _internalRecursiveScan({ scanInput, limit, cursor, itemsFetched = [], metadataOptions, }) {
        return __awaiter(this, void 0, void 0, function* () {
            // return if the count is already met
            if (limit && this.itemsFetchedSoFarTotalParallelCount >= limit) {
                return {
                    items: itemsFetched,
                    cursor,
                };
            }
            const { LastEvaluatedKey, Items = [], ConsumedCapacity, } = yield this.connection.documentClient.scan(Object.assign(Object.assign({}, scanInput), { ExclusiveStartKey: cursor }));
            // stats
            if (ConsumedCapacity) {
                this.connection.logger.logStats({
                    requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                    scope: common_1.MANAGER_NAME.SCAN_MANAGER,
                    statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                    consumedCapacityData: ConsumedCapacity,
                });
            }
            // recheck if requested items limit is already met, may be other worker
            // if so drop the result of current request and return
            if (limit && this.itemsFetchedSoFarTotalParallelCount >= limit) {
                return {
                    items: itemsFetched,
                    cursor,
                };
            }
            itemsFetched = [...itemsFetched, ...Items];
            this.itemsFetchedSoFarTotalParallelCount += Items.length;
            if (LastEvaluatedKey) {
                return this._internalRecursiveScan({
                    scanInput,
                    limit,
                    cursor: LastEvaluatedKey,
                    itemsFetched,
                    metadataOptions,
                });
            }
            return {
                items: itemsFetched,
                cursor: LastEvaluatedKey,
            };
        });
    }
    /**
     * Recursively counts items form table with given options
     */
    _internalRecursiveCount({ scanInput, cursor, currentCount = 0, metadataOptions, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { Count, LastEvaluatedKey, ConsumedCapacity } = yield this.connection.documentClient.scan(Object.assign(Object.assign({}, scanInput), { ExclusiveStartKey: cursor }));
            // stats
            if (ConsumedCapacity) {
                this.connection.logger.logStats({
                    requestId: metadataOptions === null || metadataOptions === void 0 ? void 0 : metadataOptions.requestId,
                    scope: common_1.MANAGER_NAME.SCAN_MANAGER,
                    statsType: common_1.STATS_TYPE.CONSUMED_CAPACITY,
                    consumedCapacityData: ConsumedCapacity,
                });
            }
            currentCount += Count || 0;
            if (LastEvaluatedKey) {
                return this._internalRecursiveCount({
                    scanInput,
                    cursor: LastEvaluatedKey,
                    currentCount,
                    metadataOptions,
                });
            }
            return currentCount;
        });
    }
    /**
     * Simple wrapper to limit number of concurrent calls
     * @param promise wraps promise in a limited factory
     * @returns
     */
    toLimited(promise) {
        return this.limit(() => promise);
    }
}
exports.ScanManager = ScanManager;
//# sourceMappingURL=data:application/json;base64,