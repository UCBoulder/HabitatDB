import { Container } from './src/classes/container';
import { ConnectionManager } from './src/classes/connection/connection-manager';
// options
export * from './src/classes/connection/connection-options';
// models
export * from './src/classes/expression/condition';
export * from './src/classes/expression/key-condition';
export * from './src/classes/transaction/write-transaction';
export * from './src/classes/transaction/read-transaction';
export * from './src/classes/batch/write-batch';
export * from './src/classes/batch/read-batch';
// managers
export * from './src/classes/manager/entity-manager';
export * from './src/classes/manager/batch-manager';
export * from './src/classes/manager/transaction-manager';
export * from './src/classes/manager/scan-manager';
// classes
export { Connection } from './src/classes/connection/connection';
// helpers
export { AutoGenerateAttributeValue } from './src/helpers/auto-generate-attribute-value';
// public method exports
export function createConnection(options) {
    const connection = connectionManger().create(options);
    const connected = connection.connect();
    if (!connected) {
        throw new Error(`Failed to create connection with options: ${JSON.stringify(options)}`);
    }
    return connected;
}
export function createConnections(optionsList) {
    return optionsList.map(options => createConnection(options));
}
export function getConnection() {
    return Container.get(ConnectionManager).get();
}
export function getEntityManager(connectionName) {
    return connectionManger().get(connectionName).entityManager;
}
export function getTransactionManger(connectionName) {
    return connectionManger().get(connectionName).transactionManger;
}
export function getBatchManager(connectionName) {
    return connectionManger().get(connectionName).batchManager;
}
export function getScanManager(connectionName) {
    return connectionManger().get(connectionName).scanManager;
}
// private methods
function connectionManger() {
    return Container.get(ConnectionManager);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvcHVibGljLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkNBQTZDLENBQUM7QUFFOUUsVUFBVTtBQUNWLGNBQWMsNkNBQTZDLENBQUM7QUFFNUQsU0FBUztBQUNULGNBQWMsb0NBQW9DLENBQUM7QUFDbkQsY0FBYyx3Q0FBd0MsQ0FBQztBQUN2RCxjQUFjLDZDQUE2QyxDQUFDO0FBQzVELGNBQWMsNENBQTRDLENBQUM7QUFDM0QsY0FBYyxpQ0FBaUMsQ0FBQztBQUNoRCxjQUFjLGdDQUFnQyxDQUFDO0FBRS9DLFdBQVc7QUFDWCxjQUFjLHNDQUFzQyxDQUFDO0FBQ3JELGNBQWMscUNBQXFDLENBQUM7QUFDcEQsY0FBYywyQ0FBMkMsQ0FBQztBQUMxRCxjQUFjLG9DQUFvQyxDQUFDO0FBRW5ELFVBQVU7QUFDVixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFFL0QsVUFBVTtBQUNWLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLDZDQUE2QyxDQUFDO0FBRXZGLHdCQUF3QjtBQUV4QixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBMEI7SUFDekQsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdEQsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXZDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxNQUFNLElBQUksS0FBSyxDQUNiLDZDQUE2QyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3ZFLENBQUM7S0FDSDtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsV0FBZ0M7SUFDaEUsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWE7SUFDM0IsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEQsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxjQUF1QjtJQUN0RCxPQUFPLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLGNBQXVCO0lBQzFELE9BQU8sZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsaUJBQWlCLENBQUM7QUFDbEUsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsY0FBdUI7SUFDckQsT0FBTyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDN0QsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsY0FBdUI7SUFDcEQsT0FBTyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDNUQsQ0FBQztBQUVELGtCQUFrQjtBQUVsQixTQUFTLGdCQUFnQjtJQUN2QixPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25uZWN0aW9uT3B0aW9uc30gZnJvbSAnLi9zcmMvY2xhc3Nlcy9jb25uZWN0aW9uL2Nvbm5lY3Rpb24tb3B0aW9ucyc7XG5pbXBvcnQge0NvbnRhaW5lcn0gZnJvbSAnLi9zcmMvY2xhc3Nlcy9jb250YWluZXInO1xuaW1wb3J0IHtDb25uZWN0aW9uTWFuYWdlcn0gZnJvbSAnLi9zcmMvY2xhc3Nlcy9jb25uZWN0aW9uL2Nvbm5lY3Rpb24tbWFuYWdlcic7XG5cbi8vIG9wdGlvbnNcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NsYXNzZXMvY29ubmVjdGlvbi9jb25uZWN0aW9uLW9wdGlvbnMnO1xuXG4vLyBtb2RlbHNcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NsYXNzZXMvZXhwcmVzc2lvbi9jb25kaXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2xhc3Nlcy9leHByZXNzaW9uL2tleS1jb25kaXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2xhc3Nlcy90cmFuc2FjdGlvbi93cml0ZS10cmFuc2FjdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jbGFzc2VzL3RyYW5zYWN0aW9uL3JlYWQtdHJhbnNhY3Rpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2xhc3Nlcy9iYXRjaC93cml0ZS1iYXRjaCc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jbGFzc2VzL2JhdGNoL3JlYWQtYmF0Y2gnO1xuXG4vLyBtYW5hZ2Vyc1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2xhc3Nlcy9tYW5hZ2VyL2VudGl0eS1tYW5hZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NsYXNzZXMvbWFuYWdlci9iYXRjaC1tYW5hZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NsYXNzZXMvbWFuYWdlci90cmFuc2FjdGlvbi1tYW5hZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NsYXNzZXMvbWFuYWdlci9zY2FuLW1hbmFnZXInO1xuXG4vLyBjbGFzc2VzXG5leHBvcnQge0Nvbm5lY3Rpb259IGZyb20gJy4vc3JjL2NsYXNzZXMvY29ubmVjdGlvbi9jb25uZWN0aW9uJztcblxuLy8gaGVscGVyc1xuZXhwb3J0IHtBdXRvR2VuZXJhdGVBdHRyaWJ1dGVWYWx1ZX0gZnJvbSAnLi9zcmMvaGVscGVycy9hdXRvLWdlbmVyYXRlLWF0dHJpYnV0ZS12YWx1ZSc7XG5cbi8vIHB1YmxpYyBtZXRob2QgZXhwb3J0c1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdGlvbihvcHRpb25zOiBDb25uZWN0aW9uT3B0aW9ucykge1xuICBjb25zdCBjb25uZWN0aW9uID0gY29ubmVjdGlvbk1hbmdlcigpLmNyZWF0ZShvcHRpb25zKTtcblxuICBjb25zdCBjb25uZWN0ZWQgPSBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICBpZiAoIWNvbm5lY3RlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gY3JlYXRlIGNvbm5lY3Rpb24gd2l0aCBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfWBcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNvbm5lY3RlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb25zKG9wdGlvbnNMaXN0OiBDb25uZWN0aW9uT3B0aW9uc1tdKSB7XG4gIHJldHVybiBvcHRpb25zTGlzdC5tYXAob3B0aW9ucyA9PiBjcmVhdGVDb25uZWN0aW9uKG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbm5lY3Rpb24oKSB7XG4gIHJldHVybiBDb250YWluZXIuZ2V0KENvbm5lY3Rpb25NYW5hZ2VyKS5nZXQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudGl0eU1hbmFnZXIoY29ubmVjdGlvbk5hbWU/OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGNvbm5lY3Rpb25NYW5nZXIoKS5nZXQoY29ubmVjdGlvbk5hbWUpLmVudGl0eU1hbmFnZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbk1hbmdlcihjb25uZWN0aW9uTmFtZT86IHN0cmluZykge1xuICByZXR1cm4gY29ubmVjdGlvbk1hbmdlcigpLmdldChjb25uZWN0aW9uTmFtZSkudHJhbnNhY3Rpb25NYW5nZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYXRjaE1hbmFnZXIoY29ubmVjdGlvbk5hbWU/OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGNvbm5lY3Rpb25NYW5nZXIoKS5nZXQoY29ubmVjdGlvbk5hbWUpLmJhdGNoTWFuYWdlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYW5NYW5hZ2VyKGNvbm5lY3Rpb25OYW1lPzogc3RyaW5nKSB7XG4gIHJldHVybiBjb25uZWN0aW9uTWFuZ2VyKCkuZ2V0KGNvbm5lY3Rpb25OYW1lKS5zY2FuTWFuYWdlcjtcbn1cblxuLy8gcHJpdmF0ZSBtZXRob2RzXG5cbmZ1bmN0aW9uIGNvbm5lY3Rpb25NYW5nZXIoKSB7XG4gIHJldHVybiBDb250YWluZXIuZ2V0KENvbm5lY3Rpb25NYW5hZ2VyKTtcbn1cbiJdfQ==