import { regexInterpolatedWord } from './constants';
import { isKeyOfTypeAliasSchema } from './is-key-of-type-alias-schema';
export function getInterpolatedKeys(key) {
    // early return when referenced key is of type alias schema
    if (isKeyOfTypeAliasSchema(key)) {
        return [key.alias];
    }
    const matchIterator = key.matchAll(regexInterpolatedWord);
    const interpolatedKeys = [];
    recursiveFindInterpolatedKeys(key, matchIterator, interpolatedKeys);
    // there shouldn't be any duplicates, still to be double sure remove duplicates if there are any
    return [...new Set(interpolatedKeys)];
}
function recursiveFindInterpolatedKeys(key, iterator, interpolatedKeys) {
    const next = iterator.next();
    if (next.done) {
        return;
    }
    // regex match returns [match, key]
    const variable = next.value[1];
    // push interpolated word to array
    interpolatedKeys.push(variable);
    recursiveFindInterpolatedKeys(key, iterator, interpolatedKeys);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWludGVycG9sYXRlZC1rZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaGVscGVycy9nZXQtaW50ZXJwb2xhdGVkLWtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBRXJFLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUE2QjtJQUMvRCwyREFBMkQ7SUFDM0QsSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQWUsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzFELE1BQU0sZ0JBQWdCLEdBQUcsRUFBYyxDQUFDO0lBQ3hDLDZCQUE2QixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUVwRSxnR0FBZ0c7SUFDaEcsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxTQUFTLDZCQUE2QixDQUNwQyxHQUFXLEVBQ1gsUUFBNEMsRUFDNUMsZ0JBQTBCO0lBRTFCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDYixPQUFPO0tBQ1I7SUFFRCxtQ0FBbUM7SUFDbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvQixrQ0FBa0M7SUFDbEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLDZCQUE2QixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNqRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbnRpdHlBbGlhc09yU3RyaW5nfSBmcm9tICdAdHlwZWRvcm0vY29tbW9uJztcbmltcG9ydCB7cmVnZXhJbnRlcnBvbGF0ZWRXb3JkfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQge2lzS2V5T2ZUeXBlQWxpYXNTY2hlbWF9IGZyb20gJy4vaXMta2V5LW9mLXR5cGUtYWxpYXMtc2NoZW1hJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludGVycG9sYXRlZEtleXMoa2V5OiBFbnRpdHlBbGlhc09yU3RyaW5nPGFueT4pIHtcbiAgLy8gZWFybHkgcmV0dXJuIHdoZW4gcmVmZXJlbmNlZCBrZXkgaXMgb2YgdHlwZSBhbGlhcyBzY2hlbWFcbiAgaWYgKGlzS2V5T2ZUeXBlQWxpYXNTY2hlbWEoa2V5KSkge1xuICAgIHJldHVybiBba2V5LmFsaWFzIGFzIHN0cmluZ107XG4gIH1cblxuICBjb25zdCBtYXRjaEl0ZXJhdG9yID0ga2V5Lm1hdGNoQWxsKHJlZ2V4SW50ZXJwb2xhdGVkV29yZCk7XG4gIGNvbnN0IGludGVycG9sYXRlZEtleXMgPSBbXSBhcyBzdHJpbmdbXTtcbiAgcmVjdXJzaXZlRmluZEludGVycG9sYXRlZEtleXMoa2V5LCBtYXRjaEl0ZXJhdG9yLCBpbnRlcnBvbGF0ZWRLZXlzKTtcblxuICAvLyB0aGVyZSBzaG91bGRuJ3QgYmUgYW55IGR1cGxpY2F0ZXMsIHN0aWxsIHRvIGJlIGRvdWJsZSBzdXJlIHJlbW92ZSBkdXBsaWNhdGVzIGlmIHRoZXJlIGFyZSBhbnlcbiAgcmV0dXJuIFsuLi5uZXcgU2V0KGludGVycG9sYXRlZEtleXMpXTtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlRmluZEludGVycG9sYXRlZEtleXMoXG4gIGtleTogc3RyaW5nLFxuICBpdGVyYXRvcjogSXRlcmFibGVJdGVyYXRvcjxSZWdFeHBNYXRjaEFycmF5PixcbiAgaW50ZXJwb2xhdGVkS2V5czogc3RyaW5nW11cbikge1xuICBjb25zdCBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xuICBpZiAobmV4dC5kb25lKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gcmVnZXggbWF0Y2ggcmV0dXJucyBbbWF0Y2gsIGtleV1cbiAgY29uc3QgdmFyaWFibGUgPSBuZXh0LnZhbHVlWzFdO1xuXG4gIC8vIHB1c2ggaW50ZXJwb2xhdGVkIHdvcmQgdG8gYXJyYXlcbiAgaW50ZXJwb2xhdGVkS2V5cy5wdXNoKHZhcmlhYmxlKTtcbiAgcmVjdXJzaXZlRmluZEludGVycG9sYXRlZEtleXMoa2V5LCBpdGVyYXRvciwgaW50ZXJwb2xhdGVkS2V5cyk7XG59XG4iXX0=