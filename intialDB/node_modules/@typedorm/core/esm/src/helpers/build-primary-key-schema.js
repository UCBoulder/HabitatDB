import { IsCompositePrimaryKey, } from '@typedorm/common';
import { getInterpolatedKeys } from './get-interpolated-keys';
import { validateKey } from './validate-key';
export function buildPrimaryKeySchema({ table, primaryKey, attributes, }) {
    const partitionKeyInterpolations = getInterpolatedKeys(primaryKey.partitionKey);
    const tablePartitionKeyName = table.partitionKey;
    if (IsCompositePrimaryKey(primaryKey)) {
        // validate primary key signature
        if (!table.usesCompositeKey()) {
            throw new Error(`Table "${table.name}" does not use composite key, thus sort key "${primaryKey.sortKey}" should not exist.`);
        }
        validateKey(primaryKey.partitionKey, attributes);
        validateKey(primaryKey.sortKey, attributes);
        // build primary key
        const tableSortKeyName = table.sortKey ?? '';
        const sortKeyInterpolations = getInterpolatedKeys(primaryKey.sortKey);
        return {
            attributes: {
                [tablePartitionKeyName]: primaryKey.partitionKey,
                [tableSortKeyName]: primaryKey.sortKey,
            },
            metadata: {
                _interpolations: {
                    [tablePartitionKeyName]: partitionKeyInterpolations,
                    [tableSortKeyName]: sortKeyInterpolations,
                },
            },
        };
        // when current primary key is a simple key
    }
    else {
        // validate signature
        if (table.usesCompositeKey()) {
            throw new Error(`Table "${table.name}" uses composite key as a primary key, thus sort key is required`);
        }
        validateKey(primaryKey.partitionKey, attributes);
        // build primary key
        return {
            attributes: {
                [tablePartitionKeyName]: primaryKey.partitionKey,
            },
            metadata: {
                _interpolations: {
                    [tablePartitionKeyName]: partitionKeyInterpolations,
                },
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtcHJpbWFyeS1rZXktc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaGVscGVycy9idWlsZC1wcmltYXJ5LWtleS1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLHFCQUFxQixHQUV0QixNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxNQUFNLFVBQVUscUJBQXFCLENBQUMsRUFDcEMsS0FBSyxFQUNMLFVBQVUsRUFDVixVQUFVLEdBS1g7SUFNQyxNQUFNLDBCQUEwQixHQUFHLG1CQUFtQixDQUNwRCxVQUFVLENBQUMsWUFBWSxDQUN4QixDQUFDO0lBRUYsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0lBQ2pELElBQUkscUJBQXFCLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDckMsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUNiLFVBQVUsS0FBSyxDQUFDLElBQUksZ0RBQWdELFVBQVUsQ0FBQyxPQUFPLHFCQUFxQixDQUM1RyxDQUFDO1NBQ0g7UUFFRCxXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqRCxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUU1QyxvQkFBb0I7UUFDcEIsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUM3QyxNQUFNLHFCQUFxQixHQUFHLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RSxPQUFPO1lBQ0wsVUFBVSxFQUFFO2dCQUNWLENBQUMscUJBQXFCLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWTtnQkFDaEQsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2FBQ3ZDO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLGVBQWUsRUFBRTtvQkFDZixDQUFDLHFCQUFxQixDQUFDLEVBQUUsMEJBQTBCO29CQUNuRCxDQUFDLGdCQUFnQixDQUFDLEVBQUUscUJBQXFCO2lCQUMxQzthQUNGO1NBQ0YsQ0FBQztRQUNGLDJDQUEyQztLQUM1QztTQUFNO1FBQ0wscUJBQXFCO1FBQ3JCLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FDYixVQUFVLEtBQUssQ0FBQyxJQUFJLGtFQUFrRSxDQUN2RixDQUFDO1NBQ0g7UUFDRCxXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVqRCxvQkFBb0I7UUFDcEIsT0FBTztZQUNMLFVBQVUsRUFBRTtnQkFDVixDQUFDLHFCQUFxQixDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVk7YUFDakQ7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFO29CQUNmLENBQUMscUJBQXFCLENBQUMsRUFBRSwwQkFBMEI7aUJBQ3BEO2FBQ0Y7U0FDRixDQUFDO0tBQ0g7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVGFibGUsXG4gIFByaW1hcnlLZXksXG4gIElzQ29tcG9zaXRlUHJpbWFyeUtleSxcbiAgRW50aXR5QWxpYXNPclN0cmluZyxcbn0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge2dldEludGVycG9sYXRlZEtleXN9IGZyb20gJy4vZ2V0LWludGVycG9sYXRlZC1rZXlzJztcbmltcG9ydCB7dmFsaWRhdGVLZXl9IGZyb20gJy4vdmFsaWRhdGUta2V5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUHJpbWFyeUtleVNjaGVtYSh7XG4gIHRhYmxlLFxuICBwcmltYXJ5S2V5LFxuICBhdHRyaWJ1dGVzLFxufToge1xuICB0YWJsZTogVGFibGU7XG4gIHByaW1hcnlLZXk6IFByaW1hcnlLZXk7XG4gIGF0dHJpYnV0ZXM6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9O1xufSk6IHtcbiAgYXR0cmlidXRlczoge1trZXk6IHN0cmluZ106IEVudGl0eUFsaWFzT3JTdHJpbmc8YW55Pn07XG4gIG1ldGFkYXRhOiB7XG4gICAgX2ludGVycG9sYXRpb25zOiB7W2tleTogc3RyaW5nXTogYW55fTtcbiAgfTtcbn0ge1xuICBjb25zdCBwYXJ0aXRpb25LZXlJbnRlcnBvbGF0aW9ucyA9IGdldEludGVycG9sYXRlZEtleXMoXG4gICAgcHJpbWFyeUtleS5wYXJ0aXRpb25LZXlcbiAgKTtcblxuICBjb25zdCB0YWJsZVBhcnRpdGlvbktleU5hbWUgPSB0YWJsZS5wYXJ0aXRpb25LZXk7XG4gIGlmIChJc0NvbXBvc2l0ZVByaW1hcnlLZXkocHJpbWFyeUtleSkpIHtcbiAgICAvLyB2YWxpZGF0ZSBwcmltYXJ5IGtleSBzaWduYXR1cmVcbiAgICBpZiAoIXRhYmxlLnVzZXNDb21wb3NpdGVLZXkoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGFibGUgXCIke3RhYmxlLm5hbWV9XCIgZG9lcyBub3QgdXNlIGNvbXBvc2l0ZSBrZXksIHRodXMgc29ydCBrZXkgXCIke3ByaW1hcnlLZXkuc29ydEtleX1cIiBzaG91bGQgbm90IGV4aXN0LmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVLZXkocHJpbWFyeUtleS5wYXJ0aXRpb25LZXksIGF0dHJpYnV0ZXMpO1xuICAgIHZhbGlkYXRlS2V5KHByaW1hcnlLZXkuc29ydEtleSwgYXR0cmlidXRlcyk7XG5cbiAgICAvLyBidWlsZCBwcmltYXJ5IGtleVxuICAgIGNvbnN0IHRhYmxlU29ydEtleU5hbWUgPSB0YWJsZS5zb3J0S2V5ID8/ICcnO1xuICAgIGNvbnN0IHNvcnRLZXlJbnRlcnBvbGF0aW9ucyA9IGdldEludGVycG9sYXRlZEtleXMocHJpbWFyeUtleS5zb3J0S2V5KTtcbiAgICByZXR1cm4ge1xuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBbdGFibGVQYXJ0aXRpb25LZXlOYW1lXTogcHJpbWFyeUtleS5wYXJ0aXRpb25LZXksXG4gICAgICAgIFt0YWJsZVNvcnRLZXlOYW1lXTogcHJpbWFyeUtleS5zb3J0S2V5LFxuICAgICAgfSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIF9pbnRlcnBvbGF0aW9uczoge1xuICAgICAgICAgIFt0YWJsZVBhcnRpdGlvbktleU5hbWVdOiBwYXJ0aXRpb25LZXlJbnRlcnBvbGF0aW9ucyxcbiAgICAgICAgICBbdGFibGVTb3J0S2V5TmFtZV06IHNvcnRLZXlJbnRlcnBvbGF0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICAvLyB3aGVuIGN1cnJlbnQgcHJpbWFyeSBrZXkgaXMgYSBzaW1wbGUga2V5XG4gIH0gZWxzZSB7XG4gICAgLy8gdmFsaWRhdGUgc2lnbmF0dXJlXG4gICAgaWYgKHRhYmxlLnVzZXNDb21wb3NpdGVLZXkoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGFibGUgXCIke3RhYmxlLm5hbWV9XCIgdXNlcyBjb21wb3NpdGUga2V5IGFzIGEgcHJpbWFyeSBrZXksIHRodXMgc29ydCBrZXkgaXMgcmVxdWlyZWRgXG4gICAgICApO1xuICAgIH1cbiAgICB2YWxpZGF0ZUtleShwcmltYXJ5S2V5LnBhcnRpdGlvbktleSwgYXR0cmlidXRlcyk7XG5cbiAgICAvLyBidWlsZCBwcmltYXJ5IGtleVxuICAgIHJldHVybiB7XG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIFt0YWJsZVBhcnRpdGlvbktleU5hbWVdOiBwcmltYXJ5S2V5LnBhcnRpdGlvbktleSxcbiAgICAgIH0sXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBfaW50ZXJwb2xhdGlvbnM6IHtcbiAgICAgICAgICBbdGFibGVQYXJ0aXRpb25LZXlOYW1lXTogcGFydGl0aW9uS2V5SW50ZXJwb2xhdGlvbnMsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==