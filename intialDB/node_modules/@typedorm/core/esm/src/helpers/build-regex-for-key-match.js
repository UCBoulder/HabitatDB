/**
 * Builds regex to be used to match generated keys
 * @param keySchema key schema to build regex for | i.e USER#{{id}}
 * @param interpolations list of interpolated words to match | i.e ['id']
 * @returns {
 *            exp: build regular expression
 *            keys: keys in order of match in regex
 *          }
 */
export function buildRegexForKeyMatch(keySchema, interpolations) {
    const varsPattern = interpolations.join('|');
    const keysMatcher = new RegExp(`\\{{(${varsPattern})\\}}`, 'gm');
    const keys = [];
    keySchema = keySchema.replace(keysMatcher, substr => {
        const matchKey = (substr.match(/\{{(.+?)\}}/) ?? [])[1];
        keys.push(matchKey);
        return '(.*)';
    });
    return {
        exp: new RegExp(`^${keySchema}`, 'gm'),
        keys,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtcmVnZXgtZm9yLWtleS1tYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2hlbHBlcnMvYnVpbGQtcmVnZXgtZm9yLWtleS1tYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FDbkMsU0FBaUIsRUFDakIsY0FBd0I7SUFLeEIsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLFdBQVcsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRWpFLE1BQU0sSUFBSSxHQUFHLEVBQWMsQ0FBQztJQUM1QixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDLElBQUksU0FBUyxFQUFFLEVBQUUsSUFBSSxDQUFDO1FBQ3RDLElBQUk7S0FDTCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQnVpbGRzIHJlZ2V4IHRvIGJlIHVzZWQgdG8gbWF0Y2ggZ2VuZXJhdGVkIGtleXNcbiAqIEBwYXJhbSBrZXlTY2hlbWEga2V5IHNjaGVtYSB0byBidWlsZCByZWdleCBmb3IgfCBpLmUgVVNFUiN7e2lkfX1cbiAqIEBwYXJhbSBpbnRlcnBvbGF0aW9ucyBsaXN0IG9mIGludGVycG9sYXRlZCB3b3JkcyB0byBtYXRjaCB8IGkuZSBbJ2lkJ11cbiAqIEByZXR1cm5zIHtcbiAqICAgICAgICAgICAgZXhwOiBidWlsZCByZWd1bGFyIGV4cHJlc3Npb25cbiAqICAgICAgICAgICAga2V5czoga2V5cyBpbiBvcmRlciBvZiBtYXRjaCBpbiByZWdleFxuICogICAgICAgICAgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRSZWdleEZvcktleU1hdGNoKFxuICBrZXlTY2hlbWE6IHN0cmluZyxcbiAgaW50ZXJwb2xhdGlvbnM6IHN0cmluZ1tdXG4pOiB7XG4gIGV4cDogUmVnRXhwO1xuICBrZXlzOiBzdHJpbmdbXTtcbn0ge1xuICBjb25zdCB2YXJzUGF0dGVybiA9IGludGVycG9sYXRpb25zLmpvaW4oJ3wnKTtcbiAgY29uc3Qga2V5c01hdGNoZXIgPSBuZXcgUmVnRXhwKGBcXFxce3soJHt2YXJzUGF0dGVybn0pXFxcXH19YCwgJ2dtJyk7XG5cbiAgY29uc3Qga2V5cyA9IFtdIGFzIHN0cmluZ1tdO1xuICBrZXlTY2hlbWEgPSBrZXlTY2hlbWEucmVwbGFjZShrZXlzTWF0Y2hlciwgc3Vic3RyID0+IHtcbiAgICBjb25zdCBtYXRjaEtleSA9IChzdWJzdHIubWF0Y2goL1xce3soLis/KVxcfX0vKSA/PyBbXSlbMV07XG4gICAga2V5cy5wdXNoKG1hdGNoS2V5KTtcbiAgICByZXR1cm4gJyguKiknO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGV4cDogbmV3IFJlZ0V4cChgXiR7a2V5U2NoZW1hfWAsICdnbScpLFxuICAgIGtleXMsXG4gIH07XG59XG4iXX0=