import { Connection } from './connection';
export class ConnectionManager {
    connections;
    constructor() {
        this.connections = new Map();
    }
    get(name = 'default') {
        const connection = this.connections.get(name);
        if (!connection) {
            throw new Error(`No such connection with name "${name}" exists`);
        }
        return connection;
    }
    create(options) {
        const { name = 'default' } = options;
        if (this.connections.has(name)) {
            throw new Error(`There is already an existing connection with name "${name}".`);
        }
        this.connections.set(name, new Connection(options, this.clearByName.bind(this) // bind Connection manager ctx
        ));
        const createdConnection = this.connections.get(name);
        if (!createdConnection) {
            throw new Error(`New connection with name "${name}" was created but could not be found.`);
        }
        return createdConnection;
    }
    clear() {
        this.connections = new Map();
    }
    clearByName(name) {
        this.connections.delete(name);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbi1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY2xhc3Nlcy9jb25uZWN0aW9uL2Nvbm5lY3Rpb24tbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBRXhDLE1BQU0sT0FBTyxpQkFBaUI7SUFDcEIsV0FBVyxDQUEwQjtJQUU3QztRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUM7SUFDbkQsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFJLEdBQUcsU0FBUztRQUNsQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNsRTtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBMEI7UUFDL0IsTUFBTSxFQUFDLElBQUksR0FBRyxTQUFTLEVBQUMsR0FBRyxPQUFPLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUNiLHNEQUFzRCxJQUFJLElBQUksQ0FDL0QsQ0FBQztTQUNIO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ2xCLElBQUksRUFDSixJQUFJLFVBQVUsQ0FDWixPQUFPLEVBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsOEJBQThCO1NBQzNELENBQ0YsQ0FBQztRQUVGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkJBQTZCLElBQUksdUNBQXVDLENBQ3pFLENBQUM7U0FDSDtRQUNELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO0lBQ25ELENBQUM7SUFFRCxXQUFXLENBQUMsSUFBWTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nvbm5lY3Rpb25PcHRpb25zfSBmcm9tICcuL2Nvbm5lY3Rpb24tb3B0aW9ucyc7XG5pbXBvcnQge0Nvbm5lY3Rpb259IGZyb20gJy4vY29ubmVjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uTWFuYWdlciB7XG4gIHByaXZhdGUgY29ubmVjdGlvbnM6IE1hcDxzdHJpbmcsIENvbm5lY3Rpb24+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29ubmVjdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgQ29ubmVjdGlvbj4oKTtcbiAgfVxuXG4gIGdldChuYW1lID0gJ2RlZmF1bHQnKSB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KG5hbWUpO1xuICAgIGlmICghY29ubmVjdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIGNvbm5lY3Rpb24gd2l0aCBuYW1lIFwiJHtuYW1lfVwiIGV4aXN0c2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgfVxuXG4gIGNyZWF0ZShvcHRpb25zOiBDb25uZWN0aW9uT3B0aW9ucykge1xuICAgIGNvbnN0IHtuYW1lID0gJ2RlZmF1bHQnfSA9IG9wdGlvbnM7XG4gICAgaWYgKHRoaXMuY29ubmVjdGlvbnMuaGFzKG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGVyZSBpcyBhbHJlYWR5IGFuIGV4aXN0aW5nIGNvbm5lY3Rpb24gd2l0aCBuYW1lIFwiJHtuYW1lfVwiLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuY29ubmVjdGlvbnMuc2V0KFxuICAgICAgbmFtZSxcbiAgICAgIG5ldyBDb25uZWN0aW9uKFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICB0aGlzLmNsZWFyQnlOYW1lLmJpbmQodGhpcykgLy8gYmluZCBDb25uZWN0aW9uIG1hbmFnZXIgY3R4XG4gICAgICApXG4gICAgKTtcblxuICAgIGNvbnN0IGNyZWF0ZWRDb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9ucy5nZXQobmFtZSk7XG4gICAgaWYgKCFjcmVhdGVkQ29ubmVjdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTmV3IGNvbm5lY3Rpb24gd2l0aCBuYW1lIFwiJHtuYW1lfVwiIHdhcyBjcmVhdGVkIGJ1dCBjb3VsZCBub3QgYmUgZm91bmQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZWRDb25uZWN0aW9uO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5jb25uZWN0aW9ucyA9IG5ldyBNYXA8c3RyaW5nLCBDb25uZWN0aW9uPigpO1xuICB9XG5cbiAgY2xlYXJCeU5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jb25uZWN0aW9ucy5kZWxldGUobmFtZSk7XG4gIH1cbn1cbiJdfQ==