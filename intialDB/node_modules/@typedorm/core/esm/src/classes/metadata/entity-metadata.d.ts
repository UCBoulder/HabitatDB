import { EntityRawMetadataOptions, EntityTarget, INDEX_TYPE, Table } from '@typedorm/common';
import { Connection } from '../connection/connection';
import { AttributeMetadata } from './attribute-metadata';
import { AutoGeneratedAttributeMetadata } from './auto-generated-attribute-metadata';
import { BaseMetadata } from './base-metadata';
import { InternalAttributeMetadata } from './internal-attribute-metadata';
export type DynamoEntitySchemaPrimaryKey = {
    attributes: {
        [key: string]: any;
    };
    metadata: {
        _interpolations?: {
            [key: string]: string[];
        };
    };
};
export type DynamoEntityIndexesSchema = {
    [key: string]: {
        attributes: {
            [key: string]: any;
        };
        metadata: DynamoEntityIndexSchema;
    };
};
export type DynamoEntityIndexSchema = {
    _name?: string;
    _interpolations?: {
        [key: string]: string[];
    };
    isSparse: boolean;
    type: INDEX_TYPE;
};
export interface DynamoEntitySchema {
    primaryKey: DynamoEntitySchemaPrimaryKey;
    indexes?: DynamoEntityIndexesSchema;
}
export type AttributeMetadataType = AttributeMetadata | AutoGeneratedAttributeMetadata;
export interface EntityMetadataOptions extends EntityRawMetadataOptions {
    table: Table;
    connection: Connection;
    attributes: AttributeMetadataType[];
}
export declare class EntityMetadata extends BaseMetadata {
    readonly name: string;
    readonly table: Table;
    readonly target: EntityTarget<any>;
    readonly attributes: AttributeMetadataType[];
    readonly internalAttributes: InternalAttributeMetadata[];
    readonly schema: DynamoEntitySchema;
    constructor({ connection, table, name, target, primaryKey, indexes, attributes, }: EntityMetadataOptions);
    private validateAttributeMetadata;
    private buildIndexesSchema;
}
