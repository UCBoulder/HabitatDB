import { DocumentClientTypes } from '@typedorm/document-client';
import { ReadBatch, ReadBatchItem } from '../batch/read-batch';
import { WriteBatchItem, WriteBatch } from '../batch/write-batch';
import { Connection } from '../connection/connection';
import { MetadataOptions } from './base-transformer';
import { LazyTransactionWriteItemListLoader } from './is-lazy-transaction-write-item-list-loader';
import { LowOrderTransformers } from './low-order-transformers';
export type WriteRequestWithMeta = {
    tableName: string;
    writeRequest: DocumentClientTypes.WriteRequest;
};
export type ReadRequestWithMeta = {
    tableName: string;
    readRequest: DocumentClientTypes.Key;
};
export type BatchWriteItemTransform<Transformed> = {
    rawInput: any;
    transformedInput: Transformed;
};
export type BatchWriteItemRequestMapTransform<Transformed> = {
    [key: string]: BatchWriteItemTransform<Transformed>[];
};
export declare class DocumentClientBatchTransformer extends LowOrderTransformers {
    constructor(connection: Connection);
    toDynamoWriteBatchItems(writeBatch: WriteBatch, metadataOptions?: MetadataOptions): {
        batchWriteRequestMapItems: DocumentClientTypes.BatchWriteItemRequestMapList;
        transactionListItems: BatchWriteItemTransform<DocumentClientTypes.TransactWriteItemList>[];
        lazyTransactionWriteItemListLoaderItems: BatchWriteItemTransform<LazyTransactionWriteItemListLoader>[];
        metadata: {
            namespaceId: string;
            itemTransformHashMap: Map<string, WriteBatchItem<any, any>>;
        };
    };
    toDynamoReadBatchItems(readBatch: ReadBatch, metadataOptions?: MetadataOptions): {
        batchRequestItemsList: DocumentClientTypes.BatchGetRequestMapList;
        metadata: {
            namespaceId: string;
            itemTransformHashMap: Map<string, ReadBatchItem<any, any>>;
        };
    };
    mapTableWriteItemsToBatchWriteItems(requestsSortedByTable: DocumentClientTypes.BatchWriteItemRequestMap): DocumentClientTypes.BatchWriteItemRequestMapList;
    mapTableReadItemsToBatchReadItems(requestsSortedByTable: DocumentClientTypes.BatchGetRequestMap): DocumentClientTypes.BatchGetRequestMapList;
    /**
     * Reverse transforms batch write item request to write batch item
     */
    toWriteBatchInputList(requestMap: DocumentClientTypes.BatchWriteItemRequestMap, { namespaceId, itemTransformHashMap, }: {
        namespaceId: string;
        itemTransformHashMap: Map<string, WriteBatchItem<any, any>>;
    }): WriteBatchItem<any, any>[];
    /**
     * Reverse transforms batch read item request to read batch item
     */
    toReadBatchInputList(requestMap: DocumentClientTypes.BatchGetRequestMap, { namespaceId, itemTransformHashMap, }: {
        namespaceId: string;
        itemTransformHashMap: Map<string, ReadBatchItem<any, any>>;
    }): ReadBatchItem<any, any>[];
    /**
     * Converts batch item input to pre transformed item input
     */
    private toRawBatchInputItem;
    /**
     * Parse each item in the request to be in one of the following collections
     * - simpleBatchRequestItems: simple items that can be processed in batch (i.e no uniques)
     * - transactionListItems: items that must be processed in a transaction instead of batch (i.e items with unique attributes)
     * - LazyTransactionWriteItemListLoaderItems: items that are must be processed in transaction but also requires other requests to be made first (i.e delete of unique items)
     */
    private innerTransformBatchWriteItems;
    private transformBatchReadItems;
    private getWriteRequestsSortedByTable;
    private getReadRequestsSortedByTable;
}
