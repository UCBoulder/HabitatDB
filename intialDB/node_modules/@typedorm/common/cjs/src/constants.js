"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_AWS_DYNAMO_DB_CLIENT_VERSION = exports.BATCH_READ_MAX_ALLOWED_ATTEMPTS = exports.BATCH_WRITE_MAX_ALLOWED_ATTEMPTS = exports.PARALLEL_SCAN_CONCURRENCY_LIMIT = exports.BATCH_WRITE_CONCURRENCY_LIMIT = exports.BATCH_READ_ITEMS_LIMIT = exports.BATCH_WRITE_ITEMS_LIMIT = exports.DYNAMO_QUERY_ITEMS_IMPLICIT_LIMIT = exports.DYNAMO_ATTRIBUTE_PREFIX = exports.TRANSACTION_READ_ITEMS_LIMIT = exports.TRANSACTION_WRITE_ITEMS_LIMIT = void 0;
/**
 * Current transaction write items limit set by dynamodb
 */
exports.TRANSACTION_WRITE_ITEMS_LIMIT = 100;
/**
 * Current transaction read items limit set by dynamodb
 */
exports.TRANSACTION_READ_ITEMS_LIMIT = 25;
/**
 * Prefix to apply to drm generated items
 */
exports.DYNAMO_ATTRIBUTE_PREFIX = 'DRM_GEN';
/**
 * Default Limit that is applied when query conditions do not include any explicit limits
 */
exports.DYNAMO_QUERY_ITEMS_IMPLICIT_LIMIT = 3000;
/**
 * Current batch write items limit set by dynamodb
 */
exports.BATCH_WRITE_ITEMS_LIMIT = 25;
/**
 * Current batch read items limit set by dynamodb
 */
exports.BATCH_READ_ITEMS_LIMIT = 100;
/**
 * Concurrency limit to apply, when running batch requests in parallel
 * i.e by default 5 promises are run at once
 */
exports.BATCH_WRITE_CONCURRENCY_LIMIT = 5;
/**
 * Concurrency limit to apply, when running parallel scan requests
 */
exports.PARALLEL_SCAN_CONCURRENCY_LIMIT = 10;
/**
 * Max number of allowed attempts for batch write items
 */
exports.BATCH_WRITE_MAX_ALLOWED_ATTEMPTS = 10;
/**
 * Max number of allowed attempts for batch write items
 */
exports.BATCH_READ_MAX_ALLOWED_ATTEMPTS = 10;
/**
 * Default DynamoDB client version to use
 */
exports.DEFAULT_AWS_DYNAMO_DB_CLIENT_VERSION = 2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDVSxRQUFBLDZCQUE2QixHQUFHLEdBQUcsQ0FBQztBQUVqRDs7R0FFRztBQUNVLFFBQUEsNEJBQTRCLEdBQUcsRUFBRSxDQUFDO0FBRS9DOztHQUVHO0FBQ1UsUUFBQSx1QkFBdUIsR0FBRyxTQUFTLENBQUM7QUFFakQ7O0dBRUc7QUFDVSxRQUFBLGlDQUFpQyxHQUFHLElBQUksQ0FBQztBQUV0RDs7R0FFRztBQUNVLFFBQUEsdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBRTFDOztHQUVHO0FBQ1UsUUFBQSxzQkFBc0IsR0FBRyxHQUFHLENBQUM7QUFFMUM7OztHQUdHO0FBQ1UsUUFBQSw2QkFBNkIsR0FBRyxDQUFDLENBQUM7QUFFL0M7O0dBRUc7QUFDVSxRQUFBLCtCQUErQixHQUFHLEVBQUUsQ0FBQztBQUVsRDs7R0FFRztBQUNVLFFBQUEsZ0NBQWdDLEdBQUcsRUFBRSxDQUFDO0FBRW5EOztHQUVHO0FBQ1UsUUFBQSwrQkFBK0IsR0FBRyxFQUFFLENBQUM7QUFFbEQ7O0dBRUc7QUFDVSxRQUFBLG9DQUFvQyxHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3VycmVudCB0cmFuc2FjdGlvbiB3cml0ZSBpdGVtcyBsaW1pdCBzZXQgYnkgZHluYW1vZGJcbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TQUNUSU9OX1dSSVRFX0lURU1TX0xJTUlUID0gMTAwO1xuXG4vKipcbiAqIEN1cnJlbnQgdHJhbnNhY3Rpb24gcmVhZCBpdGVtcyBsaW1pdCBzZXQgYnkgZHluYW1vZGJcbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TQUNUSU9OX1JFQURfSVRFTVNfTElNSVQgPSAyNTtcblxuLyoqXG4gKiBQcmVmaXggdG8gYXBwbHkgdG8gZHJtIGdlbmVyYXRlZCBpdGVtc1xuICovXG5leHBvcnQgY29uc3QgRFlOQU1PX0FUVFJJQlVURV9QUkVGSVggPSAnRFJNX0dFTic7XG5cbi8qKlxuICogRGVmYXVsdCBMaW1pdCB0aGF0IGlzIGFwcGxpZWQgd2hlbiBxdWVyeSBjb25kaXRpb25zIGRvIG5vdCBpbmNsdWRlIGFueSBleHBsaWNpdCBsaW1pdHNcbiAqL1xuZXhwb3J0IGNvbnN0IERZTkFNT19RVUVSWV9JVEVNU19JTVBMSUNJVF9MSU1JVCA9IDMwMDA7XG5cbi8qKlxuICogQ3VycmVudCBiYXRjaCB3cml0ZSBpdGVtcyBsaW1pdCBzZXQgYnkgZHluYW1vZGJcbiAqL1xuZXhwb3J0IGNvbnN0IEJBVENIX1dSSVRFX0lURU1TX0xJTUlUID0gMjU7XG5cbi8qKlxuICogQ3VycmVudCBiYXRjaCByZWFkIGl0ZW1zIGxpbWl0IHNldCBieSBkeW5hbW9kYlxuICovXG5leHBvcnQgY29uc3QgQkFUQ0hfUkVBRF9JVEVNU19MSU1JVCA9IDEwMDtcblxuLyoqXG4gKiBDb25jdXJyZW5jeSBsaW1pdCB0byBhcHBseSwgd2hlbiBydW5uaW5nIGJhdGNoIHJlcXVlc3RzIGluIHBhcmFsbGVsXG4gKiBpLmUgYnkgZGVmYXVsdCA1IHByb21pc2VzIGFyZSBydW4gYXQgb25jZVxuICovXG5leHBvcnQgY29uc3QgQkFUQ0hfV1JJVEVfQ09OQ1VSUkVOQ1lfTElNSVQgPSA1O1xuXG4vKipcbiAqIENvbmN1cnJlbmN5IGxpbWl0IHRvIGFwcGx5LCB3aGVuIHJ1bm5pbmcgcGFyYWxsZWwgc2NhbiByZXF1ZXN0c1xuICovXG5leHBvcnQgY29uc3QgUEFSQUxMRUxfU0NBTl9DT05DVVJSRU5DWV9MSU1JVCA9IDEwO1xuXG4vKipcbiAqIE1heCBudW1iZXIgb2YgYWxsb3dlZCBhdHRlbXB0cyBmb3IgYmF0Y2ggd3JpdGUgaXRlbXNcbiAqL1xuZXhwb3J0IGNvbnN0IEJBVENIX1dSSVRFX01BWF9BTExPV0VEX0FUVEVNUFRTID0gMTA7XG5cbi8qKlxuICogTWF4IG51bWJlciBvZiBhbGxvd2VkIGF0dGVtcHRzIGZvciBiYXRjaCB3cml0ZSBpdGVtc1xuICovXG5leHBvcnQgY29uc3QgQkFUQ0hfUkVBRF9NQVhfQUxMT1dFRF9BVFRFTVBUUyA9IDEwO1xuXG4vKipcbiAqIERlZmF1bHQgRHluYW1vREIgY2xpZW50IHZlcnNpb24gdG8gdXNlXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FXU19EWU5BTU9fREJfQ0xJRU5UX1ZFUlNJT04gPSAyO1xuIl19