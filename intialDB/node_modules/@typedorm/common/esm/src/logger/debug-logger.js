import debug from 'debug';
import chalk from 'chalk';
import { v4 } from 'uuid';
export var TRANSFORM_TYPE;
(function (TRANSFORM_TYPE) {
    TRANSFORM_TYPE["GET"] = "GET";
    TRANSFORM_TYPE["PUT"] = "PUT";
    TRANSFORM_TYPE["UPDATE"] = "UPDATE";
    TRANSFORM_TYPE["DELETE"] = "DELETE";
    TRANSFORM_TYPE["QUERY"] = "QUERY";
    TRANSFORM_TYPE["RESPONSE"] = "RESPONSE";
})(TRANSFORM_TYPE || (TRANSFORM_TYPE = {}));
export var MANAGER_NAME;
(function (MANAGER_NAME) {
    MANAGER_NAME["ENTITY_MANAGER"] = "ENTITY MANAGER";
    MANAGER_NAME["TRANSACTION_MANAGER"] = "TRANSACTION MANAGER";
    MANAGER_NAME["BATCH_MANAGER"] = "BATCH MANAGER";
    MANAGER_NAME["SCAN_MANAGER"] = "SCAN_MANAGER";
})(MANAGER_NAME || (MANAGER_NAME = {}));
export var TRANSFORM_TRANSACTION_TYPE;
(function (TRANSFORM_TRANSACTION_TYPE) {
    TRANSFORM_TRANSACTION_TYPE["TRANSACTION_WRITE"] = "TRANSACTION_WRITE";
    TRANSFORM_TRANSACTION_TYPE["TRANSACTION_READ"] = "TRANSACTION_READ";
})(TRANSFORM_TRANSACTION_TYPE || (TRANSFORM_TRANSACTION_TYPE = {}));
export var TRANSFORM_SCAN_TYPE;
(function (TRANSFORM_SCAN_TYPE) {
    TRANSFORM_SCAN_TYPE["SCAN"] = "SCAN";
    TRANSFORM_SCAN_TYPE["PARALLEL_SCAN"] = "PARALLEL_SCAN";
})(TRANSFORM_SCAN_TYPE || (TRANSFORM_SCAN_TYPE = {}));
export var TRANSFORM_BATCH_TYPE;
(function (TRANSFORM_BATCH_TYPE) {
    TRANSFORM_BATCH_TYPE["BATCH_WRITE"] = "BATCH_WRITE";
    TRANSFORM_BATCH_TYPE["BATCH_READ"] = "BATCH_READ";
})(TRANSFORM_BATCH_TYPE || (TRANSFORM_BATCH_TYPE = {}));
export var STATS_TYPE;
(function (STATS_TYPE) {
    STATS_TYPE["CONSUMED_CAPACITY"] = "CONSUMED_CAPACITY";
})(STATS_TYPE || (STATS_TYPE = {}));
export class DebugLogger {
    // log
    debugTransformLog = debug('typedorm:transform:log');
    // batch transform logger
    debugTransformBatchLog = debug('typedorm:transform:batch:log');
    // transaction transform logger
    debugTransformTransactionLog = debug('typedorm:transform:transaction:log');
    // scan transform logger
    debugTransformScanLog = debug('typedorm:transform:scan:log');
    // info logger
    debugInfoLog = debug('typedorm:info:log');
    debugWarnLog = debug('typedorm:warn:log');
    debugErrorLog = debug('typedorm:error:log');
    // stats logger
    debugStatsLog = debug('typedorm:stats:log');
    /**
     * Get unique request id for each request, and include it in each log
     * this allows for easy debugging
     * @returns unique request uuid
     */
    getRequestId() {
        return v4();
    }
    logTransform({ requestId, operation, prefix, entityName, primaryKey, body, options, }) {
        if (this.debugTransformLog.enabled) {
            this.debugTransformLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(operation)} ${chalk.blue(entityName)} ${chalk.magenta(prefix)}:`, ...(primaryKey
                ? [
                    chalk.blueBright('\nPrimary key: '),
                    chalk.white(this.ensurePrintable(primaryKey)),
                ]
                : []), ...(body
                ? [
                    chalk.blueBright('\nBody: '),
                    chalk.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk.blueBright('\nOptions: '),
                    chalk.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logTransformBatch({ requestId, operation, prefix, body, options, }) {
        if (this.debugTransformBatchLog.enabled) {
            this.debugTransformBatchLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(operation)} ${chalk.magenta(prefix)}:`, ...(body
                ? [
                    chalk.blueBright('\nBody: '),
                    chalk.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk.blueBright('\nOptions: '),
                    chalk.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logTransformTransaction({ requestId, operation, prefix, body, options, }) {
        if (this.debugTransformTransactionLog.enabled) {
            this.debugTransformTransactionLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(operation)} ${chalk.magenta(prefix)}:`, ...(body
                ? [
                    chalk.blueBright('\nBody: '),
                    chalk.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk.blueBright('\nOptions: '),
                    chalk.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logTransformScan({ requestId, prefix, operation, body, options, }) {
        if (this.debugTransformScanLog.enabled) {
            this.debugTransformScanLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(operation)} ${chalk.magenta(prefix)}:`, ...(body
                ? [
                    chalk.blueBright('\nBody: '),
                    chalk.white(this.ensurePrintable(body)),
                ]
                : []), ...(options
                ? [
                    chalk.blueBright('\nOptions: '),
                    chalk.white(this.ensurePrintable(options)),
                ]
                : []));
        }
    }
    logStats({ requestId, requestSegment, scope, statsType, consumedCapacityData, }) {
        if (this.debugStatsLog.enabled) {
            this.debugStatsLog(`${chalk.bold.bgCyanBright(requestId) +
                (requestSegment ? ':' + chalk.bold.bgCyanBright(requestId) : '')} ${chalk.green(scope)} ${chalk.magenta(statsType)}:`, chalk.white(this.ensurePrintable(consumedCapacityData)));
        }
    }
    logInfo({ requestId, scope, log, }) {
        if (this.debugInfoLog.enabled) {
            this.debugInfoLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(scope)}:`, chalk.white(this.ensurePrintable(log)));
        }
    }
    logWarn({ requestId, scope, log, }) {
        if (this.debugWarnLog.enabled) {
            this.debugWarnLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(scope)}:`, chalk.yellow(this.ensurePrintable(log)));
        }
    }
    logError({ requestId, scope, log, }) {
        if (this.debugErrorLog.enabled) {
            this.debugErrorLog(`${chalk.bold.bgCyanBright(requestId)} ${chalk.green(scope)}:`, chalk.red(this.ensurePrintable(log)));
        }
    }
    ensurePrintable(log) {
        if (typeof log === 'object' && log !== null) {
            return `\n${JSON.stringify(log, null, 2)}\n`;
        }
        else
            return log;
    }
}
//# sourceMappingURL=data:application/json;base64,