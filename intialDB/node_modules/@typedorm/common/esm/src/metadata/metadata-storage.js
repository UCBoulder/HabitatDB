export const IsAutoGenerateAttributeRawMetadataOptions = (attr) => !!attr.strategy;
export class MetadataStorage {
    _entities;
    _attributes;
    constructor() {
        this._entities = new Map();
        this._attributes = new Map();
    }
    /**
     * Get entity metadata by entity physical name
     * Physical name refers to value set to "name" property on @Entity
     * @param name entity physical name
     */
    getEntityByName(name) {
        return this.entities.find(en => en.name === name);
    }
    hasKnownEntity(entityClass) {
        return this._entities.has(entityClass);
    }
    getRawAttributesForEntity(entityClass) {
        const attributes = this._attributes.get(entityClass)?.values();
        if (!attributes) {
            // it is possible that entity might not have any attributes referenced such cases are
            // when inherited entity contains all the attribute declarations and derived ones only defines schema for it
            // Thus, instead of throwing an error, simply return [] list to continue processing other attributes
            return [];
        }
        return Array.from(attributes);
    }
    getRawEntityByTarget(entityClass) {
        const entity = this._entities.get(entityClass);
        if (!entity) {
            throw new Error(`No entity with name "${entityClass.name}" could be resolved, 
      make sure they have been declared at the connection creation time.`);
        }
        return entity;
    }
    addRawAttribute(entityClass, attribute) {
        let attributesForEntity = this._attributes.get(entityClass);
        if (!attributesForEntity) {
            attributesForEntity = new Map();
        }
        attributesForEntity.set(attribute.name, attribute);
        this._attributes.set(entityClass, attributesForEntity);
    }
    addRawEntity(entity) {
        this._entities.set(entity.target, entity);
    }
    get entities() {
        return Array.from(this._entities.values());
    }
    get attributes() {
        return Array.from(this._attributes.values()).map(attr => Array.from(attr.values()));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEtc3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbW1vbi9zcmMvbWV0YWRhdGEvbWV0YWRhdGEtc3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBRyxDQUN2RCxJQUFTLEVBQ3dDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQTRDdEUsTUFBTSxPQUFPLGVBQWU7SUFDbEIsU0FBUyxDQUFtRDtJQUM1RCxXQUFXLENBTWpCO0lBRUY7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZUFBZSxDQUFDLElBQVk7UUFDMUIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELGNBQWMsQ0FBUyxXQUFpQztRQUN0RCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCx5QkFBeUIsQ0FBUyxXQUFpQztRQUNqRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUUvRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YscUZBQXFGO1lBQ3JGLDRHQUE0RztZQUM1RyxvR0FBb0c7WUFDcEcsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsb0JBQW9CLENBQVMsV0FBaUM7UUFDNUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLFdBQVcsQ0FBQyxJQUFJO3lFQUNXLENBQUMsQ0FBQztTQUN0RTtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxlQUFlLENBQ2IsV0FBaUMsRUFDakMsU0FBc0M7UUFFdEMsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDeEIsbUJBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNqQztRQUVELG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxZQUFZLENBQUMsTUFBZ0M7UUFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDdEQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FDMUIsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1ksIEVudGl0eVRhcmdldH0gZnJvbSAnQHR5cGVkb3JtL2NvbW1vbic7XG5pbXBvcnQge1RhYmxlfSBmcm9tICcuLi90YWJsZSc7XG5pbXBvcnQge0F0dHJpYnV0ZU9wdGlvbnNVbmlxdWVUeXBlfSBmcm9tICcuLi9kZWNvcmF0b3JzL2F0dHJpYnV0ZS5kZWNvcmF0b3InO1xuaW1wb3J0IHtTY2FsYXJUeXBlfSBmcm9tICcuLi9oZWxwZXJzL3NjYWxhci10eXBlJztcbmltcG9ydCB7RW50aXR5QWxpYXNPclN0cmluZywgSW5kZXhPcHRpb25zV2l0aEFsaWFzfSBmcm9tICcuLi9pbmRleC1vcHRpb25zJztcblxuZXhwb3J0IGNvbnN0IElzQXV0b0dlbmVyYXRlQXR0cmlidXRlUmF3TWV0YWRhdGFPcHRpb25zID0gKFxuICBhdHRyOiBhbnlcbik6IGF0dHIgaXMgQXV0b0dlbmVyYXRlQXR0cmlidXRlUmF3TWV0YWRhdGFPcHRpb25zID0+ICEhYXR0ci5zdHJhdGVneTtcblxuZXhwb3J0IHR5cGUgUHJpbWFyeUtleTxFbnRpdHkgPSBhbnk+ID1cbiAgfCBTaW1wbGVQcmltYXJ5S2V5PEVudGl0eT5cbiAgfCBDb21wb3NpdGVQcmltYXJ5S2V5PEVudGl0eT47XG5cbmV4cG9ydCB0eXBlIFNpbXBsZVByaW1hcnlLZXk8RW50aXR5ID0gYW55PiA9IHtcbiAgcGFydGl0aW9uS2V5OiBFbnRpdHlBbGlhc09yU3RyaW5nPEVudGl0eT47XG59O1xuXG5leHBvcnQgdHlwZSBDb21wb3NpdGVQcmltYXJ5S2V5PEVudGl0eSA9IGFueT4gPSB7XG4gIHBhcnRpdGlvbktleTogRW50aXR5QWxpYXNPclN0cmluZzxFbnRpdHk+O1xuICBzb3J0S2V5OiBFbnRpdHlBbGlhc09yU3RyaW5nPEVudGl0eT47XG59O1xuXG5leHBvcnQgdHlwZSBJbmRleGVzPEVudGl0eSA9IGFueT4gPSB7XG4gIFtrZXk6IHN0cmluZ106IEluZGV4T3B0aW9uc1dpdGhBbGlhczxFbnRpdHk+O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlSYXdNZXRhZGF0YU9wdGlvbnM8RW50aXR5ID0gYW55PiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdGFyZ2V0OiBFbnRpdHlUYXJnZXQ8RW50aXR5PjtcbiAgcHJpbWFyeUtleTogUHJpbWFyeUtleTxFbnRpdHk+O1xuICBpbmRleGVzPzogSW5kZXhlczxFbnRpdHk+O1xuICB0YWJsZT86IFRhYmxlO1xufVxuXG5pbnRlcmZhY2UgQmFzZUF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9ucyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogYW55O1xuICBoaWRkZW4/OiBib29sZWFuO1xufVxuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGVSYXdNZXRhZGF0YU9wdGlvbnNcbiAgZXh0ZW5kcyBCYXNlQXR0cmlidXRlUmF3TWV0YWRhdGFPcHRpb25zIHtcbiAgdW5pcXVlPzogQXR0cmlidXRlT3B0aW9uc1VuaXF1ZVR5cGU7XG4gIGRlZmF1bHQ/OiBTY2FsYXJUeXBlIHwgKCgpID0+IFNjYWxhclR5cGUpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9HZW5lcmF0ZUF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9uc1xuICBleHRlbmRzIEJhc2VBdHRyaWJ1dGVSYXdNZXRhZGF0YU9wdGlvbnMge1xuICBzdHJhdGVneTogQVVUT19HRU5FUkFURV9BVFRSSUJVVEVfU1RSQVRFR1k7XG4gIGF1dG9VcGRhdGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFTdG9yYWdlIHtcbiAgcHJpdmF0ZSBfZW50aXRpZXM6IE1hcDxFbnRpdHlUYXJnZXQ8YW55PiwgRW50aXR5UmF3TWV0YWRhdGFPcHRpb25zPjtcbiAgcHJpdmF0ZSBfYXR0cmlidXRlczogTWFwPFxuICAgIEVudGl0eVRhcmdldDxhbnk+LFxuICAgIE1hcDxcbiAgICAgIHN0cmluZyxcbiAgICAgIEF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9ucyB8IEF1dG9HZW5lcmF0ZUF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9uc1xuICAgID5cbiAgPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbnRpdGllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9hdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBlbnRpdHkgbWV0YWRhdGEgYnkgZW50aXR5IHBoeXNpY2FsIG5hbWVcbiAgICogUGh5c2ljYWwgbmFtZSByZWZlcnMgdG8gdmFsdWUgc2V0IHRvIFwibmFtZVwiIHByb3BlcnR5IG9uIEBFbnRpdHlcbiAgICogQHBhcmFtIG5hbWUgZW50aXR5IHBoeXNpY2FsIG5hbWVcbiAgICovXG4gIGdldEVudGl0eUJ5TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5maW5kKGVuID0+IGVuLm5hbWUgPT09IG5hbWUpO1xuICB9XG5cbiAgaGFzS25vd25FbnRpdHk8RW50aXR5PihlbnRpdHlDbGFzczogRW50aXR5VGFyZ2V0PEVudGl0eT4pIHtcbiAgICByZXR1cm4gdGhpcy5fZW50aXRpZXMuaGFzKGVudGl0eUNsYXNzKTtcbiAgfVxuXG4gIGdldFJhd0F0dHJpYnV0ZXNGb3JFbnRpdHk8RW50aXR5PihlbnRpdHlDbGFzczogRW50aXR5VGFyZ2V0PEVudGl0eT4pIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5fYXR0cmlidXRlcy5nZXQoZW50aXR5Q2xhc3MpPy52YWx1ZXMoKTtcblxuICAgIGlmICghYXR0cmlidXRlcykge1xuICAgICAgLy8gaXQgaXMgcG9zc2libGUgdGhhdCBlbnRpdHkgbWlnaHQgbm90IGhhdmUgYW55IGF0dHJpYnV0ZXMgcmVmZXJlbmNlZCBzdWNoIGNhc2VzIGFyZVxuICAgICAgLy8gd2hlbiBpbmhlcml0ZWQgZW50aXR5IGNvbnRhaW5zIGFsbCB0aGUgYXR0cmlidXRlIGRlY2xhcmF0aW9ucyBhbmQgZGVyaXZlZCBvbmVzIG9ubHkgZGVmaW5lcyBzY2hlbWEgZm9yIGl0XG4gICAgICAvLyBUaHVzLCBpbnN0ZWFkIG9mIHRocm93aW5nIGFuIGVycm9yLCBzaW1wbHkgcmV0dXJuIFtdIGxpc3QgdG8gY29udGludWUgcHJvY2Vzc2luZyBvdGhlciBhdHRyaWJ1dGVzXG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgZ2V0UmF3RW50aXR5QnlUYXJnZXQ8RW50aXR5PihlbnRpdHlDbGFzczogRW50aXR5VGFyZ2V0PEVudGl0eT4pIHtcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLl9lbnRpdGllcy5nZXQoZW50aXR5Q2xhc3MpO1xuXG4gICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZW50aXR5IHdpdGggbmFtZSBcIiR7ZW50aXR5Q2xhc3MubmFtZX1cIiBjb3VsZCBiZSByZXNvbHZlZCwgXG4gICAgICBtYWtlIHN1cmUgdGhleSBoYXZlIGJlZW4gZGVjbGFyZWQgYXQgdGhlIGNvbm5lY3Rpb24gY3JlYXRpb24gdGltZS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGVudGl0eTtcbiAgfVxuXG4gIGFkZFJhd0F0dHJpYnV0ZTxFbnRpdHk+KFxuICAgIGVudGl0eUNsYXNzOiBFbnRpdHlUYXJnZXQ8RW50aXR5PixcbiAgICBhdHRyaWJ1dGU6IEF0dHJpYnV0ZVJhd01ldGFkYXRhT3B0aW9uc1xuICApIHtcbiAgICBsZXQgYXR0cmlidXRlc0ZvckVudGl0eSA9IHRoaXMuX2F0dHJpYnV0ZXMuZ2V0KGVudGl0eUNsYXNzKTtcblxuICAgIGlmICghYXR0cmlidXRlc0ZvckVudGl0eSkge1xuICAgICAgYXR0cmlidXRlc0ZvckVudGl0eSA9IG5ldyBNYXAoKTtcbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVzRm9yRW50aXR5LnNldChhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlKTtcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLnNldChlbnRpdHlDbGFzcywgYXR0cmlidXRlc0ZvckVudGl0eSk7XG4gIH1cblxuICBhZGRSYXdFbnRpdHkoZW50aXR5OiBFbnRpdHlSYXdNZXRhZGF0YU9wdGlvbnMpIHtcbiAgICB0aGlzLl9lbnRpdGllcy5zZXQoZW50aXR5LnRhcmdldCwgZW50aXR5KTtcbiAgfVxuXG4gIGdldCBlbnRpdGllcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9lbnRpdGllcy52YWx1ZXMoKSk7XG4gIH1cblxuICBnZXQgYXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9hdHRyaWJ1dGVzLnZhbHVlcygpKS5tYXAoYXR0ciA9PlxuICAgICAgQXJyYXkuZnJvbShhdHRyLnZhbHVlcygpKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==