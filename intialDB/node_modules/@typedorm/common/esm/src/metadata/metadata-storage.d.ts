import { AUTO_GENERATE_ATTRIBUTE_STRATEGY, EntityTarget } from '@typedorm/common';
import { Table } from '../table';
import { AttributeOptionsUniqueType } from '../decorators/attribute.decorator';
import { ScalarType } from '../helpers/scalar-type';
import { EntityAliasOrString, IndexOptionsWithAlias } from '../index-options';
export declare const IsAutoGenerateAttributeRawMetadataOptions: (attr: any) => attr is AutoGenerateAttributeRawMetadataOptions;
export type PrimaryKey<Entity = any> = SimplePrimaryKey<Entity> | CompositePrimaryKey<Entity>;
export type SimplePrimaryKey<Entity = any> = {
    partitionKey: EntityAliasOrString<Entity>;
};
export type CompositePrimaryKey<Entity = any> = {
    partitionKey: EntityAliasOrString<Entity>;
    sortKey: EntityAliasOrString<Entity>;
};
export type Indexes<Entity = any> = {
    [key: string]: IndexOptionsWithAlias<Entity>;
};
export interface EntityRawMetadataOptions<Entity = any> {
    name: string;
    target: EntityTarget<Entity>;
    primaryKey: PrimaryKey<Entity>;
    indexes?: Indexes<Entity>;
    table?: Table;
}
interface BaseAttributeRawMetadataOptions {
    name: string;
    type: any;
    hidden?: boolean;
}
export interface AttributeRawMetadataOptions extends BaseAttributeRawMetadataOptions {
    unique?: AttributeOptionsUniqueType;
    default?: ScalarType | (() => ScalarType);
}
export interface AutoGenerateAttributeRawMetadataOptions extends BaseAttributeRawMetadataOptions {
    strategy: AUTO_GENERATE_ATTRIBUTE_STRATEGY;
    autoUpdate?: boolean;
}
export declare class MetadataStorage {
    private _entities;
    private _attributes;
    constructor();
    /**
     * Get entity metadata by entity physical name
     * Physical name refers to value set to "name" property on @Entity
     * @param name entity physical name
     */
    getEntityByName(name: string): EntityRawMetadataOptions<any> | undefined;
    hasKnownEntity<Entity>(entityClass: EntityTarget<Entity>): boolean;
    getRawAttributesForEntity<Entity>(entityClass: EntityTarget<Entity>): (AutoGenerateAttributeRawMetadataOptions | AttributeRawMetadataOptions)[];
    getRawEntityByTarget<Entity>(entityClass: EntityTarget<Entity>): EntityRawMetadataOptions<any>;
    addRawAttribute<Entity>(entityClass: EntityTarget<Entity>, attribute: AttributeRawMetadataOptions): void;
    addRawEntity(entity: EntityRawMetadataOptions): void;
    get entities(): EntityRawMetadataOptions<any>[];
    get attributes(): (AutoGenerateAttributeRawMetadataOptions | AttributeRawMetadataOptions)[][];
}
export {};
